
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9a8  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea4  0800bb90  0800bb90  0000cb90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca34  0800ca34  0000e1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca34  0800ca34  0000da34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca3c  0800ca3c  0000e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca3c  0800ca3c  0000da3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca40  0800ca40  0000da40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800ca44  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  200001dc  0800cc20  0000e1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a94  0800cc20  0000ea94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d48  00000000  00000000  0000e205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e4f  00000000  00000000  0001ef4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00021da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c1f  00000000  00000000  00022d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000554a  00000000  00000000  0002397f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014103  00000000  00000000  00028ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000987c7  00000000  00000000  0003cfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5793  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000594c  00000000  00000000  000d57d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000db124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	0800bb78 	.word	0x0800bb78

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	0800bb78 	.word	0x0800bb78

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	@ 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eae:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	@ 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	@ 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_fcmpun>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011f4:	d102      	bne.n	80011fc <__aeabi_fcmpun+0x14>
 80011f6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011fa:	d108      	bne.n	800120e <__aeabi_fcmpun+0x26>
 80011fc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001200:	d102      	bne.n	8001208 <__aeabi_fcmpun+0x20>
 8001202:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001206:	d102      	bne.n	800120e <__aeabi_fcmpun+0x26>
 8001208:	f04f 0000 	mov.w	r0, #0
 800120c:	4770      	bx	lr
 800120e:	f04f 0001 	mov.w	r0, #1
 8001212:	4770      	bx	lr

08001214 <__aeabi_f2iz>:
 8001214:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001218:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800121c:	d30f      	bcc.n	800123e <__aeabi_f2iz+0x2a>
 800121e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001222:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001226:	d90d      	bls.n	8001244 <__aeabi_f2iz+0x30>
 8001228:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800122c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001230:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001234:	fa23 f002 	lsr.w	r0, r3, r2
 8001238:	bf18      	it	ne
 800123a:	4240      	negne	r0, r0
 800123c:	4770      	bx	lr
 800123e:	f04f 0000 	mov.w	r0, #0
 8001242:	4770      	bx	lr
 8001244:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001248:	d101      	bne.n	800124e <__aeabi_f2iz+0x3a>
 800124a:	0242      	lsls	r2, r0, #9
 800124c:	d105      	bne.n	800125a <__aeabi_f2iz+0x46>
 800124e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001252:	bf08      	it	eq
 8001254:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001258:	4770      	bx	lr
 800125a:	f04f 0000 	mov.w	r0, #0
 800125e:	4770      	bx	lr

08001260 <__aeabi_f2uiz>:
 8001260:	0042      	lsls	r2, r0, #1
 8001262:	d20e      	bcs.n	8001282 <__aeabi_f2uiz+0x22>
 8001264:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001268:	d30b      	bcc.n	8001282 <__aeabi_f2uiz+0x22>
 800126a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800126e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001272:	d409      	bmi.n	8001288 <__aeabi_f2uiz+0x28>
 8001274:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001278:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800127c:	fa23 f002 	lsr.w	r0, r3, r2
 8001280:	4770      	bx	lr
 8001282:	f04f 0000 	mov.w	r0, #0
 8001286:	4770      	bx	lr
 8001288:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800128c:	d101      	bne.n	8001292 <__aeabi_f2uiz+0x32>
 800128e:	0242      	lsls	r2, r0, #9
 8001290:	d102      	bne.n	8001298 <__aeabi_f2uiz+0x38>
 8001292:	f04f 30ff 	mov.w	r0, #4294967295
 8001296:	4770      	bx	lr
 8001298:	f04f 0000 	mov.w	r0, #0
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <__aeabi_d2lz>:
 80012a0:	b538      	push	{r3, r4, r5, lr}
 80012a2:	2200      	movs	r2, #0
 80012a4:	2300      	movs	r3, #0
 80012a6:	4604      	mov	r4, r0
 80012a8:	460d      	mov	r5, r1
 80012aa:	f7ff fbf3 	bl	8000a94 <__aeabi_dcmplt>
 80012ae:	b928      	cbnz	r0, 80012bc <__aeabi_d2lz+0x1c>
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80012b8:	f000 b80a 	b.w	80012d0 <__aeabi_d2ulz>
 80012bc:	4620      	mov	r0, r4
 80012be:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80012c2:	f000 f805 	bl	80012d0 <__aeabi_d2ulz>
 80012c6:	4240      	negs	r0, r0
 80012c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012cc:	bd38      	pop	{r3, r4, r5, pc}
 80012ce:	bf00      	nop

080012d0 <__aeabi_d2ulz>:
 80012d0:	b5d0      	push	{r4, r6, r7, lr}
 80012d2:	2200      	movs	r2, #0
 80012d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <__aeabi_d2ulz+0x34>)
 80012d6:	4606      	mov	r6, r0
 80012d8:	460f      	mov	r7, r1
 80012da:	f7ff f969 	bl	80005b0 <__aeabi_dmul>
 80012de:	f7ff fc3f 	bl	8000b60 <__aeabi_d2uiz>
 80012e2:	4604      	mov	r4, r0
 80012e4:	f7ff f8ea 	bl	80004bc <__aeabi_ui2d>
 80012e8:	2200      	movs	r2, #0
 80012ea:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <__aeabi_d2ulz+0x38>)
 80012ec:	f7ff f960 	bl	80005b0 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4630      	mov	r0, r6
 80012f6:	4639      	mov	r1, r7
 80012f8:	f7fe ffa2 	bl	8000240 <__aeabi_dsub>
 80012fc:	f7ff fc30 	bl	8000b60 <__aeabi_d2uiz>
 8001300:	4621      	mov	r1, r4
 8001302:	bdd0      	pop	{r4, r6, r7, pc}
 8001304:	3df00000 	.word	0x3df00000
 8001308:	41f00000 	.word	0x41f00000

0800130c <CircularBuffer_Init>:
#include "CircularBuffer.h"
#include <string.h>

// Khởi tạo buffer
void CircularBuffer_Init(CircularBuffer *cb)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	cb->head = 0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	cb->tail = 0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	cb->count = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	memset(cb->buffer, 0, sizeof(cb->buffer));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2240      	movs	r2, #64	@ 0x40
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f006 fb07 	bl	8007946 <memset>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <CircularBuffer_Push>:

// Thêm phần tử vào cuối buffer (push)
bool CircularBuffer_Push(CircularBuffer *cb, SensorReadout value)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	if (cb->count == CIRCULAR_BUFFER_SIZE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001350:	2b10      	cmp	r3, #16
 8001352:	d116      	bne.n	8001382 <CircularBuffer_Push+0x42>
	{
		// Buffer đầy, ghi đè phần tử đầu
		cb->head = (cb->head + 1) % CIRCULAR_BUFFER_SIZE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800135a:	3301      	adds	r3, #1
 800135c:	425a      	negs	r2, r3
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	f002 020f 	and.w	r2, r2, #15
 8001366:	bf58      	it	pl
 8001368:	4253      	negpl	r3, r2
 800136a:	b2da      	uxtb	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		cb->count--;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001378:	3b01      	subs	r3, #1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	}
	cb->buffer[cb->tail] = value;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	463a      	mov	r2, r7
 8001390:	6810      	ldr	r0, [r2, #0]
 8001392:	6018      	str	r0, [r3, #0]
	cb->tail = (cb->tail + 1) % CIRCULAR_BUFFER_SIZE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800139a:	3301      	adds	r3, #1
 800139c:	425a      	negs	r2, r3
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	f002 020f 	and.w	r2, r2, #15
 80013a6:	bf58      	it	pl
 80013a8:	4253      	negpl	r3, r2
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	cb->count++;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80013b8:	3301      	adds	r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	return true;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <CircularBuffer_Pop>:

// Xóa phần tử đầu buffer (pop/shift)
bool CircularBuffer_Pop(CircularBuffer *cb, SensorReadout *value)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
	if (cb->count == 0)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <CircularBuffer_Pop+0x18>
		return false;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e020      	b.n	8001428 <CircularBuffer_Pop+0x5a>
	*value = cb->buffer[cb->head];
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013ec:	6839      	ldr	r1, [r7, #0]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	600b      	str	r3, [r1, #0]
	cb->head = (cb->head + 1) % CIRCULAR_BUFFER_SIZE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013fe:	3301      	adds	r3, #1
 8001400:	425a      	negs	r2, r3
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	f002 020f 	and.w	r2, r2, #15
 800140a:	bf58      	it	pl
 800140c:	4253      	negpl	r3, r2
 800140e:	b2da      	uxtb	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	cb->count--;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800141c:	3b01      	subs	r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	return true;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <MAX30100_Begin>:

extern I2C_HandleTypeDef hi2c1;

// Khởi tạo cảm biến
bool MAX30100_Begin(MAX30100 *dev)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
    if (MAX30100_GetPartId(dev) != EXPECTED_PART_ID)
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f8b9 	bl	80015b2 <MAX30100_GetPartId>
 8001440:	4603      	mov	r3, r0
 8001442:	2b11      	cmp	r3, #17
 8001444:	d001      	beq.n	800144a <MAX30100_Begin+0x18>
        return false;
 8001446:	2300      	movs	r3, #0
 8001448:	e01e      	b.n	8001488 <MAX30100_Begin+0x56>

    // Thoát shutdown, chọn chế độ SPO2_HR
    MAX30100_WriteRegister(MAX30100_REG_MODE_CONFIGURATION, MAX30100_MODE_SPO2_HR);
 800144a:	2103      	movs	r1, #3
 800144c:	2006      	movs	r0, #6
 800144e:	f000 f8d9 	bl	8001604 <MAX30100_WriteRegister>
    HAL_Delay(2);
 8001452:	2002      	movs	r0, #2
 8001454:	f002 f916 	bl	8003684 <HAL_Delay>

    // Cấu hình SPO2: sampling rate, pulse width, highres
    MAX30100_ConfigureSPO2(dev, DEFAULT_SAMPLING_RATE, DEFAULT_PULSE_WIDTH, true);
 8001458:	2301      	movs	r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	2101      	movs	r1, #1
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f825 	bl	80014ae <MAX30100_ConfigureSPO2>
    HAL_Delay(2);
 8001464:	2002      	movs	r0, #2
 8001466:	f002 f90d 	bl	8003684 <HAL_Delay>

    // Cấu hình dòng điện LED
    MAX30100_SetLedsCurrent(dev, DEFAULT_IR_LED_CURRENT, DEFAULT_RED_LED_CURRENT);
 800146a:	220f      	movs	r2, #15
 800146c:	210f      	movs	r1, #15
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f848 	bl	8001504 <MAX30100_SetLedsCurrent>
    HAL_Delay(2);
 8001474:	2002      	movs	r0, #2
 8001476:	f002 f905 	bl	8003684 <HAL_Delay>

    // Reset FIFO
    MAX30100_ResetFifo(dev);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f885 	bl	800158a <MAX30100_ResetFifo>
    HAL_Delay(2);
 8001480:	2002      	movs	r0, #2
 8001482:	f002 f8ff 	bl	8003684 <HAL_Delay>

    return true;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <MAX30100_SetMode>:

// Chọn chế độ đo (HR, SPO2, ...)
void MAX30100_SetMode(MAX30100 *dev, Mode mode)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
    MAX30100_WriteRegister(MAX30100_REG_MODE_CONFIGURATION, mode);
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	4619      	mov	r1, r3
 80014a0:	2006      	movs	r0, #6
 80014a2:	f000 f8af 	bl	8001604 <MAX30100_WriteRegister>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <MAX30100_ConfigureSPO2>:

// Cấu hình sampling rate, pulse width, highres
void MAX30100_ConfigureSPO2(MAX30100 *dev, SamplingRate sr, LEDPulseWidth pw, bool highres)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	4608      	mov	r0, r1
 80014b8:	4611      	mov	r1, r2
 80014ba:	461a      	mov	r2, r3
 80014bc:	4603      	mov	r3, r0
 80014be:	70fb      	strb	r3, [r7, #3]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70bb      	strb	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
    uint8_t value = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
    value |= (sr << 2); // Sampling rate
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	73fb      	strb	r3, [r7, #15]
    value |= pw;        // Pulse width
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	78bb      	ldrb	r3, [r7, #2]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	73fb      	strb	r3, [r7, #15]
    if (highres)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <MAX30100_ConfigureSPO2+0x44>
        value |= MAX30100_SPC_SPO2_HI_RES_EN;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014f0:	73fb      	strb	r3, [r7, #15]
    MAX30100_WriteRegister(MAX30100_REG_SPO2_CONFIGURATION, value);
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	4619      	mov	r1, r3
 80014f6:	2007      	movs	r0, #7
 80014f8:	f000 f884 	bl	8001604 <MAX30100_WriteRegister>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <MAX30100_SetLedsCurrent>:

// Cấu hình dòng điện LED
void MAX30100_SetLedsCurrent(MAX30100 *dev, LEDCurrent irLedCurrent, LEDCurrent redLedCurrent)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
 8001510:	4613      	mov	r3, r2
 8001512:	70bb      	strb	r3, [r7, #2]
    MAX30100_WriteRegister(MAX30100_REG_LED_CONFIGURATION, (redLedCurrent << 4) | irLedCurrent);
 8001514:	78bb      	ldrb	r3, [r7, #2]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	b25a      	sxtb	r2, r3
 800151a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800151e:	4313      	orrs	r3, r2
 8001520:	b25b      	sxtb	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4619      	mov	r1, r3
 8001526:	2009      	movs	r0, #9
 8001528:	f000 f86c 	bl	8001604 <MAX30100_WriteRegister>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <MAX30100_Update>:

// Đọc dữ liệu mới từ FIFO, cập nhật buffer
void MAX30100_Update(MAX30100 *dev)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    MAX30100_ReadFifoData(dev);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f899 	bl	8001674 <MAX30100_ReadFifoData>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <MAX30100_GetRawValues>:

// Lấy giá trị raw IR/RED mới nhất
bool MAX30100_GetRawValues(MAX30100 *dev, uint16_t *ir, uint16_t *red)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
    SensorReadout readout;
    if (!CircularBuffer_Pop(&dev->readoutsBuffer, &readout))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f107 0214 	add.w	r2, r7, #20
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff35 	bl	80013ce <CircularBuffer_Pop>
 8001564:	4603      	mov	r3, r0
 8001566:	f083 0301 	eor.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MAX30100_GetRawValues+0x2a>
        return false;
 8001570:	2300      	movs	r3, #0
 8001572:	e006      	b.n	8001582 <MAX30100_GetRawValues+0x38>
    *ir = readout.ir;
 8001574:	8aba      	ldrh	r2, [r7, #20]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	801a      	strh	r2, [r3, #0]
    *red = readout.red;
 800157a:	8afa      	ldrh	r2, [r7, #22]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	801a      	strh	r2, [r3, #0]
    return true;
 8001580:	2301      	movs	r3, #1
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <MAX30100_ResetFifo>:

// Reset FIFO
void MAX30100_ResetFifo(MAX30100 *dev)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
    MAX30100_WriteRegister(MAX30100_REG_FIFO_WRITE_POINTER, 0);
 8001592:	2100      	movs	r1, #0
 8001594:	2002      	movs	r0, #2
 8001596:	f000 f835 	bl	8001604 <MAX30100_WriteRegister>
    MAX30100_WriteRegister(MAX30100_REG_FIFO_READ_POINTER, 0);
 800159a:	2100      	movs	r1, #0
 800159c:	2004      	movs	r0, #4
 800159e:	f000 f831 	bl	8001604 <MAX30100_WriteRegister>
    MAX30100_WriteRegister(MAX30100_REG_FIFO_OVERFLOW_COUNTER, 0);
 80015a2:	2100      	movs	r1, #0
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 f82d 	bl	8001604 <MAX30100_WriteRegister>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <MAX30100_GetPartId>:
    MAX30100_WriteRegister(MAX30100_REG_MODE_CONFIGURATION, modeConfig);
}

// Đọc Part ID
uint8_t MAX30100_GetPartId(MAX30100 *dev)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
    return MAX30100_ReadRegister(MAX30100_REG_PART_ID);
 80015ba:	20ff      	movs	r0, #255	@ 0xff
 80015bc:	f000 f806 	bl	80015cc <MAX30100_ReadRegister>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <MAX30100_ReadRegister>:

// --- I2C giao tiếp sử dụng HAL ---
uint8_t MAX30100_ReadRegister(uint8_t address)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af04      	add	r7, sp, #16
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, MAX30100_I2C_ADDRESS << 1, address, 1, &value, 1, 100);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	2364      	movs	r3, #100	@ 0x64
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	2301      	movs	r3, #1
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	f107 030f 	add.w	r3, r7, #15
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	21ae      	movs	r1, #174	@ 0xae
 80015f0:	4803      	ldr	r0, [pc, #12]	@ (8001600 <MAX30100_ReadRegister+0x34>)
 80015f2:	f002 fec7 	bl	8004384 <HAL_I2C_Mem_Read>
    return value;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200002d8 	.word	0x200002d8

08001604 <MAX30100_WriteRegister>:

void MAX30100_WriteRegister(uint8_t address, uint8_t data)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af04      	add	r7, sp, #16
 800160a:	4603      	mov	r3, r0
 800160c:	460a      	mov	r2, r1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MAX30100_I2C_ADDRESS << 1, address, 1, &data, 1, 100);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	b29a      	uxth	r2, r3
 8001618:	2364      	movs	r3, #100	@ 0x64
 800161a:	9302      	str	r3, [sp, #8]
 800161c:	2301      	movs	r3, #1
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	1dbb      	adds	r3, r7, #6
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	21ae      	movs	r1, #174	@ 0xae
 8001628:	4803      	ldr	r0, [pc, #12]	@ (8001638 <MAX30100_WriteRegister+0x34>)
 800162a:	f002 fdb1 	bl	8004190 <HAL_I2C_Mem_Write>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002d8 	.word	0x200002d8

0800163c <MAX30100_BurstRead>:

void MAX30100_BurstRead(uint8_t baseAddress, uint8_t *buffer, uint8_t length)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af04      	add	r7, sp, #16
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	4613      	mov	r3, r2
 800164a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30100_I2C_ADDRESS << 1, baseAddress, 1, buffer, length, 100);
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	b29a      	uxth	r2, r3
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	b29b      	uxth	r3, r3
 8001654:	2164      	movs	r1, #100	@ 0x64
 8001656:	9102      	str	r1, [sp, #8]
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	21ae      	movs	r1, #174	@ 0xae
 8001662:	4803      	ldr	r0, [pc, #12]	@ (8001670 <MAX30100_BurstRead+0x34>)
 8001664:	f002 fe8e 	bl	8004384 <HAL_I2C_Mem_Read>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200002d8 	.word	0x200002d8

08001674 <MAX30100_ReadFifoData>:

// Đọc dữ liệu từ FIFO, đẩy vào buffer
void MAX30100_ReadFifoData(MAX30100 *dev)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[4];
    MAX30100_BurstRead(MAX30100_REG_FIFO_DATA, buffer, 4);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2204      	movs	r2, #4
 8001682:	4619      	mov	r1, r3
 8001684:	2005      	movs	r0, #5
 8001686:	f7ff ffd9 	bl	800163c <MAX30100_BurstRead>

    SensorReadout readout;
    readout.ir = (uint16_t)((buffer[0] << 8) | buffer[1]);
 800168a:	7b3b      	ldrb	r3, [r7, #12]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21a      	sxth	r2, r3
 8001690:	7b7b      	ldrb	r3, [r7, #13]
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b21b      	sxth	r3, r3
 8001698:	b29b      	uxth	r3, r3
 800169a:	813b      	strh	r3, [r7, #8]
    readout.red = (uint16_t)((buffer[2] << 8) | buffer[3]);
 800169c:	7bbb      	ldrb	r3, [r7, #14]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	817b      	strh	r3, [r7, #10]
    CircularBuffer_Push(&dev->readoutsBuffer, readout);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fe44 	bl	8001340 <CircularBuffer_Push>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <BeatDetector_GetRate>:
    bd->lastMaxValue = 0;
    bd->tsLastBeat = 0;
}

float BeatDetector_GetRate(BeatDetector *bd)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    if (bd->beatPeriod != 0)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fd57 	bl	8001184 <__aeabi_fcmpeq>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d112      	bne.n	8001702 <BeatDetector_GetRate+0x42>
    {
        return 1.0f / bd->beatPeriod * 1000.0f * 60.0f;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80016e6:	f7ff fc6d 	bl	8000fc4 <__aeabi_fdiv>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4908      	ldr	r1, [pc, #32]	@ (8001710 <BeatDetector_GetRate+0x50>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fbb4 	bl	8000e5c <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4907      	ldr	r1, [pc, #28]	@ (8001714 <BeatDetector_GetRate+0x54>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fbaf 	bl	8000e5c <__aeabi_fmul>
 80016fe:	4603      	mov	r3, r0
 8001700:	e001      	b.n	8001706 <BeatDetector_GetRate+0x46>
    }
    else
    {
        return 0.0f;
 8001702:	f04f 0300 	mov.w	r3, #0
    }
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	447a0000 	.word	0x447a0000
 8001714:	42700000 	.word	0x42700000

08001718 <BeatDetector_AddSample>:
    return bd->threshold;
}

// Hàm chính: thêm mẫu mới, trả về true nếu phát hiện nhịp
bool BeatDetector_AddSample(BeatDetector *bd, float sample, uint32_t timestamp_ms)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
    bool beatDetected = false;
 8001724:	2300      	movs	r3, #0
 8001726:	75fb      	strb	r3, [r7, #23]

    switch (bd->state)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b04      	cmp	r3, #4
 800172e:	f200 80ae 	bhi.w	800188e <BeatDetector_AddSample+0x176>
 8001732:	a201      	add	r2, pc, #4	@ (adr r2, 8001738 <BeatDetector_AddSample+0x20>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	0800174d 	.word	0x0800174d
 800173c:	0800175f 	.word	0x0800175f
 8001740:	080017b5 	.word	0x080017b5
 8001744:	080017e9 	.word	0x080017e9
 8001748:	08001873 	.word	0x08001873
    {
    case BEATDETECTOR_STATE_INIT:
        if (timestamp_ms > BEATDETECTOR_INIT_HOLDOFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001752:	f240 809b 	bls.w	800188c <BeatDetector_AddSample+0x174>
        {
            bd->state = BEATDETECTOR_STATE_WAITING;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800175c:	e096      	b.n	800188c <BeatDetector_AddSample+0x174>

    case BEATDETECTOR_STATE_WAITING:
        if (sample > bd->threshold)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4619      	mov	r1, r3
 8001764:	68b8      	ldr	r0, [r7, #8]
 8001766:	f7ff fd35 	bl	80011d4 <__aeabi_fcmpgt>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00e      	beq.n	800178e <BeatDetector_AddSample+0x76>
        {
            bd->threshold = MIN(sample, BEATDETECTOR_MAX_THRESHOLD);
 8001770:	4949      	ldr	r1, [pc, #292]	@ (8001898 <BeatDetector_AddSample+0x180>)
 8001772:	68b8      	ldr	r0, [r7, #8]
 8001774:	f7ff fd10 	bl	8001198 <__aeabi_fcmplt>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <BeatDetector_AddSample+0x6a>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	e000      	b.n	8001784 <BeatDetector_AddSample+0x6c>
 8001782:	4b45      	ldr	r3, [pc, #276]	@ (8001898 <BeatDetector_AddSample+0x180>)
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	6053      	str	r3, [r2, #4]
            bd->state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2202      	movs	r2, #2
 800178c:	701a      	strb	r2, [r3, #0]
        }
        // Tracking lost, resetting
        if (timestamp_ms - bd->tsLastBeat > BEATDETECTOR_INVALID_READOUT_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800179a:	d907      	bls.n	80017ac <BeatDetector_AddSample+0x94>
        {
            bd->beatPeriod = 0;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
            bd->lastMaxValue = 0;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
        }
        BeatDetector_DecreaseThreshold(bd);
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f87b 	bl	80018a8 <BeatDetector_DecreaseThreshold>
        break;
 80017b2:	e06c      	b.n	800188e <BeatDetector_AddSample+0x176>

    case BEATDETECTOR_STATE_FOLLOWING_SLOPE:
        if (sample < bd->threshold)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4619      	mov	r1, r3
 80017ba:	68b8      	ldr	r0, [r7, #8]
 80017bc:	f7ff fcec 	bl	8001198 <__aeabi_fcmplt>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <BeatDetector_AddSample+0xb6>
        {
            bd->state = BEATDETECTOR_STATE_MAYBE_DETECTED;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2203      	movs	r2, #3
 80017ca:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            bd->threshold = MIN(sample, BEATDETECTOR_MAX_THRESHOLD);
        }
        break;
 80017cc:	e05f      	b.n	800188e <BeatDetector_AddSample+0x176>
            bd->threshold = MIN(sample, BEATDETECTOR_MAX_THRESHOLD);
 80017ce:	4932      	ldr	r1, [pc, #200]	@ (8001898 <BeatDetector_AddSample+0x180>)
 80017d0:	68b8      	ldr	r0, [r7, #8]
 80017d2:	f7ff fce1 	bl	8001198 <__aeabi_fcmplt>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <BeatDetector_AddSample+0xc8>
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	e000      	b.n	80017e2 <BeatDetector_AddSample+0xca>
 80017e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <BeatDetector_AddSample+0x180>)
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	6053      	str	r3, [r2, #4]
        break;
 80017e6:	e052      	b.n	800188e <BeatDetector_AddSample+0x176>

    case BEATDETECTOR_STATE_MAYBE_DETECTED:
        if (sample + BEATDETECTOR_STEP_RESILIENCY < bd->threshold)
 80017e8:	492c      	ldr	r1, [pc, #176]	@ (800189c <BeatDetector_AddSample+0x184>)
 80017ea:	68b8      	ldr	r0, [r7, #8]
 80017ec:	f7ff fa2e 	bl	8000c4c <__addsf3>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f7ff fccc 	bl	8001198 <__aeabi_fcmplt>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d031      	beq.n	800186a <BeatDetector_AddSample+0x152>
        {
            // Found a beat
            beatDetected = true;
 8001806:	2301      	movs	r3, #1
 8001808:	75fb      	strb	r3, [r7, #23]
            bd->lastMaxValue = sample;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	60da      	str	r2, [r3, #12]
            bd->state = BEATDETECTOR_STATE_MASKING;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2204      	movs	r2, #4
 8001814:	701a      	strb	r2, [r3, #0]
            float delta = (float)(timestamp_ms - bd->tsLastBeat);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fac4 	bl	8000dac <__aeabi_ui2f>
 8001824:	4603      	mov	r3, r0
 8001826:	613b      	str	r3, [r7, #16]
            if (delta > 0)
 8001828:	f04f 0100 	mov.w	r1, #0
 800182c:	6938      	ldr	r0, [r7, #16]
 800182e:	f7ff fcd1 	bl	80011d4 <__aeabi_fcmpgt>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d014      	beq.n	8001862 <BeatDetector_AddSample+0x14a>
            {
                bd->beatPeriod = BEATDETECTOR_BPFILTER_ALPHA * delta +
 8001838:	4919      	ldr	r1, [pc, #100]	@ (80018a0 <BeatDetector_AddSample+0x188>)
 800183a:	6938      	ldr	r0, [r7, #16]
 800183c:	f7ff fb0e 	bl	8000e5c <__aeabi_fmul>
 8001840:	4603      	mov	r3, r0
 8001842:	461c      	mov	r4, r3
                                 (1.0f - BEATDETECTOR_BPFILTER_ALPHA) * bd->beatPeriod;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4916      	ldr	r1, [pc, #88]	@ (80018a4 <BeatDetector_AddSample+0x18c>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fb06 	bl	8000e5c <__aeabi_fmul>
 8001850:	4603      	mov	r3, r0
                bd->beatPeriod = BEATDETECTOR_BPFILTER_ALPHA * delta +
 8001852:	4619      	mov	r1, r3
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff f9f9 	bl	8000c4c <__addsf3>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	609a      	str	r2, [r3, #8]
            }
            bd->tsLastBeat = timestamp_ms;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	611a      	str	r2, [r3, #16]
        }
        else
        {
            bd->state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
        }
        break;
 8001868:	e011      	b.n	800188e <BeatDetector_AddSample+0x176>
            bd->state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2202      	movs	r2, #2
 800186e:	701a      	strb	r2, [r3, #0]
        break;
 8001870:	e00d      	b.n	800188e <BeatDetector_AddSample+0x176>

    case BEATDETECTOR_STATE_MASKING:
        if (timestamp_ms - bd->tsLastBeat > BEATDETECTOR_MASKING_HOLDOFF)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2bc8      	cmp	r3, #200	@ 0xc8
 800187c:	d902      	bls.n	8001884 <BeatDetector_AddSample+0x16c>
        {
            bd->state = BEATDETECTOR_STATE_WAITING;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
        }
        BeatDetector_DecreaseThreshold(bd);
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f80f 	bl	80018a8 <BeatDetector_DecreaseThreshold>
        break;
 800188a:	e000      	b.n	800188e <BeatDetector_AddSample+0x176>
        break;
 800188c:	bf00      	nop
    }

    return beatDetected;
 800188e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001890:	4618      	mov	r0, r3
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	44480000 	.word	0x44480000
 800189c:	41f00000 	.word	0x41f00000
 80018a0:	3f19999a 	.word	0x3f19999a
 80018a4:	3ecccccc 	.word	0x3ecccccc

080018a8 <BeatDetector_DecreaseThreshold>:

// Hàm giảm ngưỡng threshold
static void BeatDetector_DecreaseThreshold(BeatDetector *bd)
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    if (bd->lastMaxValue > 0 && bd->beatPeriod > 0)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fc8b 	bl	80011d4 <__aeabi_fcmpgt>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d028      	beq.n	8001916 <BeatDetector_DecreaseThreshold+0x6e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f04f 0100 	mov.w	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fc81 	bl	80011d4 <__aeabi_fcmpgt>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01e      	beq.n	8001916 <BeatDetector_DecreaseThreshold+0x6e>
    {
        bd->threshold -= bd->lastMaxValue * (1.0f - BEATDETECTOR_THRESHOLD_FALLOFF_TARGET) /
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685c      	ldr	r4, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	491a      	ldr	r1, [pc, #104]	@ (800194c <BeatDetector_DecreaseThreshold+0xa4>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff faba 	bl	8000e5c <__aeabi_fmul>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461d      	mov	r5, r3
                         (bd->beatPeriod / BEATDETECTOR_SAMPLES_PERIOD);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4917      	ldr	r1, [pc, #92]	@ (8001950 <BeatDetector_DecreaseThreshold+0xa8>)
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fb66 	bl	8000fc4 <__aeabi_fdiv>
 80018f8:	4603      	mov	r3, r0
        bd->threshold -= bd->lastMaxValue * (1.0f - BEATDETECTOR_THRESHOLD_FALLOFF_TARGET) /
 80018fa:	4619      	mov	r1, r3
 80018fc:	4628      	mov	r0, r5
 80018fe:	f7ff fb61 	bl	8000fc4 <__aeabi_fdiv>
 8001902:	4603      	mov	r3, r0
 8001904:	4619      	mov	r1, r3
 8001906:	4620      	mov	r0, r4
 8001908:	f7ff f99e 	bl	8000c48 <__aeabi_fsub>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	e009      	b.n	800192a <BeatDetector_DecreaseThreshold+0x82>
    }
    else
    {
        bd->threshold *= BEATDETECTOR_THRESHOLD_DECAY_FACTOR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	490e      	ldr	r1, [pc, #56]	@ (8001954 <BeatDetector_DecreaseThreshold+0xac>)
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fa9d 	bl	8000e5c <__aeabi_fmul>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	605a      	str	r2, [r3, #4]
    }
    if (bd->threshold < BEATDETECTOR_MIN_THRESHOLD)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	490a      	ldr	r1, [pc, #40]	@ (8001958 <BeatDetector_DecreaseThreshold+0xb0>)
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fc31 	bl	8001198 <__aeabi_fcmplt>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d100      	bne.n	800193e <BeatDetector_DecreaseThreshold+0x96>
    {
        bd->threshold = BEATDETECTOR_MIN_THRESHOLD;
    }
 800193c:	e002      	b.n	8001944 <BeatDetector_DecreaseThreshold+0x9c>
        bd->threshold = BEATDETECTOR_MIN_THRESHOLD;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <BeatDetector_DecreaseThreshold+0xb0>)
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	3f333333 	.word	0x3f333333
 8001950:	41200000 	.word	0x41200000
 8001954:	3f7d70a4 	.word	0x3f7d70a4
 8001958:	41a00000 	.word	0x41a00000

0800195c <FilterBuLp1_Step>:
	f->v[1] = 0.0f;
}

// Bước lọc (step)
static inline float FilterBuLp1_Step(FilterBuLp1 *f, float x)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	f->v[0] = f->v[1];
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
	f->v[1] = (0.2452372752527856f * x) + (0.5095254494944288f * f->v[0]);
 800196e:	4911      	ldr	r1, [pc, #68]	@ (80019b4 <FilterBuLp1_Step+0x58>)
 8001970:	6838      	ldr	r0, [r7, #0]
 8001972:	f7ff fa73 	bl	8000e5c <__aeabi_fmul>
 8001976:	4603      	mov	r3, r0
 8001978:	461c      	mov	r4, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	490e      	ldr	r1, [pc, #56]	@ (80019b8 <FilterBuLp1_Step+0x5c>)
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fa6b 	bl	8000e5c <__aeabi_fmul>
 8001986:	4603      	mov	r3, r0
 8001988:	4619      	mov	r1, r3
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff f95e 	bl	8000c4c <__addsf3>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	605a      	str	r2, [r3, #4]
	return (f->v[0] + f->v[1]);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4619      	mov	r1, r3
 80019a2:	4610      	mov	r0, r2
 80019a4:	f7ff f952 	bl	8000c4c <__addsf3>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd90      	pop	{r4, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	3e7b1f7b 	.word	0x3e7b1f7b
 80019b8:	3f027043 	.word	0x3f027043

080019bc <DCRemover_Init>:
	float dcw;
} DCRemover;

// Khởi tạo DCRemover với alpha
static inline void DCRemover_Init(DCRemover *dcr, float alpha)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	dcr->alpha = alpha;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	601a      	str	r2, [r3, #0]
	dcr->dcw = 0.0f;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <DCRemover_Step>:

// Bước lọc (step)
static inline float DCRemover_Step(DCRemover *dcr, float x)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
	float olddcw = dcr->dcw;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
	dcr->dcw = x + dcr->alpha * dcr->dcw;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f7ff fa2f 	bl	8000e5c <__aeabi_fmul>
 80019fe:	4603      	mov	r3, r0
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f922 	bl	8000c4c <__addsf3>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	605a      	str	r2, [r3, #4]
	return dcr->dcw - olddcw;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f916 	bl	8000c48 <__aeabi_fsub>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <DCRemover_GetDCW>:

// Lấy giá trị DC hiện tại
static inline float DCRemover_GetDCW(DCRemover *dcr)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
	return dcr->dcw;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <PulseOximeter_Init>:

static void checkSample(PulseOximeter *po);
static void checkCurrentBias(PulseOximeter *po);

void PulseOximeter_Init(PulseOximeter *po)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    po->state = PULSEOXIMETER_STATE_INIT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
    po->tsFirstBeatDetected = 0;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
    po->tsLastBeatDetected = 0;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
    po->tsLastBiasCheck = 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
    po->tsLastCurrentAdjustment = 0;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
    po->redLedCurrentIndex = (uint8_t)RED_LED_CURRENT_START;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2208      	movs	r2, #8
 8001a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    po->irLedCurrent = DEFAULT_IR_LED_CURRENT;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    po->onBeatDetected = NULL;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    CircularBuffer_Init(&po->hrm.readoutsBuffer);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3358      	adds	r3, #88	@ 0x58
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fc44 	bl	800130c <CircularBuffer_Init>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <PulseOximeter_Begin>:

bool PulseOximeter_Begin(PulseOximeter *po, PulseOximeterDebuggingMode debuggingMode)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
    po->debuggingMode = debuggingMode;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	78fa      	ldrb	r2, [r7, #3]
 8001a9c:	705a      	strb	r2, [r3, #1]

    bool ready = MAX30100_Begin(&po->hrm);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3358      	adds	r3, #88	@ 0x58
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fcc5 	bl	8001432 <MAX30100_Begin>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]

    if (!ready)
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	f083 0301 	eor.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <PulseOximeter_Begin+0x30>
    {
        // Có thể thêm debug qua UART nếu cần
        return false;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e029      	b.n	8001b10 <PulseOximeter_Begin+0x84>
    }

    MAX30100_SetMode(&po->hrm, MAX30100_MODE_SPO2_HR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3358      	adds	r3, #88	@ 0x58
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fce4 	bl	8001490 <MAX30100_SetMode>
	MAX30100_SetLedsCurrent(&po->hrm, po->irLedCurrent, (LEDCurrent)po->redLedCurrentIndex);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 1041 	ldrb.w	r1, [r3, #65]	@ 0x41
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ada:	461a      	mov	r2, r3
 8001adc:	f7ff fd12 	bl	8001504 <MAX30100_SetLedsCurrent>
	// Thay thế 3 dòng dưới đây:
	// MAX30100_SetLedsPulseWidth(&po->hrm, MAX30100_SPC_PW_1600US_16BITS);
	// MAX30100_SetSamplingRate(&po->hrm, MAX30100_SAMPRATE_100HZ);
	// MAX30100_SetHighresModeEnabled(&po->hrm, true);
	// Bằng 1 dòng này:
	MAX30100_ConfigureSPO2(&po->hrm, MAX30100_SAMPRATE_100HZ, MAX30100_SPC_PW_1600US_16BITS, true);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	2101      	movs	r1, #1
 8001aec:	f7ff fcdf 	bl	80014ae <MAX30100_ConfigureSPO2>

    DCRemover_Init(&po->irDCRemover, DC_REMOVER_ALPHA);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3328      	adds	r3, #40	@ 0x28
 8001af4:	4908      	ldr	r1, [pc, #32]	@ (8001b18 <PulseOximeter_Begin+0x8c>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff60 	bl	80019bc <DCRemover_Init>
    DCRemover_Init(&po->redDCRemover, DC_REMOVER_ALPHA);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3330      	adds	r3, #48	@ 0x30
 8001b00:	4905      	ldr	r1, [pc, #20]	@ (8001b18 <PulseOximeter_Begin+0x8c>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff5a 	bl	80019bc <DCRemover_Init>

    po->state = PULSEOXIMETER_STATE_IDLE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]

    return true;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	3f733333 	.word	0x3f733333

08001b1c <PulseOximeter_Update>:

void PulseOximeter_Update(PulseOximeter *po)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
    MAX30100_Update(&po->hrm);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3358      	adds	r3, #88	@ 0x58
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fd03 	bl	8001534 <MAX30100_Update>
    checkSample(po);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f831 	bl	8001b96 <checkSample>
    checkCurrentBias(po);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f8a9 	bl	8001c8c <checkCurrentBias>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <PulseOximeter_GetHeartRate>:

float PulseOximeter_GetHeartRate(PulseOximeter *po)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
    return BeatDetector_GetRate(&po->beatDetector);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3314      	adds	r3, #20
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fdb6 	bl	80016c0 <BeatDetector_GetRate>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <PulseOximeter_GetSpO2>:

uint8_t PulseOximeter_GetSpO2(PulseOximeter *po)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
    return SpO2Calculator_GetSpO2(&po->spO2calculator);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3344      	adds	r3, #68	@ 0x44
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f9c6 	bl	8001efc <SpO2Calculator_GetSpO2>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <PulseOximeter_SetOnBeatDetectedCallback>:
{
    return po->redLedCurrentIndex;
}

void PulseOximeter_SetOnBeatDetectedCallback(PulseOximeter *po, void (*cb)(void))
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
    po->onBeatDetected = cb;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <checkSample>:
}

// --- Hàm nội bộ ---

static void checkSample(PulseOximeter *po)
{
 8001b96:	b590      	push	{r4, r7, lr}
 8001b98:	b089      	sub	sp, #36	@ 0x24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
    uint16_t rawIRValue, rawRedValue;

    // Lấy tất cả sample có sẵn
    while (MAX30100_GetRawValues(&po->hrm, &rawIRValue, &rawRedValue))
 8001b9e:	e063      	b.n	8001c68 <checkSample+0xd2>
    {
        float irACValue = DCRemover_Step(&po->irDCRemover, (float)rawIRValue);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8001ba6:	8a3b      	ldrh	r3, [r7, #16]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f8ff 	bl	8000dac <__aeabi_ui2f>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7ff ff13 	bl	80019de <DCRemover_Step>
 8001bb8:	61f8      	str	r0, [r7, #28]
        float redACValue = DCRemover_Step(&po->redDCRemover, (float)rawRedValue);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8001bc0:	89fb      	ldrh	r3, [r7, #14]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8f2 	bl	8000dac <__aeabi_ui2f>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f7ff ff06 	bl	80019de <DCRemover_Step>
 8001bd2:	61b8      	str	r0, [r7, #24]

        // Tín hiệu đưa vào beat detector là đảo dấu vì spike âm
        float filteredPulseValue = FilterBuLp1_Step(&po->lpf, -irACValue);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f7ff feba 	bl	800195c <FilterBuLp1_Step>
 8001be8:	6178      	str	r0, [r7, #20]
        bool beatDetected = BeatDetector_AddSample(&po->beatDetector, filteredPulseValue, HAL_GetTick());
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f103 0414 	add.w	r4, r3, #20
 8001bf0:	f001 fd3e 	bl	8003670 <HAL_GetTick>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	6979      	ldr	r1, [r7, #20]
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff fd8c 	bl	8001718 <BeatDetector_AddSample>
 8001c00:	4603      	mov	r3, r0
 8001c02:	74fb      	strb	r3, [r7, #19]

        if (BeatDetector_GetRate(&po->beatDetector) > 0)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3314      	adds	r3, #20
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fd59 	bl	80016c0 <BeatDetector_GetRate>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fadd 	bl	80011d4 <__aeabi_fcmpgt>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00b      	beq.n	8001c38 <checkSample+0xa2>
        {
            po->state = PULSEOXIMETER_STATE_DETECTING;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	701a      	strb	r2, [r3, #0]
            SpO2Calculator_Update(&po->spO2calculator, irACValue, redACValue, beatDetected);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8001c2c:	7cfb      	ldrb	r3, [r7, #19]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	69f9      	ldr	r1, [r7, #28]
 8001c32:	f000 f8c3 	bl	8001dbc <SpO2Calculator_Update>
 8001c36:	e00b      	b.n	8001c50 <checkSample+0xba>
        }
        else if (po->state == PULSEOXIMETER_STATE_DETECTING)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d107      	bne.n	8001c50 <checkSample+0xba>
        {
            po->state = PULSEOXIMETER_STATE_IDLE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
            SpO2Calculator_Reset(&po->spO2calculator);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3344      	adds	r3, #68	@ 0x44
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f89c 	bl	8001d88 <SpO2Calculator_Reset>
        }

        // Nếu cần debug, có thể gửi giá trị qua UART ở đây

        if (beatDetected && po->onBeatDetected)
 8001c50:	7cfb      	ldrb	r3, [r7, #19]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <checkSample+0xd2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <checkSample+0xd2>
        {
            po->onBeatDetected();
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c66:	4798      	blx	r3
    while (MAX30100_GetRawValues(&po->hrm, &rawIRValue, &rawRedValue))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3358      	adds	r3, #88	@ 0x58
 8001c6c:	f107 020e 	add.w	r2, r7, #14
 8001c70:	f107 0110 	add.w	r1, r7, #16
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fc68 	bl	800154a <MAX30100_GetRawValues>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d18f      	bne.n	8001ba0 <checkSample+0xa>
        }
    }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3724      	adds	r7, #36	@ 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd90      	pop	{r4, r7, pc}
	...

08001c8c <checkCurrentBias>:

static void checkCurrentBias(PulseOximeter *po)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    // Điều chỉnh dòng LED đỏ để cân bằng DC giữa IR và RED
    if (HAL_GetTick() - po->tsLastBiasCheck > CURRENT_ADJUSTMENT_PERIOD_MS)
 8001c94:	f001 fcec 	bl	8003670 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ca4:	d969      	bls.n	8001d7a <checkCurrentBias+0xee>
    {
        bool changed = false;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
        if (DCRemover_GetDCW(&po->irDCRemover) - DCRemover_GetDCW(&po->redDCRemover) > 70000 && po->redLedCurrentIndex < MAX30100_LED_CURR_50MA)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3328      	adds	r3, #40	@ 0x28
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff feb9 	bl	8001a26 <DCRemover_GetDCW>
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3330      	adds	r3, #48	@ 0x30
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff feb3 	bl	8001a26 <DCRemover_GetDCW>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7fe ffbf 	bl	8000c48 <__aeabi_fsub>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	492d      	ldr	r1, [pc, #180]	@ (8001d84 <checkCurrentBias+0xf8>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fa80 	bl	80011d4 <__aeabi_fcmpgt>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00f      	beq.n	8001cfa <checkCurrentBias+0x6e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ce0:	2b0e      	cmp	r3, #14
 8001ce2:	d80a      	bhi.n	8001cfa <checkCurrentBias+0x6e>
        {
            ++po->redLedCurrentIndex;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            changed = true;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e026      	b.n	8001d48 <checkCurrentBias+0xbc>
        }
        else if (DCRemover_GetDCW(&po->redDCRemover) - DCRemover_GetDCW(&po->irDCRemover) > 70000 && po->redLedCurrentIndex > 0)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3330      	adds	r3, #48	@ 0x30
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fe91 	bl	8001a26 <DCRemover_GetDCW>
 8001d04:	4604      	mov	r4, r0
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3328      	adds	r3, #40	@ 0x28
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fe8b 	bl	8001a26 <DCRemover_GetDCW>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4619      	mov	r1, r3
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7fe ff97 	bl	8000c48 <__aeabi_fsub>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4919      	ldr	r1, [pc, #100]	@ (8001d84 <checkCurrentBias+0xf8>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fa58 	bl	80011d4 <__aeabi_fcmpgt>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00e      	beq.n	8001d48 <checkCurrentBias+0xbc>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <checkCurrentBias+0xbc>
        {
            --po->redLedCurrentIndex;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            changed = true;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
        }

        if (changed)
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <checkCurrentBias+0xe4>
        {
            MAX30100_SetLedsCurrent(&po->hrm, po->irLedCurrent, (LEDCurrent)po->redLedCurrentIndex);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 1041 	ldrb.w	r1, [r3, #65]	@ 0x41
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d60:	461a      	mov	r2, r3
 8001d62:	f7ff fbcf 	bl	8001504 <MAX30100_SetLedsCurrent>
            po->tsLastCurrentAdjustment = HAL_GetTick();
 8001d66:	f001 fc83 	bl	8003670 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	611a      	str	r2, [r3, #16]
            // Có thể gửi giá trị qua UART nếu cần debug
        }

        po->tsLastBiasCheck = HAL_GetTick();
 8001d70:	f001 fc7e 	bl	8003670 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60da      	str	r2, [r3, #12]
    }
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	4788b800 	.word	0x4788b800

08001d88 <SpO2Calculator_Reset>:
    100, 100, 100, 100, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98,
    98, 97, 97, 97, 97, 97, 97, 96, 96, 96, 96, 96, 96, 95, 95,
    95, 95, 95, 95, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93};

void SpO2Calculator_Reset(SpO2Calculator *calc)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    calc->samplesRecorded = 0;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
    calc->redACValueSqSum = 0;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
    calc->irACValueSqSum = 0;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
    calc->beatsDetectedNum = 0;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	721a      	strb	r2, [r3, #8]
    calc->spO2 = 0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	741a      	strb	r2, [r3, #16]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <SpO2Calculator_Update>:

void SpO2Calculator_Update(SpO2Calculator *calc, float irACValue, float redACValue, bool beatDetected)
{
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	70fb      	strb	r3, [r7, #3]
    calc->irACValueSqSum += irACValue * irACValue;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681c      	ldr	r4, [r3, #0]
 8001dce:	68b9      	ldr	r1, [r7, #8]
 8001dd0:	68b8      	ldr	r0, [r7, #8]
 8001dd2:	f7ff f843 	bl	8000e5c <__aeabi_fmul>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7fe ff36 	bl	8000c4c <__addsf3>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	601a      	str	r2, [r3, #0]
    calc->redACValueSqSum += redACValue * redACValue;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685c      	ldr	r4, [r3, #4]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff f834 	bl	8000e5c <__aeabi_fmul>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4619      	mov	r1, r3
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7fe ff27 	bl	8000c4c <__addsf3>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	605a      	str	r2, [r3, #4]
    calc->samplesRecorded++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	60da      	str	r2, [r3, #12]

    if (beatDetected)
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d065      	beq.n	8001ee2 <SpO2Calculator_Update+0x126>
    {
        calc->beatsDetectedNum++;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	7a1b      	ldrb	r3, [r3, #8]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	721a      	strb	r2, [r3, #8]
        if (calc->beatsDetectedNum == CALCULATE_EVERY_N_BEATS)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	7a1b      	ldrb	r3, [r3, #8]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d15b      	bne.n	8001ee2 <SpO2Calculator_Update+0x126>
        {
            float acSqRatio = 100.0f * logf(calc->redACValueSqSum / calc->samplesRecorded) / logf(calc->irACValueSqSum / calc->samplesRecorded);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	685c      	ldr	r4, [r3, #4]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe ffba 	bl	8000dac <__aeabi_ui2f>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f7ff f8c1 	bl	8000fc4 <__aeabi_fdiv>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f009 fd41 	bl	800b8cc <logf>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4927      	ldr	r1, [pc, #156]	@ (8001eec <SpO2Calculator_Update+0x130>)
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f804 	bl	8000e5c <__aeabi_fmul>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461d      	mov	r5, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681c      	ldr	r4, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe ffa3 	bl	8000dac <__aeabi_ui2f>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff f8aa 	bl	8000fc4 <__aeabi_fdiv>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f009 fd2a 	bl	800b8cc <logf>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	f7ff f8a1 	bl	8000fc4 <__aeabi_fdiv>
 8001e82:	4603      	mov	r3, r0
 8001e84:	613b      	str	r3, [r7, #16]
            uint8_t index = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	75fb      	strb	r3, [r7, #23]

            if (acSqRatio > 66)
 8001e8a:	4919      	ldr	r1, [pc, #100]	@ (8001ef0 <SpO2Calculator_Update+0x134>)
 8001e8c:	6938      	ldr	r0, [r7, #16]
 8001e8e:	f7ff f9a1 	bl	80011d4 <__aeabi_fcmpgt>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <SpO2Calculator_Update+0xec>
            {
                index = (uint8_t)acSqRatio - 66;
 8001e98:	6938      	ldr	r0, [r7, #16]
 8001e9a:	f7ff f9e1 	bl	8001260 <__aeabi_f2uiz>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3b42      	subs	r3, #66	@ 0x42
 8001ea4:	75fb      	strb	r3, [r7, #23]
 8001ea6:	e00d      	b.n	8001ec4 <SpO2Calculator_Update+0x108>
            }
            else if (acSqRatio > 50)
 8001ea8:	4912      	ldr	r1, [pc, #72]	@ (8001ef4 <SpO2Calculator_Update+0x138>)
 8001eaa:	6938      	ldr	r0, [r7, #16]
 8001eac:	f7ff f992 	bl	80011d4 <__aeabi_fcmpgt>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <SpO2Calculator_Update+0x108>
            {
                index = (uint8_t)acSqRatio - 50;
 8001eb6:	6938      	ldr	r0, [r7, #16]
 8001eb8:	f7ff f9d2 	bl	8001260 <__aeabi_f2uiz>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	3b32      	subs	r3, #50	@ 0x32
 8001ec2:	75fb      	strb	r3, [r7, #23]
            }
            // Reset sau mỗi lần tính toán
            SpO2Calculator_Reset(calc);
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff ff5f 	bl	8001d88 <SpO2Calculator_Reset>

            if (index < 43)
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ece:	d805      	bhi.n	8001edc <SpO2Calculator_Update+0x120>
            {
                calc->spO2 = SpO2Calculator_spO2LUT[index];
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	4a09      	ldr	r2, [pc, #36]	@ (8001ef8 <SpO2Calculator_Update+0x13c>)
 8001ed4:	5cd2      	ldrb	r2, [r2, r3]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	741a      	strb	r2, [r3, #16]
            {
                calc->spO2 = SpO2Calculator_spO2LUT[42];
            }
        }
    }
}
 8001eda:	e002      	b.n	8001ee2 <SpO2Calculator_Update+0x126>
                calc->spO2 = SpO2Calculator_spO2LUT[42];
 8001edc:	225d      	movs	r2, #93	@ 0x5d
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	741a      	strb	r2, [r3, #16]
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eea:	bf00      	nop
 8001eec:	42c80000 	.word	0x42c80000
 8001ef0:	42840000 	.word	0x42840000
 8001ef4:	42480000 	.word	0x42480000
 8001ef8:	0800be2c 	.word	0x0800be2c

08001efc <SpO2Calculator_GetSpO2>:

uint8_t SpO2Calculator_GetSpO2(SpO2Calculator *calc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
    return calc->spO2;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7c1b      	ldrb	r3, [r3, #16]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <PMS_Init>:

static uint16_t makeWord(uint8_t high, uint8_t low) {
    return (high << 8) | low;
}

void PMS_Init(PMS_HandleTypeDef *pms, UART_HandleTypeDef *huart) {
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
    pms->huart = huart;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	601a      	str	r2, [r3, #0]
    pms->index = 0;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    pms->status = STATUS_WAITING;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    pms->mode = MODE_ACTIVE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <PMS_WakeUp>:
void PMS_Sleep(PMS_HandleTypeDef *pms) {
    uint8_t cmd[] = { 0x42, 0x4D, 0xE4, 0x00, 0x00, 0x01, 0x73 };
    HAL_UART_Transmit(pms->huart, cmd, sizeof(cmd), 100);
}

void PMS_WakeUp(PMS_HandleTypeDef *pms) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
    uint8_t cmd[] = { 0x42, 0x4D, 0xE4, 0x00, 0x01, 0x01, 0x74 };
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f7c <PMS_WakeUp+0x38>)
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f56:	6018      	str	r0, [r3, #0]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	8019      	strh	r1, [r3, #0]
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	0c0a      	lsrs	r2, r1, #16
 8001f60:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(pms->huart, cmd, sizeof(cmd), 100);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	f107 0108 	add.w	r1, r7, #8
 8001f6a:	2364      	movs	r3, #100	@ 0x64
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	f003 ff12 	bl	8005d96 <HAL_UART_Transmit>
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	0800bb98 	.word	0x0800bb98

08001f80 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001f84:	2201      	movs	r2, #1
 8001f86:	4903      	ldr	r1, [pc, #12]	@ (8001f94 <GPS_Init+0x14>)
 8001f88:	4803      	ldr	r0, [pc, #12]	@ (8001f98 <GPS_Init+0x18>)
 8001f8a:	f003 ff8f 	bl	8005eac <HAL_UART_Receive_IT>
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200001f8 	.word	0x200001f8
 8001f98:	200003cc 	.word	0x200003cc

08001f9c <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <GPS_UART_CallBack+0x60>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b0a      	cmp	r3, #10
 8001fa6:	d010      	beq.n	8001fca <GPS_UART_CallBack+0x2e>
 8001fa8:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <GPS_UART_CallBack+0x64>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <GPS_UART_CallBack+0x64>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	b2d1      	uxtb	r1, r2
 8001fba:	4a11      	ldr	r2, [pc, #68]	@ (8002000 <GPS_UART_CallBack+0x64>)
 8001fbc:	7011      	strb	r1, [r2, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <GPS_UART_CallBack+0x60>)
 8001fc2:	7819      	ldrb	r1, [r3, #0]
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <GPS_UART_CallBack+0x68>)
 8001fc6:	5499      	strb	r1, [r3, r2]
 8001fc8:	e010      	b.n	8001fec <GPS_UART_CallBack+0x50>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 8001fca:	480e      	ldr	r0, [pc, #56]	@ (8002004 <GPS_UART_CallBack+0x68>)
 8001fcc:	f000 f81e 	bl	800200c <GPS_validate>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 8001fd6:	480b      	ldr	r0, [pc, #44]	@ (8002004 <GPS_UART_CallBack+0x68>)
 8001fd8:	f000 f87a 	bl	80020d0 <GPS_parse>
		rx_index = 0;
 8001fdc:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <GPS_UART_CallBack+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001fe2:	2280      	movs	r2, #128	@ 0x80
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4807      	ldr	r0, [pc, #28]	@ (8002004 <GPS_UART_CallBack+0x68>)
 8001fe8:	f005 fcad 	bl	8007946 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001fec:	2201      	movs	r2, #1
 8001fee:	4903      	ldr	r1, [pc, #12]	@ (8001ffc <GPS_UART_CallBack+0x60>)
 8001ff0:	4805      	ldr	r0, [pc, #20]	@ (8002008 <GPS_UART_CallBack+0x6c>)
 8001ff2:	f003 ff5b 	bl	8005eac <HAL_UART_Receive_IT>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200001f8 	.word	0x200001f8
 8002000:	2000027c 	.word	0x2000027c
 8002004:	200001fc 	.word	0x200001fc
 8002008:	200003cc 	.word	0x200003cc

0800200c <GPS_validate>:


int GPS_validate(char *nmeastr){
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b24      	cmp	r3, #36	@ 0x24
 8002026:	d103      	bne.n	8002030 <GPS_validate+0x24>
        i++;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800202e:	e00c      	b.n	800204a <GPS_validate+0x3e>
        return 0;
 8002030:	2300      	movs	r3, #0
 8002032:	e047      	b.n	80020c4 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4053      	eors	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        i++;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <GPS_validate+0x5c>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002060:	d002      	beq.n	8002068 <GPS_validate+0x5c>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b4a      	cmp	r3, #74	@ 0x4a
 8002066:	dde5      	ble.n	8002034 <GPS_validate+0x28>
    }

    if(i >= 75){
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b4a      	cmp	r3, #74	@ 0x4a
 800206c:	dd01      	ble.n	8002072 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800206e:	2300      	movs	r3, #0
 8002070:	e028      	b.n	80020c4 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b2a      	cmp	r3, #42	@ 0x2a
 800207c:	d119      	bne.n	80020b2 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3302      	adds	r3, #2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	490a      	ldr	r1, [pc, #40]	@ (80020cc <GPS_validate+0xc0>)
 80020a2:	4618      	mov	r0, r3
 80020a4:	f005 fbc0 	bl	8007828 <siprintf>
    return((checkcalcstr[0] == check[0])
 80020a8:	7a3a      	ldrb	r2, [r7, #8]
 80020aa:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d108      	bne.n	80020c2 <GPS_validate+0xb6>
 80020b0:	e001      	b.n	80020b6 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80020b2:	2300      	movs	r3, #0
 80020b4:	e006      	b.n	80020c4 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80020b6:	7a7a      	ldrb	r2, [r7, #9]
 80020b8:	7b7b      	ldrb	r3, [r7, #13]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d101      	bne.n	80020c2 <GPS_validate+0xb6>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <GPS_validate+0xb8>
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	0800bbb8 	.word	0x0800bbb8

080020d0 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af08      	add	r7, sp, #32
 80020d6:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 80020d8:	2206      	movs	r2, #6
 80020da:	4946      	ldr	r1, [pc, #280]	@ (80021f4 <GPS_parse+0x124>)
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f005 fc3a 	bl	8007956 <strncmp>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d12f      	bne.n	8002148 <GPS_parse+0x78>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80020e8:	4b43      	ldr	r3, [pc, #268]	@ (80021f8 <GPS_parse+0x128>)
 80020ea:	9307      	str	r3, [sp, #28]
 80020ec:	4b43      	ldr	r3, [pc, #268]	@ (80021fc <GPS_parse+0x12c>)
 80020ee:	9306      	str	r3, [sp, #24]
 80020f0:	4b43      	ldr	r3, [pc, #268]	@ (8002200 <GPS_parse+0x130>)
 80020f2:	9305      	str	r3, [sp, #20]
 80020f4:	4b43      	ldr	r3, [pc, #268]	@ (8002204 <GPS_parse+0x134>)
 80020f6:	9304      	str	r3, [sp, #16]
 80020f8:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <GPS_parse+0x138>)
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	4b43      	ldr	r3, [pc, #268]	@ (800220c <GPS_parse+0x13c>)
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	4b43      	ldr	r3, [pc, #268]	@ (8002210 <GPS_parse+0x140>)
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	4b43      	ldr	r3, [pc, #268]	@ (8002214 <GPS_parse+0x144>)
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	4b43      	ldr	r3, [pc, #268]	@ (8002218 <GPS_parse+0x148>)
 800210a:	4a44      	ldr	r2, [pc, #272]	@ (800221c <GPS_parse+0x14c>)
 800210c:	4944      	ldr	r1, [pc, #272]	@ (8002220 <GPS_parse+0x150>)
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f005 fbaa 	bl	8007868 <siscanf>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	dd68      	ble.n	80021ec <GPS_parse+0x11c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800211a:	4b42      	ldr	r3, [pc, #264]	@ (8002224 <GPS_parse+0x154>)
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	4a41      	ldr	r2, [pc, #260]	@ (8002224 <GPS_parse+0x154>)
 8002120:	7e12      	ldrb	r2, [r2, #24]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f8a1 	bl	800226c <GPS_nmea_to_dec>
 800212a:	4603      	mov	r3, r0
 800212c:	4a3d      	ldr	r2, [pc, #244]	@ (8002224 <GPS_parse+0x154>)
 800212e:	6053      	str	r3, [r2, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8002130:	4b3c      	ldr	r3, [pc, #240]	@ (8002224 <GPS_parse+0x154>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a3b      	ldr	r2, [pc, #236]	@ (8002224 <GPS_parse+0x154>)
 8002136:	7e52      	ldrb	r2, [r2, #25]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f896 	bl	800226c <GPS_nmea_to_dec>
 8002140:	4603      	mov	r3, r0
 8002142:	4a38      	ldr	r2, [pc, #224]	@ (8002224 <GPS_parse+0x154>)
 8002144:	6013      	str	r3, [r2, #0]
    		return;
 8002146:	e051      	b.n	80021ec <GPS_parse+0x11c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8002148:	2206      	movs	r2, #6
 800214a:	4937      	ldr	r1, [pc, #220]	@ (8002228 <GPS_parse+0x158>)
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f005 fc02 	bl	8007956 <strncmp>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d114      	bne.n	8002182 <GPS_parse+0xb2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8002158:	4b34      	ldr	r3, [pc, #208]	@ (800222c <GPS_parse+0x15c>)
 800215a:	9305      	str	r3, [sp, #20]
 800215c:	4b34      	ldr	r3, [pc, #208]	@ (8002230 <GPS_parse+0x160>)
 800215e:	9304      	str	r3, [sp, #16]
 8002160:	4b34      	ldr	r3, [pc, #208]	@ (8002234 <GPS_parse+0x164>)
 8002162:	9303      	str	r3, [sp, #12]
 8002164:	4b29      	ldr	r3, [pc, #164]	@ (800220c <GPS_parse+0x13c>)
 8002166:	9302      	str	r3, [sp, #8]
 8002168:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <GPS_parse+0x140>)
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	4b29      	ldr	r3, [pc, #164]	@ (8002214 <GPS_parse+0x144>)
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <GPS_parse+0x148>)
 8002172:	4a2a      	ldr	r2, [pc, #168]	@ (800221c <GPS_parse+0x14c>)
 8002174:	4930      	ldr	r1, [pc, #192]	@ (8002238 <GPS_parse+0x168>)
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f005 fb76 	bl	8007868 <siscanf>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	e034      	b.n	80021ec <GPS_parse+0x11c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8002182:	2206      	movs	r2, #6
 8002184:	492d      	ldr	r1, [pc, #180]	@ (800223c <GPS_parse+0x16c>)
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f005 fbe5 	bl	8007956 <strncmp>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d110      	bne.n	80021b4 <GPS_parse+0xe4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8002192:	4b2b      	ldr	r3, [pc, #172]	@ (8002240 <GPS_parse+0x170>)
 8002194:	9303      	str	r3, [sp, #12]
 8002196:	4b21      	ldr	r3, [pc, #132]	@ (800221c <GPS_parse+0x14c>)
 8002198:	9302      	str	r3, [sp, #8]
 800219a:	4b1c      	ldr	r3, [pc, #112]	@ (800220c <GPS_parse+0x13c>)
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	4b1c      	ldr	r3, [pc, #112]	@ (8002210 <GPS_parse+0x140>)
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002214 <GPS_parse+0x144>)
 80021a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002218 <GPS_parse+0x148>)
 80021a6:	4927      	ldr	r1, [pc, #156]	@ (8002244 <GPS_parse+0x174>)
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f005 fb5d 	bl	8007868 <siscanf>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	e01b      	b.n	80021ec <GPS_parse+0x11c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 80021b4:	2206      	movs	r2, #6
 80021b6:	4924      	ldr	r1, [pc, #144]	@ (8002248 <GPS_parse+0x178>)
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f005 fbcc 	bl	8007956 <strncmp>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d113      	bne.n	80021ec <GPS_parse+0x11c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80021c4:	4b21      	ldr	r3, [pc, #132]	@ (800224c <GPS_parse+0x17c>)
 80021c6:	9305      	str	r3, [sp, #20]
 80021c8:	4b21      	ldr	r3, [pc, #132]	@ (8002250 <GPS_parse+0x180>)
 80021ca:	9304      	str	r3, [sp, #16]
 80021cc:	4b21      	ldr	r3, [pc, #132]	@ (8002254 <GPS_parse+0x184>)
 80021ce:	9303      	str	r3, [sp, #12]
 80021d0:	4b18      	ldr	r3, [pc, #96]	@ (8002234 <GPS_parse+0x164>)
 80021d2:	9302      	str	r3, [sp, #8]
 80021d4:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <GPS_parse+0x188>)
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	4b20      	ldr	r3, [pc, #128]	@ (800225c <GPS_parse+0x18c>)
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <GPS_parse+0x190>)
 80021de:	4a21      	ldr	r2, [pc, #132]	@ (8002264 <GPS_parse+0x194>)
 80021e0:	4921      	ldr	r1, [pc, #132]	@ (8002268 <GPS_parse+0x198>)
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f005 fb40 	bl	8007868 <siscanf>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
            return;
    }
}
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	0800bbc0 	.word	0x0800bbc0
 80021f8:	200002ac 	.word	0x200002ac
 80021fc:	200002a8 	.word	0x200002a8
 8002200:	200002a4 	.word	0x200002a4
 8002204:	200002a0 	.word	0x200002a0
 8002208:	2000029c 	.word	0x2000029c
 800220c:	20000299 	.word	0x20000299
 8002210:	2000028c 	.word	0x2000028c
 8002214:	20000298 	.word	0x20000298
 8002218:	20000290 	.word	0x20000290
 800221c:	20000294 	.word	0x20000294
 8002220:	0800bbc8 	.word	0x0800bbc8
 8002224:	20000280 	.word	0x20000280
 8002228:	0800bbf0 	.word	0x0800bbf0
 800222c:	200002b8 	.word	0x200002b8
 8002230:	200002b4 	.word	0x200002b4
 8002234:	200002b0 	.word	0x200002b0
 8002238:	0800bbf8 	.word	0x0800bbf8
 800223c:	0800bc18 	.word	0x0800bc18
 8002240:	200002bc 	.word	0x200002bc
 8002244:	0800bc20 	.word	0x0800bc20
 8002248:	0800bc3c 	.word	0x0800bc3c
 800224c:	200002d4 	.word	0x200002d4
 8002250:	200002d0 	.word	0x200002d0
 8002254:	200002cd 	.word	0x200002cd
 8002258:	200002cc 	.word	0x200002cc
 800225c:	200002c8 	.word	0x200002c8
 8002260:	200002c4 	.word	0x200002c4
 8002264:	200002c0 	.word	0x200002c0
 8002268:	0800bc44 	.word	0x0800bc44

0800226c <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8002278:	491b      	ldr	r1, [pc, #108]	@ (80022e8 <GPS_nmea_to_dec+0x7c>)
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fea2 	bl	8000fc4 <__aeabi_fdiv>
 8002280:	4603      	mov	r3, r0
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe ffc6 	bl	8001214 <__aeabi_f2iz>
 8002288:	4603      	mov	r3, r0
 800228a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2264      	movs	r2, #100	@ 0x64
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fd8d 	bl	8000db4 <__aeabi_i2f>
 800229a:	4603      	mov	r3, r0
 800229c:	4619      	mov	r1, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fcd2 	bl	8000c48 <__aeabi_fsub>
 80022a4:	4603      	mov	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]
    float dec_deg = minutes / 60;
 80022a8:	4910      	ldr	r1, [pc, #64]	@ (80022ec <GPS_nmea_to_dec+0x80>)
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7fe fe8a 	bl	8000fc4 <__aeabi_fdiv>
 80022b0:	4603      	mov	r3, r0
 80022b2:	60bb      	str	r3, [r7, #8]
    float decimal = degree + dec_deg;
 80022b4:	6938      	ldr	r0, [r7, #16]
 80022b6:	f7fe fd7d 	bl	8000db4 <__aeabi_i2f>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4619      	mov	r1, r3
 80022be:	68b8      	ldr	r0, [r7, #8]
 80022c0:	f7fe fcc4 	bl	8000c4c <__addsf3>
 80022c4:	4603      	mov	r3, r0
 80022c6:	617b      	str	r3, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	2b53      	cmp	r3, #83	@ 0x53
 80022cc:	d002      	beq.n	80022d4 <GPS_nmea_to_dec+0x68>
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	2b57      	cmp	r3, #87	@ 0x57
 80022d2:	d103      	bne.n	80022dc <GPS_nmea_to_dec+0x70>
        decimal *= -1;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80022da:	617b      	str	r3, [r7, #20]
    }
    return decimal;
 80022dc:	697b      	ldr	r3, [r7, #20]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	42c80000 	.word	0x42c80000
 80022ec:	42700000 	.word	0x42700000

080022f0 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f1xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2140      	movs	r1, #64	@ 0x40
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <ILI9341_Select+0x14>)
 80022fa:	f001 fdcb 	bl	8003e94 <HAL_GPIO_WritePin>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40010c00 	.word	0x40010c00

08002308 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 800230c:	2201      	movs	r2, #1
 800230e:	2140      	movs	r1, #64	@ 0x40
 8002310:	4802      	ldr	r0, [pc, #8]	@ (800231c <ILI9341_Unselect+0x14>)
 8002312:	f001 fdbf 	bl	8003e94 <HAL_GPIO_WritePin>
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40010c00 	.word	0x40010c00

08002320 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	2108      	movs	r1, #8
 8002328:	4806      	ldr	r0, [pc, #24]	@ (8002344 <ILI9341_Reset+0x24>)
 800232a:	f001 fdb3 	bl	8003e94 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800232e:	2032      	movs	r0, #50	@ 0x32
 8002330:	f001 f9a8 	bl	8003684 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8002334:	2201      	movs	r2, #1
 8002336:	2108      	movs	r1, #8
 8002338:	4802      	ldr	r0, [pc, #8]	@ (8002344 <ILI9341_Reset+0x24>)
 800233a:	f001 fdab 	bl	8003e94 <HAL_GPIO_WritePin>
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40010800 	.word	0x40010800

08002348 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	2104      	movs	r1, #4
 8002356:	4807      	ldr	r0, [pc, #28]	@ (8002374 <ILI9341_WriteCommand+0x2c>)
 8002358:	f001 fd9c 	bl	8003e94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800235c:	1df9      	adds	r1, r7, #7
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	2201      	movs	r2, #1
 8002364:	4804      	ldr	r0, [pc, #16]	@ (8002378 <ILI9341_WriteCommand+0x30>)
 8002366:	f003 fac9 	bl	80058fc <HAL_SPI_Transmit>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40010800 	.word	0x40010800
 8002378:	2000032c 	.word	0x2000032c

0800237c <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002386:	2201      	movs	r2, #1
 8002388:	2104      	movs	r1, #4
 800238a:	4811      	ldr	r0, [pc, #68]	@ (80023d0 <ILI9341_WriteData+0x54>)
 800238c:	f001 fd82 	bl	8003e94 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8002390:	e015      	b.n	80023be <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002398:	bf28      	it	cs
 800239a:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 800239e:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80023a0:	89fa      	ldrh	r2, [r7, #14]
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	480a      	ldr	r0, [pc, #40]	@ (80023d4 <ILI9341_WriteData+0x58>)
 80023aa:	f003 faa7 	bl	80058fc <HAL_SPI_Transmit>
        buff += chunk_size;
 80023ae:	89fb      	ldrh	r3, [r7, #14]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80023b6:	89fb      	ldrh	r3, [r7, #14]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e6      	bne.n	8002392 <ILI9341_WriteData+0x16>
    }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40010800 	.word	0x40010800
 80023d4:	2000032c 	.word	0x2000032c

080023d8 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4604      	mov	r4, r0
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4623      	mov	r3, r4
 80023e8:	80fb      	strh	r3, [r7, #6]
 80023ea:	4603      	mov	r3, r0
 80023ec:	80bb      	strh	r3, [r7, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	807b      	strh	r3, [r7, #2]
 80023f2:	4613      	mov	r3, r2
 80023f4:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80023f6:	202a      	movs	r0, #42	@ 0x2a
 80023f8:	f7ff ffa6 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	b29b      	uxth	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	733b      	strb	r3, [r7, #12]
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	737b      	strb	r3, [r7, #13]
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	b29b      	uxth	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	73bb      	strb	r3, [r7, #14]
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	2104      	movs	r1, #4
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ffaa 	bl	800237c <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8002428:	202b      	movs	r0, #43	@ 0x2b
 800242a:	f7ff ff8d 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800242e:	88bb      	ldrh	r3, [r7, #4]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	b29b      	uxth	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	723b      	strb	r3, [r7, #8]
 8002438:	88bb      	ldrh	r3, [r7, #4]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	727b      	strb	r3, [r7, #9]
 800243e:	883b      	ldrh	r3, [r7, #0]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	b29b      	uxth	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	72bb      	strb	r3, [r7, #10]
 8002448:	883b      	ldrh	r3, [r7, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800244e:	f107 0308 	add.w	r3, r7, #8
 8002452:	2104      	movs	r1, #4
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff91 	bl	800237c <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800245a:	202c      	movs	r0, #44	@ 0x2c
 800245c:	f7ff ff74 	bl	8002348 <ILI9341_WriteCommand>
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}

08002468 <ILI9341_Init>:

void ILI9341_Init() {
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b09b      	sub	sp, #108	@ 0x6c
 800246c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800246e:	f7ff ff3f 	bl	80022f0 <ILI9341_Select>
    ILI9341_Reset();
 8002472:	f7ff ff55 	bl	8002320 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff ff66 	bl	8002348 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 800247c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002480:	f001 f900 	bl	8003684 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8002484:	20cb      	movs	r0, #203	@ 0xcb
 8002486:	f7ff ff5f 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800248a:	4a87      	ldr	r2, [pc, #540]	@ (80026a8 <ILI9341_Init+0x240>)
 800248c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002490:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002494:	6018      	str	r0, [r3, #0]
 8002496:	3304      	adds	r3, #4
 8002498:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800249a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800249e:	2105      	movs	r1, #5
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff6b 	bl	800237c <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80024a6:	20cf      	movs	r0, #207	@ 0xcf
 80024a8:	f7ff ff4e 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80024ac:	4a7f      	ldr	r2, [pc, #508]	@ (80026ac <ILI9341_Init+0x244>)
 80024ae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	4611      	mov	r1, r2
 80024b6:	8019      	strh	r1, [r3, #0]
 80024b8:	3302      	adds	r3, #2
 80024ba:	0c12      	lsrs	r2, r2, #16
 80024bc:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80024be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024c2:	2103      	movs	r1, #3
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff59 	bl	800237c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80024ca:	20e8      	movs	r0, #232	@ 0xe8
 80024cc:	f7ff ff3c 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80024d0:	4a77      	ldr	r2, [pc, #476]	@ (80026b0 <ILI9341_Init+0x248>)
 80024d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	4611      	mov	r1, r2
 80024da:	8019      	strh	r1, [r3, #0]
 80024dc:	3302      	adds	r3, #2
 80024de:	0c12      	lsrs	r2, r2, #16
 80024e0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80024e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80024e6:	2103      	movs	r1, #3
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff47 	bl	800237c <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80024ee:	20ea      	movs	r0, #234	@ 0xea
 80024f0:	f7ff ff2a 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 80024fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024fe:	2102      	movs	r1, #2
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff3b 	bl	800237c <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8002506:	20ed      	movs	r0, #237	@ 0xed
 8002508:	f7ff ff1e 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 800250c:	4b69      	ldr	r3, [pc, #420]	@ (80026b4 <ILI9341_Init+0x24c>)
 800250e:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8002510:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002514:	2104      	movs	r1, #4
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff30 	bl	800237c <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 800251c:	20f7      	movs	r0, #247	@ 0xf7
 800251e:	f7ff ff13 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8002522:	2320      	movs	r3, #32
 8002524:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8002528:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff24 	bl	800237c <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8002534:	20c0      	movs	r0, #192	@ 0xc0
 8002536:	f7ff ff07 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800253a:	2323      	movs	r3, #35	@ 0x23
 800253c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8002540:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002544:	2101      	movs	r1, #1
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff18 	bl	800237c <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800254c:	20c1      	movs	r0, #193	@ 0xc1
 800254e:	f7ff fefb 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8002552:	2310      	movs	r3, #16
 8002554:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002558:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800255c:	2101      	movs	r1, #1
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff0c 	bl	800237c <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8002564:	20c5      	movs	r0, #197	@ 0xc5
 8002566:	f7ff feef 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800256a:	f642 033e 	movw	r3, #10302	@ 0x283e
 800256e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8002572:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002576:	2102      	movs	r1, #2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff feff 	bl	800237c <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800257e:	20c7      	movs	r0, #199	@ 0xc7
 8002580:	f7ff fee2 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8002584:	2386      	movs	r3, #134	@ 0x86
 8002586:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800258a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800258e:	2101      	movs	r1, #1
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fef3 	bl	800237c <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8002596:	2036      	movs	r0, #54	@ 0x36
 8002598:	f7ff fed6 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 800259c:	2348      	movs	r3, #72	@ 0x48
 800259e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 80025a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025a6:	2101      	movs	r1, #1
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fee7 	bl	800237c <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80025ae:	203a      	movs	r0, #58	@ 0x3a
 80025b0:	f7ff feca 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80025b4:	2355      	movs	r3, #85	@ 0x55
 80025b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 80025ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025be:	2101      	movs	r1, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fedb 	bl	800237c <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80025c6:	20b1      	movs	r0, #177	@ 0xb1
 80025c8:	f7ff febe 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80025cc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80025d0:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 80025d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025d6:	2102      	movs	r1, #2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fecf 	bl	800237c <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80025de:	20b6      	movs	r0, #182	@ 0xb6
 80025e0:	f7ff feb2 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80025e4:	4a34      	ldr	r2, [pc, #208]	@ (80026b8 <ILI9341_Init+0x250>)
 80025e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	4611      	mov	r1, r2
 80025ee:	8019      	strh	r1, [r3, #0]
 80025f0:	3302      	adds	r3, #2
 80025f2:	0c12      	lsrs	r2, r2, #16
 80025f4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80025f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025fa:	2103      	movs	r1, #3
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff febd 	bl	800237c <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8002602:	20f2      	movs	r0, #242	@ 0xf2
 8002604:	f7ff fea0 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 800260e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002612:	2101      	movs	r1, #1
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff feb1 	bl	800237c <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800261a:	2026      	movs	r0, #38	@ 0x26
 800261c:	f7ff fe94 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8002620:	2301      	movs	r3, #1
 8002622:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8002626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800262a:	2101      	movs	r1, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fea5 	bl	800237c <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8002632:	20e0      	movs	r0, #224	@ 0xe0
 8002634:	f7ff fe88 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002638:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <ILI9341_Init+0x254>)
 800263a:	f107 0414 	add.w	r4, r7, #20
 800263e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002640:	c407      	stmia	r4!, {r0, r1, r2}
 8002642:	8023      	strh	r3, [r4, #0]
 8002644:	3402      	adds	r4, #2
 8002646:	0c1b      	lsrs	r3, r3, #16
 8002648:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	210f      	movs	r1, #15
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fe93 	bl	800237c <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8002656:	20e1      	movs	r0, #225	@ 0xe1
 8002658:	f7ff fe76 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800265c:	4b18      	ldr	r3, [pc, #96]	@ (80026c0 <ILI9341_Init+0x258>)
 800265e:	1d3c      	adds	r4, r7, #4
 8002660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002662:	c407      	stmia	r4!, {r0, r1, r2}
 8002664:	8023      	strh	r3, [r4, #0]
 8002666:	3402      	adds	r4, #2
 8002668:	0c1b      	lsrs	r3, r3, #16
 800266a:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	210f      	movs	r1, #15
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fe83 	bl	800237c <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8002676:	2011      	movs	r0, #17
 8002678:	f7ff fe66 	bl	8002348 <ILI9341_WriteCommand>
    HAL_Delay(120);
 800267c:	2078      	movs	r0, #120	@ 0x78
 800267e:	f001 f801 	bl	8003684 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8002682:	2029      	movs	r0, #41	@ 0x29
 8002684:	f7ff fe60 	bl	8002348 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8002688:	2036      	movs	r0, #54	@ 0x36
 800268a:	f7ff fe5d 	bl	8002348 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800268e:	2348      	movs	r3, #72	@ 0x48
 8002690:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002692:	463b      	mov	r3, r7
 8002694:	2101      	movs	r1, #1
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fe70 	bl	800237c <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 800269c:	f7ff fe34 	bl	8002308 <ILI9341_Unselect>
}
 80026a0:	bf00      	nop
 80026a2:	376c      	adds	r7, #108	@ 0x6c
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	0800bc64 	.word	0x0800bc64
 80026ac:	0800bc6c 	.word	0x0800bc6c
 80026b0:	0800bc70 	.word	0x0800bc70
 80026b4:	81120364 	.word	0x81120364
 80026b8:	0800bc74 	.word	0x0800bc74
 80026bc:	0800bc78 	.word	0x0800bc78
 80026c0:	0800bc88 	.word	0x0800bc88

080026c4 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80026c4:	b082      	sub	sp, #8
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b088      	sub	sp, #32
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
 80026d2:	460b      	mov	r3, r1
 80026d4:	80bb      	strh	r3, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80026da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80026de:	461a      	mov	r2, r3
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	4413      	add	r3, r2
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80026ee:	4619      	mov	r1, r3
 80026f0:	88bb      	ldrh	r3, [r7, #4]
 80026f2:	440b      	add	r3, r1
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	88b9      	ldrh	r1, [r7, #4]
 80026fc:	88f8      	ldrh	r0, [r7, #6]
 80026fe:	f7ff fe6b 	bl	80023d8 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e041      	b.n	800278c <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8002708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	3b20      	subs	r3, #32
 800270e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4619      	mov	r1, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	440b      	add	r3, r1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e027      	b.n	800277a <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00e      	beq.n	8002758 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800273a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	b29b      	uxth	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	743b      	strb	r3, [r7, #16]
 8002744:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002746:	b2db      	uxtb	r3, r3
 8002748:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 800274a:	f107 0310 	add.w	r3, r7, #16
 800274e:	2102      	movs	r1, #2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fe13 	bl	800237c <ILI9341_WriteData>
 8002756:	e00d      	b.n	8002774 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002758:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	b29b      	uxth	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	733b      	strb	r3, [r7, #12]
 8002762:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002764:	b2db      	uxtb	r3, r3
 8002766:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	2102      	movs	r1, #2
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fe04 	bl	800237c <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	3301      	adds	r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800277e:	461a      	mov	r2, r3
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	4293      	cmp	r3, r2
 8002784:	d3d1      	bcc.n	800272a <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3301      	adds	r3, #1
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002790:	461a      	mov	r2, r3
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4293      	cmp	r3, r2
 8002796:	d3b7      	bcc.n	8002708 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027a4:	b002      	add	sp, #8
 80027a6:	4770      	bx	lr

080027a8 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80027a8:	b082      	sub	sp, #8
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af04      	add	r7, sp, #16
 80027b0:	603a      	str	r2, [r7, #0]
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	4603      	mov	r3, r0
 80027b6:	80fb      	strh	r3, [r7, #6]
 80027b8:	460b      	mov	r3, r1
 80027ba:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80027bc:	f7ff fd98 	bl	80022f0 <ILI9341_Select>

    while(*str) {
 80027c0:	e02e      	b.n	8002820 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	7d3a      	ldrb	r2, [r7, #20]
 80027c6:	4413      	add	r3, r2
 80027c8:	2bef      	cmp	r3, #239	@ 0xef
 80027ca:	dd14      	ble.n	80027f6 <ILI9341_WriteString+0x4e>
            x = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80027d0:	7d7b      	ldrb	r3, [r7, #21]
 80027d2:	461a      	mov	r2, r3
 80027d4:	88bb      	ldrh	r3, [r7, #4]
 80027d6:	4413      	add	r3, r2
 80027d8:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80027da:	88bb      	ldrh	r3, [r7, #4]
 80027dc:	7d7a      	ldrb	r2, [r7, #21]
 80027de:	4413      	add	r3, r2
 80027e0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80027e4:	da21      	bge.n	800282a <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	d103      	bne.n	80027f6 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	603b      	str	r3, [r7, #0]
                continue;
 80027f4:	e014      	b.n	8002820 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	88b9      	ldrh	r1, [r7, #4]
 80027fc:	88f8      	ldrh	r0, [r7, #6]
 80027fe:	8c3b      	ldrh	r3, [r7, #32]
 8002800:	9302      	str	r3, [sp, #8]
 8002802:	8bbb      	ldrh	r3, [r7, #28]
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f7ff ff5a 	bl	80026c4 <ILI9341_WriteChar>
        x += font.width;
 8002810:	7d3b      	ldrb	r3, [r7, #20]
 8002812:	461a      	mov	r2, r3
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	4413      	add	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
        str++;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1cc      	bne.n	80027c2 <ILI9341_WriteString+0x1a>
 8002828:	e000      	b.n	800282c <ILI9341_WriteString+0x84>
                break;
 800282a:	bf00      	nop
    }

    ILI9341_Unselect();
 800282c:	f7ff fd6c 	bl	8002308 <ILI9341_Unselect>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800283a:	b002      	add	sp, #8
 800283c:	4770      	bx	lr
	...

08002840 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	4604      	mov	r4, r0
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4623      	mov	r3, r4
 8002850:	80fb      	strh	r3, [r7, #6]
 8002852:	4603      	mov	r3, r0
 8002854:	80bb      	strh	r3, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	807b      	strh	r3, [r7, #2]
 800285a:	4613      	mov	r3, r2
 800285c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	2bef      	cmp	r3, #239	@ 0xef
 8002862:	d853      	bhi.n	800290c <ILI9341_FillRectangle+0xcc>
 8002864:	88bb      	ldrh	r3, [r7, #4]
 8002866:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800286a:	d24f      	bcs.n	800290c <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 800286c:	88fa      	ldrh	r2, [r7, #6]
 800286e:	887b      	ldrh	r3, [r7, #2]
 8002870:	4413      	add	r3, r2
 8002872:	2bf0      	cmp	r3, #240	@ 0xf0
 8002874:	dd03      	ble.n	800287e <ILI9341_FillRectangle+0x3e>
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800287c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 800287e:	88ba      	ldrh	r2, [r7, #4]
 8002880:	883b      	ldrh	r3, [r7, #0]
 8002882:	4413      	add	r3, r2
 8002884:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002888:	dd03      	ble.n	8002892 <ILI9341_FillRectangle+0x52>
 800288a:	88bb      	ldrh	r3, [r7, #4]
 800288c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002890:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8002892:	f7ff fd2d 	bl	80022f0 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	887b      	ldrh	r3, [r7, #2]
 800289a:	4413      	add	r3, r2
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29c      	uxth	r4, r3
 80028a2:	88ba      	ldrh	r2, [r7, #4]
 80028a4:	883b      	ldrh	r3, [r7, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	88b9      	ldrh	r1, [r7, #4]
 80028b0:	88f8      	ldrh	r0, [r7, #6]
 80028b2:	4622      	mov	r2, r4
 80028b4:	f7ff fd90 	bl	80023d8 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80028b8:	8c3b      	ldrh	r3, [r7, #32]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	733b      	strb	r3, [r7, #12]
 80028c2:	8c3b      	ldrh	r3, [r7, #32]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80028c8:	2201      	movs	r2, #1
 80028ca:	2104      	movs	r1, #4
 80028cc:	4811      	ldr	r0, [pc, #68]	@ (8002914 <ILI9341_FillRectangle+0xd4>)
 80028ce:	f001 fae1 	bl	8003e94 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80028d2:	883b      	ldrh	r3, [r7, #0]
 80028d4:	80bb      	strh	r3, [r7, #4]
 80028d6:	e013      	b.n	8002900 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 80028d8:	887b      	ldrh	r3, [r7, #2]
 80028da:	80fb      	strh	r3, [r7, #6]
 80028dc:	e00a      	b.n	80028f4 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80028de:	f107 010c 	add.w	r1, r7, #12
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	2202      	movs	r2, #2
 80028e8:	480b      	ldr	r0, [pc, #44]	@ (8002918 <ILI9341_FillRectangle+0xd8>)
 80028ea:	f003 f807 	bl	80058fc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	80fb      	strh	r3, [r7, #6]
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f1      	bne.n	80028de <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 80028fa:	88bb      	ldrh	r3, [r7, #4]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	80bb      	strh	r3, [r7, #4]
 8002900:	88bb      	ldrh	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e8      	bne.n	80028d8 <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 8002906:	f7ff fcff 	bl	8002308 <ILI9341_Unselect>
 800290a:	e000      	b.n	800290e <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800290c:	bf00      	nop
}
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	40010800 	.word	0x40010800
 8002918:	2000032c 	.word	0x2000032c

0800291c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af02      	add	r7, sp, #8
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800292e:	22f0      	movs	r2, #240	@ 0xf0
 8002930:	2100      	movs	r1, #0
 8002932:	2000      	movs	r0, #0
 8002934:	f7ff ff84 	bl	8002840 <ILI9341_FillRectangle>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <onBeatDetected>:
void ReadDataSensorNew ();
void Max30100 ();
void TestGPS ();
void TestDHT22();
void TestUart1 ();
void onBeatDetected(void) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af04      	add	r7, sp, #16
    // Xử lý khi phát hiện nhịp tim (bật LED, gửi UART, ...)
	ILI9341_WriteString(0, 0, "Beat!" , Font_7x10, ILI9341_CYAN, ILI9341_BLACK);
 8002946:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <onBeatDetected+0x28>)
 8002948:	2200      	movs	r2, #0
 800294a:	9202      	str	r2, [sp, #8]
 800294c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002950:	9201      	str	r2, [sp, #4]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	9200      	str	r2, [sp, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a04      	ldr	r2, [pc, #16]	@ (800296c <onBeatDetected+0x2c>)
 800295a:	2100      	movs	r1, #0
 800295c:	2000      	movs	r0, #0
 800295e:	f7ff ff23 	bl	80027a8 <ILI9341_WriteString>

}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000000 	.word	0x20000000
 800296c:	0800bc98 	.word	0x0800bc98

08002970 <HAL_UART_RxCpltCallback>:
PMS_DATA dataPM;

PulseOximeter pox;
uint32_t tsLastReport = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) GPS_UART_CallBack();
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a04      	ldr	r2, [pc, #16]	@ (800298c <HAL_UART_RxCpltCallback+0x1c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_UART_RxCpltCallback+0x14>
 8002980:	f7ff fb0c 	bl	8001f9c <GPS_UART_CallBack>
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	200003cc 	.word	0x200003cc

08002990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08e      	sub	sp, #56	@ 0x38
 8002994:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002996:	f000 fe13 	bl	80035c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800299a:	f000 f927 	bl	8002bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800299e:	f000 fa4d 	bl	8002e3c <MX_GPIO_Init>
  MX_SPI1_Init();
 80029a2:	f000 f997 	bl	8002cd4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80029a6:	f000 f9f5 	bl	8002d94 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80029aa:	f000 f9c9 	bl	8002d40 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80029ae:	f000 fa1b 	bl	8002de8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80029b2:	f000 f961 	bl	8002c78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 80029b6:	f7ff fd57 	bl	8002468 <ILI9341_Init>
  ILI9341_FillScreen(ILI9341_BLACK);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7ff ffae 	bl	800291c <ILI9341_FillScreen>
//  MAX30100_SetSpO2SampleRate(MAX30100_SPO2SR_DEFAULT);
//  MAX30100_SetLEDPulseWidth(MAX30100_LEDPW_DEFAULT);
//  MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_DEFAULT, MAX30100_LEDCURRENT_DEFAULT);
//  MAX30100_SetMode(MAX30100_SPO2_MODE);

  GPS_Init();
 80029c0:	f7ff fade 	bl	8001f80 <GPS_Init>
  PMS_Init(&pms, &huart3);
 80029c4:	497b      	ldr	r1, [pc, #492]	@ (8002bb4 <main+0x224>)
 80029c6:	487c      	ldr	r0, [pc, #496]	@ (8002bb8 <main+0x228>)
 80029c8:	f7ff faa3 	bl	8001f12 <PMS_Init>
  PMS_WakeUp(&pms);
 80029cc:	487a      	ldr	r0, [pc, #488]	@ (8002bb8 <main+0x228>)
 80029ce:	f7ff fab9 	bl	8001f44 <PMS_WakeUp>
  HAL_Delay(1000); // �?ợi cảm biến ổn định
 80029d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029d6:	f000 fe55 	bl	8003684 <HAL_Delay>

  PulseOximeter_Init(&pox);
 80029da:	4878      	ldr	r0, [pc, #480]	@ (8002bbc <main+0x22c>)
 80029dc:	f7ff f82e 	bl	8001a3c <PulseOximeter_Init>
  PulseOximeter_SetOnBeatDetectedCallback(&pox, onBeatDetected);
 80029e0:	4977      	ldr	r1, [pc, #476]	@ (8002bc0 <main+0x230>)
 80029e2:	4876      	ldr	r0, [pc, #472]	@ (8002bbc <main+0x22c>)
 80029e4:	f7ff f8c9 	bl	8001b7a <PulseOximeter_SetOnBeatDetectedCallback>

  if (!PulseOximeter_Begin(&pox, PULSEOXIMETER_DEBUGGINGMODE_NONE)) {
 80029e8:	2100      	movs	r1, #0
 80029ea:	4874      	ldr	r0, [pc, #464]	@ (8002bbc <main+0x22c>)
 80029ec:	f7ff f84e 	bl	8001a8c <PulseOximeter_Begin>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f083 0301 	eor.w	r3, r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00f      	beq.n	8002a1c <main+0x8c>
	  ILI9341_WriteString(0, 0, "Initializing!!" , Font_7x10, ILI9341_CYAN, ILI9341_BLACK);
 80029fc:	4b71      	ldr	r3, [pc, #452]	@ (8002bc4 <main+0x234>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	9202      	str	r2, [sp, #8]
 8002a02:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002a06:	9201      	str	r2, [sp, #4]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	9200      	str	r2, [sp, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc8 <main+0x238>)
 8002a10:	2100      	movs	r1, #0
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7ff fec8 	bl	80027a8 <ILI9341_WriteString>
      while (1); // Lỗi khởi tạo, dừng lại
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <main+0x88>
  } else {
	  ILI9341_WriteString(0, 0, "Init Successfull !!" , Font_7x10, ILI9341_CYAN, ILI9341_BLACK);
 8002a1c:	4b69      	ldr	r3, [pc, #420]	@ (8002bc4 <main+0x234>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	9202      	str	r2, [sp, #8]
 8002a22:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002a26:	9201      	str	r2, [sp, #4]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	9200      	str	r2, [sp, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a67      	ldr	r2, [pc, #412]	@ (8002bcc <main+0x23c>)
 8002a30:	2100      	movs	r1, #0
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7ff feb8 	bl	80027a8 <ILI9341_WriteString>
	  HAL_Delay(2000);
 8002a38:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a3c:	f000 fe22 	bl	8003684 <HAL_Delay>
  }
  // Sau khi PulseOximeter_Begin(&pox, ...);
  // Sau khi PulseOximeter_Begin(&pox, ...);
  uint8_t spo2cfg = MAX30100_ReadRegister(MAX30100_REG_SPO2_CONFIGURATION);
 8002a40:	2007      	movs	r0, #7
 8002a42:	f7fe fdc3 	bl	80015cc <MAX30100_ReadRegister>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  spo2cfg |= (1 << 6); // Bật EN_SPO2
 8002a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  MAX30100_WriteRegister(MAX30100_REG_SPO2_CONFIGURATION, spo2cfg);
 8002a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	2007      	movs	r0, #7
 8002a60:	f7fe fdd0 	bl	8001604 <MAX30100_WriteRegister>

  // Đọc lại để kiểm tra
  spo2cfg = MAX30100_ReadRegister(MAX30100_REG_SPO2_CONFIGURATION);
 8002a64:	2007      	movs	r0, #7
 8002a66:	f7fe fdb1 	bl	80015cc <MAX30100_ReadRegister>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  sprintf(data, "SPO2CFG:0x%02X", spo2cfg);
 8002a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a74:	461a      	mov	r2, r3
 8002a76:	4956      	ldr	r1, [pc, #344]	@ (8002bd0 <main+0x240>)
 8002a78:	4856      	ldr	r0, [pc, #344]	@ (8002bd4 <main+0x244>)
 8002a7a:	f004 fed5 	bl	8007828 <siprintf>
  ILI9341_WriteString(0, 140, data, Font_7x10, ILI9341_RED, ILI9341_BLACK);
 8002a7e:	4b51      	ldr	r3, [pc, #324]	@ (8002bc4 <main+0x234>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	9202      	str	r2, [sp, #8]
 8002a84:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002a88:	9201      	str	r2, [sp, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	9200      	str	r2, [sp, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a50      	ldr	r2, [pc, #320]	@ (8002bd4 <main+0x244>)
 8002a92:	218c      	movs	r1, #140	@ 0x8c
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7ff fe87 	bl	80027a8 <ILI9341_WriteString>
  HAL_Delay(200); // Đợi cảm biến ổn định
 8002a9a:	20c8      	movs	r0, #200	@ 0xc8
 8002a9c:	f000 fdf2 	bl	8003684 <HAL_Delay>
  MAX30100_WriteRegister(MAX30100_REG_INTERRUPT_STATUS, 0x00);
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7fe fdae 	bl	8001604 <MAX30100_WriteRegister>
  uint8_t mode = MAX30100_ReadRegister(MAX30100_REG_MODE_CONFIGURATION);
 8002aa8:	2006      	movs	r0, #6
 8002aaa:	f7fe fd8f 	bl	80015cc <MAX30100_ReadRegister>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  char dbg[32];
  sprintf(dbg, "MODE:0x%02X", mode);
 8002ab4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002ab8:	463b      	mov	r3, r7
 8002aba:	4947      	ldr	r1, [pc, #284]	@ (8002bd8 <main+0x248>)
 8002abc:	4618      	mov	r0, r3
 8002abe:	f004 feb3 	bl	8007828 <siprintf>
  ILI9341_WriteString(0, 80, dbg, Font_7x10, ILI9341_RED, ILI9341_BLACK);
 8002ac2:	4b40      	ldr	r3, [pc, #256]	@ (8002bc4 <main+0x234>)
 8002ac4:	4639      	mov	r1, r7
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	9202      	str	r2, [sp, #8]
 8002aca:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002ace:	9201      	str	r2, [sp, #4]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	9200      	str	r2, [sp, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	460a      	mov	r2, r1
 8002ad8:	2150      	movs	r1, #80	@ 0x50
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7ff fe64 	bl	80027a8 <ILI9341_WriteString>

  uint8_t status = MAX30100_ReadRegister(MAX30100_REG_INTERRUPT_STATUS);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7fe fd73 	bl	80015cc <MAX30100_ReadRegister>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sprintf(dbg, "INT:0x%02X", status);
 8002aec:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8002af0:	463b      	mov	r3, r7
 8002af2:	493a      	ldr	r1, [pc, #232]	@ (8002bdc <main+0x24c>)
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 fe97 	bl	8007828 <siprintf>
  ILI9341_WriteString(0, 100, dbg, Font_7x10, ILI9341_RED, ILI9341_BLACK);
 8002afa:	4b32      	ldr	r3, [pc, #200]	@ (8002bc4 <main+0x234>)
 8002afc:	4639      	mov	r1, r7
 8002afe:	2200      	movs	r2, #0
 8002b00:	9202      	str	r2, [sp, #8]
 8002b02:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002b06:	9201      	str	r2, [sp, #4]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	9200      	str	r2, [sp, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	460a      	mov	r2, r1
 8002b10:	2164      	movs	r1, #100	@ 0x64
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7ff fe48 	bl	80027a8 <ILI9341_WriteString>
  HAL_Delay(5000);
 8002b18:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002b1c:	f000 fdb2 	bl	8003684 <HAL_Delay>
  tsLastReport = HAL_GetTick();
 8002b20:	f000 fda6 	bl	8003670 <HAL_GetTick>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4a2e      	ldr	r2, [pc, #184]	@ (8002be0 <main+0x250>)
 8002b28:	6013      	str	r3, [r2, #0]
  ILI9341_FillScreen(ILI9341_BLACK);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7ff fef6 	bl	800291c <ILI9341_FillScreen>
  uint8_t part_id = MAX30100_GetPartId(&pox.hrm);
 8002b30:	482c      	ldr	r0, [pc, #176]	@ (8002be4 <main+0x254>)
 8002b32:	f7fe fd3e 	bl	80015b2 <MAX30100_GetPartId>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sprintf(data, "PartID: 0x%02X", part_id);
 8002b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b40:	461a      	mov	r2, r3
 8002b42:	4929      	ldr	r1, [pc, #164]	@ (8002be8 <main+0x258>)
 8002b44:	4823      	ldr	r0, [pc, #140]	@ (8002bd4 <main+0x244>)
 8002b46:	f004 fe6f 	bl	8007828 <siprintf>
  ILI9341_WriteString(0, 100, data, Font_7x10, ILI9341_CYAN, ILI9341_BLACK);
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc4 <main+0x234>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	9202      	str	r2, [sp, #8]
 8002b50:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002b54:	9201      	str	r2, [sp, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	9200      	str	r2, [sp, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd4 <main+0x244>)
 8002b5e:	2164      	movs	r1, #100	@ 0x64
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7ff fe21 	bl	80027a8 <ILI9341_WriteString>
  HAL_Delay(2000);
 8002b66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b6a:	f000 fd8b 	bl	8003684 <HAL_Delay>
  while (1)
  {
//	  TestGPS();
//	  HAL_Delay(2000);
//	  TestUart();
	  Max30100();
 8002b6e:	f000 f9df 	bl	8002f30 <Max30100>
//	  ReadDataSensorNew();
//	  TestDHT22();
//	  HAL_Delay(7000);
	    uint8_t status = MAX30100_ReadRegister(MAX30100_REG_INTERRUPT_STATUS);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fe fd2a 	bl	80015cc <MAX30100_ReadRegister>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	    sprintf(data, "INT:0x%02X", status);
 8002b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b82:	461a      	mov	r2, r3
 8002b84:	4915      	ldr	r1, [pc, #84]	@ (8002bdc <main+0x24c>)
 8002b86:	4813      	ldr	r0, [pc, #76]	@ (8002bd4 <main+0x244>)
 8002b88:	f004 fe4e 	bl	8007828 <siprintf>
	    ILI9341_WriteString(0, 120, data, Font_7x10, ILI9341_RED, ILI9341_BLACK);
 8002b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <main+0x234>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	9202      	str	r2, [sp, #8]
 8002b92:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002b96:	9201      	str	r2, [sp, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	9200      	str	r2, [sp, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd4 <main+0x244>)
 8002ba0:	2178      	movs	r1, #120	@ 0x78
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7ff fe00 	bl	80027a8 <ILI9341_WriteString>

	    HAL_Delay(10);
 8002ba8:	200a      	movs	r0, #10
 8002baa:	f000 fd6b 	bl	8003684 <HAL_Delay>
  {
 8002bae:	bf00      	nop
 8002bb0:	e7dd      	b.n	8002b6e <main+0x1de>
 8002bb2:	bf00      	nop
 8002bb4:	20000414 	.word	0x20000414
 8002bb8:	2000085c 	.word	0x2000085c
 8002bbc:	2000089c 	.word	0x2000089c
 8002bc0:	08002941 	.word	0x08002941
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	0800bca0 	.word	0x0800bca0
 8002bcc:	0800bcb0 	.word	0x0800bcb0
 8002bd0:	0800bcc4 	.word	0x0800bcc4
 8002bd4:	2000045c 	.word	0x2000045c
 8002bd8:	0800bcd4 	.word	0x0800bcd4
 8002bdc:	0800bce0 	.word	0x0800bce0
 8002be0:	2000093c 	.word	0x2000093c
 8002be4:	200008f4 	.word	0x200008f4
 8002be8:	0800bcec 	.word	0x0800bcec

08002bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b090      	sub	sp, #64	@ 0x40
 8002bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bf2:	f107 0318 	add.w	r3, r7, #24
 8002bf6:	2228      	movs	r2, #40	@ 0x28
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f004 fea3 	bl	8007946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c20:	2302      	movs	r3, #2
 8002c22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c2a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c30:	f107 0318 	add.w	r3, r7, #24
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 f9cd 	bl	8004fd4 <HAL_RCC_OscConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002c40:	f000 f9f4 	bl	800302c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c44:	230f      	movs	r3, #15
 8002c46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 fc3a 	bl	80054d8 <HAL_RCC_ClockConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002c6a:	f000 f9df 	bl	800302c <Error_Handler>
  }
}
 8002c6e:	bf00      	nop
 8002c70:	3740      	adds	r7, #64	@ 0x40
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c7c:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <MX_I2C1_Init+0x50>)
 8002c7e:	4a13      	ldr	r2, [pc, #76]	@ (8002ccc <MX_I2C1_Init+0x54>)
 8002c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c82:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <MX_I2C1_Init+0x50>)
 8002c84:	4a12      	ldr	r2, [pc, #72]	@ (8002cd0 <MX_I2C1_Init+0x58>)
 8002c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c88:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc8 <MX_I2C1_Init+0x50>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <MX_I2C1_Init+0x50>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <MX_I2C1_Init+0x50>)
 8002c96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <MX_I2C1_Init+0x50>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ca2:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <MX_I2C1_Init+0x50>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca8:	4b07      	ldr	r3, [pc, #28]	@ (8002cc8 <MX_I2C1_Init+0x50>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <MX_I2C1_Init+0x50>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cb4:	4804      	ldr	r0, [pc, #16]	@ (8002cc8 <MX_I2C1_Init+0x50>)
 8002cb6:	f001 f927 	bl	8003f08 <HAL_I2C_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002cc0:	f000 f9b4 	bl	800302c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	200002d8 	.word	0x200002d8
 8002ccc:	40005400 	.word	0x40005400
 8002cd0:	000186a0 	.word	0x000186a0

08002cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002cd8:	4b17      	ldr	r3, [pc, #92]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002cda:	4a18      	ldr	r2, [pc, #96]	@ (8002d3c <MX_SPI1_Init+0x68>)
 8002cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cde:	4b16      	ldr	r3, [pc, #88]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002ce0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ce6:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cec:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cf2:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d06:	4b0c      	ldr	r3, [pc, #48]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d08:	2218      	movs	r2, #24
 8002d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d12:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d18:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d20:	220a      	movs	r2, #10
 8002d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d24:	4804      	ldr	r0, [pc, #16]	@ (8002d38 <MX_SPI1_Init+0x64>)
 8002d26:	f002 fd65 	bl	80057f4 <HAL_SPI_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d30:	f000 f97c 	bl	800302c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	2000032c 	.word	0x2000032c
 8002d3c:	40013000 	.word	0x40013000

08002d40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d44:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <MX_UART4_Init+0x4c>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	@ (8002d90 <MX_UART4_Init+0x50>)
 8002d48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002d4a:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <MX_UART4_Init+0x4c>)
 8002d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d52:	4b0e      	ldr	r3, [pc, #56]	@ (8002d8c <MX_UART4_Init+0x4c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d58:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <MX_UART4_Init+0x4c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <MX_UART4_Init+0x4c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <MX_UART4_Init+0x4c>)
 8002d66:	220c      	movs	r2, #12
 8002d68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6a:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <MX_UART4_Init+0x4c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <MX_UART4_Init+0x4c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d76:	4805      	ldr	r0, [pc, #20]	@ (8002d8c <MX_UART4_Init+0x4c>)
 8002d78:	f002 ffbd 	bl	8005cf6 <HAL_UART_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002d82:	f000 f953 	bl	800302c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000384 	.word	0x20000384
 8002d90:	40004c00 	.word	0x40004c00

08002d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d98:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002d9a:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <MX_USART1_UART_Init+0x50>)
 8002d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d9e:	4b10      	ldr	r3, [pc, #64]	@ (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002da0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002da6:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dac:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002db2:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002db8:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002dba:	220c      	movs	r2, #12
 8002dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dbe:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dca:	4805      	ldr	r0, [pc, #20]	@ (8002de0 <MX_USART1_UART_Init+0x4c>)
 8002dcc:	f002 ff93 	bl	8005cf6 <HAL_UART_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002dd6:	f000 f929 	bl	800302c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200003cc 	.word	0x200003cc
 8002de4:	40013800 	.word	0x40013800

08002de8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002dec:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <MX_USART3_UART_Init+0x4c>)
 8002dee:	4a12      	ldr	r2, [pc, #72]	@ (8002e38 <MX_USART3_UART_Init+0x50>)
 8002df0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002df2:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <MX_USART3_UART_Init+0x4c>)
 8002df4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002df8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <MX_USART3_UART_Init+0x4c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e00:	4b0c      	ldr	r3, [pc, #48]	@ (8002e34 <MX_USART3_UART_Init+0x4c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e06:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <MX_USART3_UART_Init+0x4c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e0c:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <MX_USART3_UART_Init+0x4c>)
 8002e0e:	220c      	movs	r2, #12
 8002e10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e12:	4b08      	ldr	r3, [pc, #32]	@ (8002e34 <MX_USART3_UART_Init+0x4c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <MX_USART3_UART_Init+0x4c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e1e:	4805      	ldr	r0, [pc, #20]	@ (8002e34 <MX_USART3_UART_Init+0x4c>)
 8002e20:	f002 ff69 	bl	8005cf6 <HAL_UART_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e2a:	f000 f8ff 	bl	800302c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000414 	.word	0x20000414
 8002e38:	40004800 	.word	0x40004800

08002e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e42:	f107 0310 	add.w	r3, r7, #16
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e50:	4b33      	ldr	r3, [pc, #204]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002e56:	f043 0320 	orr.w	r3, r3, #32
 8002e5a:	6193      	str	r3, [r2, #24]
 8002e5c:	4b30      	ldr	r3, [pc, #192]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e68:	4b2d      	ldr	r3, [pc, #180]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002e6e:	f043 0304 	orr.w	r3, r3, #4
 8002e72:	6193      	str	r3, [r2, #24]
 8002e74:	4b2a      	ldr	r3, [pc, #168]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e80:	4b27      	ldr	r3, [pc, #156]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	4a26      	ldr	r2, [pc, #152]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002e86:	f043 0308 	orr.w	r3, r3, #8
 8002e8a:	6193      	str	r3, [r2, #24]
 8002e8c:	4b24      	ldr	r3, [pc, #144]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e98:	4b21      	ldr	r3, [pc, #132]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4a20      	ldr	r2, [pc, #128]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002e9e:	f043 0310 	orr.w	r3, r3, #16
 8002ea2:	6193      	str	r3, [r2, #24]
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <MX_GPIO_Init+0xe4>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	210c      	movs	r1, #12
 8002eb4:	481b      	ldr	r0, [pc, #108]	@ (8002f24 <MX_GPIO_Init+0xe8>)
 8002eb6:	f000 ffed 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002eba:	230c      	movs	r3, #12
 8002ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4814      	ldr	r0, [pc, #80]	@ (8002f24 <MX_GPIO_Init+0xe8>)
 8002ed2:	f000 fe4b 	bl	8003b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002eda:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <MX_GPIO_Init+0xec>)
 8002edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee2:	f107 0310 	add.w	r3, r7, #16
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4810      	ldr	r0, [pc, #64]	@ (8002f2c <MX_GPIO_Init+0xf0>)
 8002eea:	f000 fe3f 	bl	8003b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002eee:	2340      	movs	r3, #64	@ 0x40
 8002ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efa:	f107 0310 	add.w	r3, r7, #16
 8002efe:	4619      	mov	r1, r3
 8002f00:	480a      	ldr	r0, [pc, #40]	@ (8002f2c <MX_GPIO_Init+0xf0>)
 8002f02:	f000 fe33 	bl	8003b6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2006      	movs	r0, #6
 8002f0c:	f000 fcb5 	bl	800387a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f10:	2006      	movs	r0, #6
 8002f12:	f000 fcce 	bl	80038b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f16:	bf00      	nop
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010800 	.word	0x40010800
 8002f28:	10210000 	.word	0x10210000
 8002f2c:	40010c00 	.word	0x40010c00

08002f30 <Max30100>:
    if (spo2 > 100) spo2 = 100;
    if (spo2 < 0) spo2 = 0;

    return spo2;
}
void Max30100() {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af04      	add	r7, sp, #16
    PulseOximeter_Update(&pox);
 8002f36:	4835      	ldr	r0, [pc, #212]	@ (800300c <Max30100+0xdc>)
 8002f38:	f7fe fdf0 	bl	8001b1c <PulseOximeter_Update>
    uint16_t ir, red;
    if (MAX30100_GetRawValues(&pox.hrm, &ir, &red)) {
 8002f3c:	1dba      	adds	r2, r7, #6
 8002f3e:	f107 0308 	add.w	r3, r7, #8
 8002f42:	4619      	mov	r1, r3
 8002f44:	4832      	ldr	r0, [pc, #200]	@ (8003010 <Max30100+0xe0>)
 8002f46:	f7fe fb00 	bl	800154a <MAX30100_GetRawValues>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d014      	beq.n	8002f7a <Max30100+0x4a>
        sprintf(data, "IR: %u, RED: %u", ir, red);
 8002f50:	893b      	ldrh	r3, [r7, #8]
 8002f52:	461a      	mov	r2, r3
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	492f      	ldr	r1, [pc, #188]	@ (8003014 <Max30100+0xe4>)
 8002f58:	482f      	ldr	r0, [pc, #188]	@ (8003018 <Max30100+0xe8>)
 8002f5a:	f004 fc65 	bl	8007828 <siprintf>
        ILI9341_WriteString(0, 30, data, Font_7x10, ILI9341_YELLOW, ILI9341_BLACK);
 8002f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800301c <Max30100+0xec>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	9202      	str	r2, [sp, #8]
 8002f64:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002f68:	9201      	str	r2, [sp, #4]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	9200      	str	r2, [sp, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a29      	ldr	r2, [pc, #164]	@ (8003018 <Max30100+0xe8>)
 8002f72:	211e      	movs	r1, #30
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7ff fc17 	bl	80027a8 <ILI9341_WriteString>
    }
    // Định kỳ báo cáo nhịp tim và SpO2
    if (HAL_GetTick() - tsLastReport > 1000) {
 8002f7a:	f000 fb79 	bl	8003670 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	4b27      	ldr	r3, [pc, #156]	@ (8003020 <Max30100+0xf0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f8a:	d938      	bls.n	8002ffe <Max30100+0xce>
    	float heartRate = PulseOximeter_GetHeartRate(&pox);
 8002f8c:	481f      	ldr	r0, [pc, #124]	@ (800300c <Max30100+0xdc>)
 8002f8e:	f7fe fdd8 	bl	8001b42 <PulseOximeter_GetHeartRate>
 8002f92:	60f8      	str	r0, [r7, #12]
    	uint8_t spo2 = PulseOximeter_GetSpO2(&pox);
 8002f94:	481d      	ldr	r0, [pc, #116]	@ (800300c <Max30100+0xdc>)
 8002f96:	f7fe fde2 	bl	8001b5e <PulseOximeter_GetSpO2>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	72fb      	strb	r3, [r7, #11]

        sprintf(data, "HR: %.1f bpm", heartRate);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7fd faae 	bl	8000500 <__aeabi_f2d>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	491e      	ldr	r1, [pc, #120]	@ (8003024 <Max30100+0xf4>)
 8002faa:	481b      	ldr	r0, [pc, #108]	@ (8003018 <Max30100+0xe8>)
 8002fac:	f004 fc3c 	bl	8007828 <siprintf>
        ILI9341_WriteString(0, 15, data, Font_7x10, ILI9341_CYAN, ILI9341_BLACK);
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800301c <Max30100+0xec>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	9202      	str	r2, [sp, #8]
 8002fb6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002fba:	9201      	str	r2, [sp, #4]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	9200      	str	r2, [sp, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <Max30100+0xe8>)
 8002fc4:	210f      	movs	r1, #15
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7ff fbee 	bl	80027a8 <ILI9341_WriteString>
        sprintf(data, "SpO2: %d %%", spo2);
 8002fcc:	7afb      	ldrb	r3, [r7, #11]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4915      	ldr	r1, [pc, #84]	@ (8003028 <Max30100+0xf8>)
 8002fd2:	4811      	ldr	r0, [pc, #68]	@ (8003018 <Max30100+0xe8>)
 8002fd4:	f004 fc28 	bl	8007828 <siprintf>
        ILI9341_WriteString(0, 30, data, Font_7x10, ILI9341_CYAN, ILI9341_BLACK);
 8002fd8:	4b10      	ldr	r3, [pc, #64]	@ (800301c <Max30100+0xec>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	9202      	str	r2, [sp, #8]
 8002fde:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002fe2:	9201      	str	r2, [sp, #4]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	9200      	str	r2, [sp, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a0b      	ldr	r2, [pc, #44]	@ (8003018 <Max30100+0xe8>)
 8002fec:	211e      	movs	r1, #30
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f7ff fbda 	bl	80027a8 <ILI9341_WriteString>

        tsLastReport = HAL_GetTick();
 8002ff4:	f000 fb3c 	bl	8003670 <HAL_GetTick>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4a09      	ldr	r2, [pc, #36]	@ (8003020 <Max30100+0xf0>)
 8002ffc:	6013      	str	r3, [r2, #0]
    }
    HAL_Delay(10);
 8002ffe:	200a      	movs	r0, #10
 8003000:	f000 fb40 	bl	8003684 <HAL_Delay>
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	2000089c 	.word	0x2000089c
 8003010:	200008f4 	.word	0x200008f4
 8003014:	0800bd4c 	.word	0x0800bd4c
 8003018:	2000045c 	.word	0x2000045c
 800301c:	20000000 	.word	0x20000000
 8003020:	2000093c 	.word	0x2000093c
 8003024:	0800bd5c 	.word	0x0800bd5c
 8003028:	0800bd6c 	.word	0x0800bd6c

0800302c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003030:	b672      	cpsid	i
}
 8003032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003034:	bf00      	nop
 8003036:	e7fd      	b.n	8003034 <Error_Handler+0x8>

08003038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800303e:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <HAL_MspInit+0x5c>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	4a14      	ldr	r2, [pc, #80]	@ (8003094 <HAL_MspInit+0x5c>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6193      	str	r3, [r2, #24]
 800304a:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <HAL_MspInit+0x5c>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003056:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <HAL_MspInit+0x5c>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4a0e      	ldr	r2, [pc, #56]	@ (8003094 <HAL_MspInit+0x5c>)
 800305c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003060:	61d3      	str	r3, [r2, #28]
 8003062:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <HAL_MspInit+0x5c>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800306e:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <HAL_MspInit+0x60>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <HAL_MspInit+0x60>)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	40021000 	.word	0x40021000
 8003098:	40010000 	.word	0x40010000

0800309c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	@ 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1d      	ldr	r2, [pc, #116]	@ (800312c <HAL_I2C_MspInit+0x90>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d132      	bne.n	8003122 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003130 <HAL_I2C_MspInit+0x94>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003130 <HAL_I2C_MspInit+0x94>)
 80030c2:	f043 0308 	orr.w	r3, r3, #8
 80030c6:	6193      	str	r3, [r2, #24]
 80030c8:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <HAL_I2C_MspInit+0x94>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030da:	2312      	movs	r3, #18
 80030dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030de:	2303      	movs	r3, #3
 80030e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4619      	mov	r1, r3
 80030e8:	4812      	ldr	r0, [pc, #72]	@ (8003134 <HAL_I2C_MspInit+0x98>)
 80030ea:	f000 fd3f 	bl	8003b6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80030ee:	4b12      	ldr	r3, [pc, #72]	@ (8003138 <HAL_I2C_MspInit+0x9c>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
 8003104:	4a0c      	ldr	r2, [pc, #48]	@ (8003138 <HAL_I2C_MspInit+0x9c>)
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800310a:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_I2C_MspInit+0x94>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4a08      	ldr	r2, [pc, #32]	@ (8003130 <HAL_I2C_MspInit+0x94>)
 8003110:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003114:	61d3      	str	r3, [r2, #28]
 8003116:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_I2C_MspInit+0x94>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003122:	bf00      	nop
 8003124:	3728      	adds	r7, #40	@ 0x28
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40005400 	.word	0x40005400
 8003130:	40021000 	.word	0x40021000
 8003134:	40010c00 	.word	0x40010c00
 8003138:	40010000 	.word	0x40010000

0800313c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 0310 	add.w	r3, r7, #16
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1b      	ldr	r2, [pc, #108]	@ (80031c4 <HAL_SPI_MspInit+0x88>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d12f      	bne.n	80031bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800315c:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <HAL_SPI_MspInit+0x8c>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	4a19      	ldr	r2, [pc, #100]	@ (80031c8 <HAL_SPI_MspInit+0x8c>)
 8003162:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003166:	6193      	str	r3, [r2, #24]
 8003168:	4b17      	ldr	r3, [pc, #92]	@ (80031c8 <HAL_SPI_MspInit+0x8c>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003174:	4b14      	ldr	r3, [pc, #80]	@ (80031c8 <HAL_SPI_MspInit+0x8c>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	4a13      	ldr	r2, [pc, #76]	@ (80031c8 <HAL_SPI_MspInit+0x8c>)
 800317a:	f043 0304 	orr.w	r3, r3, #4
 800317e:	6193      	str	r3, [r2, #24]
 8003180:	4b11      	ldr	r3, [pc, #68]	@ (80031c8 <HAL_SPI_MspInit+0x8c>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800318c:	23a0      	movs	r3, #160	@ 0xa0
 800318e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	2302      	movs	r3, #2
 8003192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003194:	2303      	movs	r3, #3
 8003196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003198:	f107 0310 	add.w	r3, r7, #16
 800319c:	4619      	mov	r1, r3
 800319e:	480b      	ldr	r0, [pc, #44]	@ (80031cc <HAL_SPI_MspInit+0x90>)
 80031a0:	f000 fce4 	bl	8003b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031a4:	2340      	movs	r3, #64	@ 0x40
 80031a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b0:	f107 0310 	add.w	r3, r7, #16
 80031b4:	4619      	mov	r1, r3
 80031b6:	4805      	ldr	r0, [pc, #20]	@ (80031cc <HAL_SPI_MspInit+0x90>)
 80031b8:	f000 fcd8 	bl	8003b6c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80031bc:	bf00      	nop
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40013000 	.word	0x40013000
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40010800 	.word	0x40010800

080031d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08c      	sub	sp, #48	@ 0x30
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0320 	add.w	r3, r7, #32
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a58      	ldr	r2, [pc, #352]	@ (800334c <HAL_UART_MspInit+0x17c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d132      	bne.n	8003256 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80031f0:	4b57      	ldr	r3, [pc, #348]	@ (8003350 <HAL_UART_MspInit+0x180>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	4a56      	ldr	r2, [pc, #344]	@ (8003350 <HAL_UART_MspInit+0x180>)
 80031f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80031fa:	61d3      	str	r3, [r2, #28]
 80031fc:	4b54      	ldr	r3, [pc, #336]	@ (8003350 <HAL_UART_MspInit+0x180>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003208:	4b51      	ldr	r3, [pc, #324]	@ (8003350 <HAL_UART_MspInit+0x180>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4a50      	ldr	r2, [pc, #320]	@ (8003350 <HAL_UART_MspInit+0x180>)
 800320e:	f043 0310 	orr.w	r3, r3, #16
 8003212:	6193      	str	r3, [r2, #24]
 8003214:	4b4e      	ldr	r3, [pc, #312]	@ (8003350 <HAL_UART_MspInit+0x180>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800322a:	2303      	movs	r3, #3
 800322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322e:	f107 0320 	add.w	r3, r7, #32
 8003232:	4619      	mov	r1, r3
 8003234:	4847      	ldr	r0, [pc, #284]	@ (8003354 <HAL_UART_MspInit+0x184>)
 8003236:	f000 fc99 	bl	8003b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800323a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800323e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003248:	f107 0320 	add.w	r3, r7, #32
 800324c:	4619      	mov	r1, r3
 800324e:	4841      	ldr	r0, [pc, #260]	@ (8003354 <HAL_UART_MspInit+0x184>)
 8003250:	f000 fc8c 	bl	8003b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003254:	e076      	b.n	8003344 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a3f      	ldr	r2, [pc, #252]	@ (8003358 <HAL_UART_MspInit+0x188>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d13a      	bne.n	80032d6 <HAL_UART_MspInit+0x106>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003260:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <HAL_UART_MspInit+0x180>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	4a3a      	ldr	r2, [pc, #232]	@ (8003350 <HAL_UART_MspInit+0x180>)
 8003266:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800326a:	6193      	str	r3, [r2, #24]
 800326c:	4b38      	ldr	r3, [pc, #224]	@ (8003350 <HAL_UART_MspInit+0x180>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003278:	4b35      	ldr	r3, [pc, #212]	@ (8003350 <HAL_UART_MspInit+0x180>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4a34      	ldr	r2, [pc, #208]	@ (8003350 <HAL_UART_MspInit+0x180>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6193      	str	r3, [r2, #24]
 8003284:	4b32      	ldr	r3, [pc, #200]	@ (8003350 <HAL_UART_MspInit+0x180>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800329a:	2303      	movs	r3, #3
 800329c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329e:	f107 0320 	add.w	r3, r7, #32
 80032a2:	4619      	mov	r1, r3
 80032a4:	482d      	ldr	r0, [pc, #180]	@ (800335c <HAL_UART_MspInit+0x18c>)
 80032a6:	f000 fc61 	bl	8003b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b0:	2300      	movs	r3, #0
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b8:	f107 0320 	add.w	r3, r7, #32
 80032bc:	4619      	mov	r1, r3
 80032be:	4827      	ldr	r0, [pc, #156]	@ (800335c <HAL_UART_MspInit+0x18c>)
 80032c0:	f000 fc54 	bl	8003b6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032c4:	2200      	movs	r2, #0
 80032c6:	2100      	movs	r1, #0
 80032c8:	2025      	movs	r0, #37	@ 0x25
 80032ca:	f000 fad6 	bl	800387a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032ce:	2025      	movs	r0, #37	@ 0x25
 80032d0:	f000 faef 	bl	80038b2 <HAL_NVIC_EnableIRQ>
}
 80032d4:	e036      	b.n	8003344 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a21      	ldr	r2, [pc, #132]	@ (8003360 <HAL_UART_MspInit+0x190>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d131      	bne.n	8003344 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <HAL_UART_MspInit+0x180>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003350 <HAL_UART_MspInit+0x180>)
 80032e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ea:	61d3      	str	r3, [r2, #28]
 80032ec:	4b18      	ldr	r3, [pc, #96]	@ (8003350 <HAL_UART_MspInit+0x180>)
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f8:	4b15      	ldr	r3, [pc, #84]	@ (8003350 <HAL_UART_MspInit+0x180>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	4a14      	ldr	r2, [pc, #80]	@ (8003350 <HAL_UART_MspInit+0x180>)
 80032fe:	f043 0308 	orr.w	r3, r3, #8
 8003302:	6193      	str	r3, [r2, #24]
 8003304:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <HAL_UART_MspInit+0x180>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003310:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800331a:	2303      	movs	r3, #3
 800331c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331e:	f107 0320 	add.w	r3, r7, #32
 8003322:	4619      	mov	r1, r3
 8003324:	480f      	ldr	r0, [pc, #60]	@ (8003364 <HAL_UART_MspInit+0x194>)
 8003326:	f000 fc21 	bl	8003b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800332a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800332e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003330:	2300      	movs	r3, #0
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003338:	f107 0320 	add.w	r3, r7, #32
 800333c:	4619      	mov	r1, r3
 800333e:	4809      	ldr	r0, [pc, #36]	@ (8003364 <HAL_UART_MspInit+0x194>)
 8003340:	f000 fc14 	bl	8003b6c <HAL_GPIO_Init>
}
 8003344:	bf00      	nop
 8003346:	3730      	adds	r7, #48	@ 0x30
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40004c00 	.word	0x40004c00
 8003350:	40021000 	.word	0x40021000
 8003354:	40011000 	.word	0x40011000
 8003358:	40013800 	.word	0x40013800
 800335c:	40010800 	.word	0x40010800
 8003360:	40004800 	.word	0x40004800
 8003364:	40010c00 	.word	0x40010c00

08003368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <NMI_Handler+0x4>

08003370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <HardFault_Handler+0x4>

08003378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <MemManage_Handler+0x4>

08003380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <BusFault_Handler+0x4>

08003388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <UsageFault_Handler+0x4>

08003390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr

080033a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b8:	f000 f948 	bl	800364c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}

080033c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80033c4:	2001      	movs	r0, #1
 80033c6:	f000 fd7d 	bl	8003ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
//  MAX30100_InterruptHandler();
  /* USER CODE END EXTI0_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033d4:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <USART1_IRQHandler+0x10>)
 80033d6:	f002 fd8f 	bl	8005ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200003cc 	.word	0x200003cc

080033e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return 1;
 80033e8:	2301      	movs	r3, #1
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <_kill>:

int _kill(int pid, int sig)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033fc:	f004 fb08 	bl	8007a10 <__errno>
 8003400:	4603      	mov	r3, r0
 8003402:	2216      	movs	r2, #22
 8003404:	601a      	str	r2, [r3, #0]
  return -1;
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <_exit>:

void _exit (int status)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800341a:	f04f 31ff 	mov.w	r1, #4294967295
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffe7 	bl	80033f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <_exit+0x12>

08003428 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	e00a      	b.n	8003450 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800343a:	f3af 8000 	nop.w
 800343e:	4601      	mov	r1, r0
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	60ba      	str	r2, [r7, #8]
 8003446:	b2ca      	uxtb	r2, r1
 8003448:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3301      	adds	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	dbf0      	blt.n	800343a <_read+0x12>
  }

  return len;
 8003458:	687b      	ldr	r3, [r7, #4]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e009      	b.n	8003488 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	60ba      	str	r2, [r7, #8]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3301      	adds	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	dbf1      	blt.n	8003474 <_write+0x12>
  }
  return len;
 8003490:	687b      	ldr	r3, [r7, #4]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_close>:

int _close(int file)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034c0:	605a      	str	r2, [r3, #4]
  return 0;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <_isatty>:

int _isatty(int file)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
	...

080034fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003504:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <_sbrk+0x5c>)
 8003506:	4b15      	ldr	r3, [pc, #84]	@ (800355c <_sbrk+0x60>)
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003510:	4b13      	ldr	r3, [pc, #76]	@ (8003560 <_sbrk+0x64>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003518:	4b11      	ldr	r3, [pc, #68]	@ (8003560 <_sbrk+0x64>)
 800351a:	4a12      	ldr	r2, [pc, #72]	@ (8003564 <_sbrk+0x68>)
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800351e:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <_sbrk+0x64>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	429a      	cmp	r2, r3
 800352a:	d207      	bcs.n	800353c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800352c:	f004 fa70 	bl	8007a10 <__errno>
 8003530:	4603      	mov	r3, r0
 8003532:	220c      	movs	r2, #12
 8003534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
 800353a:	e009      	b.n	8003550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800353c:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <_sbrk+0x64>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003542:	4b07      	ldr	r3, [pc, #28]	@ (8003560 <_sbrk+0x64>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	4a05      	ldr	r2, [pc, #20]	@ (8003560 <_sbrk+0x64>)
 800354c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800354e:	68fb      	ldr	r3, [r7, #12]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	2000c000 	.word	0x2000c000
 800355c:	00000400 	.word	0x00000400
 8003560:	20000940 	.word	0x20000940
 8003564:	20000a98 	.word	0x20000a98

08003568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003574:	f7ff fff8 	bl	8003568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003578:	480b      	ldr	r0, [pc, #44]	@ (80035a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800357a:	490c      	ldr	r1, [pc, #48]	@ (80035ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800357c:	4a0c      	ldr	r2, [pc, #48]	@ (80035b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800357e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003580:	e002      	b.n	8003588 <LoopCopyDataInit>

08003582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003586:	3304      	adds	r3, #4

08003588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800358a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800358c:	d3f9      	bcc.n	8003582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800358e:	4a09      	ldr	r2, [pc, #36]	@ (80035b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003590:	4c09      	ldr	r4, [pc, #36]	@ (80035b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003594:	e001      	b.n	800359a <LoopFillZerobss>

08003596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003598:	3204      	adds	r2, #4

0800359a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800359a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800359c:	d3fb      	bcc.n	8003596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800359e:	f004 fa3d 	bl	8007a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035a2:	f7ff f9f5 	bl	8002990 <main>
  bx lr
 80035a6:	4770      	bx	lr
  ldr r0, =_sdata
 80035a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80035b0:	0800ca44 	.word	0x0800ca44
  ldr r2, =_sbss
 80035b4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80035b8:	20000a94 	.word	0x20000a94

080035bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035bc:	e7fe      	b.n	80035bc <ADC1_2_IRQHandler>
	...

080035c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c4:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <HAL_Init+0x28>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a07      	ldr	r2, [pc, #28]	@ (80035e8 <HAL_Init+0x28>)
 80035ca:	f043 0310 	orr.w	r3, r3, #16
 80035ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d0:	2003      	movs	r0, #3
 80035d2:	f000 f947 	bl	8003864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035d6:	200f      	movs	r0, #15
 80035d8:	f000 f808 	bl	80035ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035dc:	f7ff fd2c 	bl	8003038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40022000 	.word	0x40022000

080035ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f4:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <HAL_InitTick+0x54>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <HAL_InitTick+0x58>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003602:	fbb3 f3f1 	udiv	r3, r3, r1
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f95f 	bl	80038ce <HAL_SYSTICK_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e00e      	b.n	8003638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d80a      	bhi.n	8003636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003620:	2200      	movs	r2, #0
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	f000 f927 	bl	800387a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800362c:	4a06      	ldr	r2, [pc, #24]	@ (8003648 <HAL_InitTick+0x5c>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000008 	.word	0x20000008
 8003644:	20000010 	.word	0x20000010
 8003648:	2000000c 	.word	0x2000000c

0800364c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003650:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <HAL_IncTick+0x1c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_IncTick+0x20>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4413      	add	r3, r2
 800365c:	4a03      	ldr	r2, [pc, #12]	@ (800366c <HAL_IncTick+0x20>)
 800365e:	6013      	str	r3, [r2, #0]
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	20000010 	.word	0x20000010
 800366c:	20000944 	.word	0x20000944

08003670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return uwTick;
 8003674:	4b02      	ldr	r3, [pc, #8]	@ (8003680 <HAL_GetTick+0x10>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	20000944 	.word	0x20000944

08003684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800368c:	f7ff fff0 	bl	8003670 <HAL_GetTick>
 8003690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d005      	beq.n	80036aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800369e:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <HAL_Delay+0x44>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036aa:	bf00      	nop
 80036ac:	f7ff ffe0 	bl	8003670 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d8f7      	bhi.n	80036ac <HAL_Delay+0x28>
  {
  }
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000010 	.word	0x20000010

080036cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <__NVIC_SetPriorityGrouping+0x44>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036e8:	4013      	ands	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036fe:	4a04      	ldr	r2, [pc, #16]	@ (8003710 <__NVIC_SetPriorityGrouping+0x44>)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	60d3      	str	r3, [r2, #12]
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003718:	4b04      	ldr	r3, [pc, #16]	@ (800372c <__NVIC_GetPriorityGrouping+0x18>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	0a1b      	lsrs	r3, r3, #8
 800371e:	f003 0307 	and.w	r3, r3, #7
}
 8003722:	4618      	mov	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373e:	2b00      	cmp	r3, #0
 8003740:	db0b      	blt.n	800375a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	f003 021f 	and.w	r2, r3, #31
 8003748:	4906      	ldr	r1, [pc, #24]	@ (8003764 <__NVIC_EnableIRQ+0x34>)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	2001      	movs	r0, #1
 8003752:	fa00 f202 	lsl.w	r2, r0, r2
 8003756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr
 8003764:	e000e100 	.word	0xe000e100

08003768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	6039      	str	r1, [r7, #0]
 8003772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	2b00      	cmp	r3, #0
 800377a:	db0a      	blt.n	8003792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	490c      	ldr	r1, [pc, #48]	@ (80037b4 <__NVIC_SetPriority+0x4c>)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	0112      	lsls	r2, r2, #4
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	440b      	add	r3, r1
 800378c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003790:	e00a      	b.n	80037a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4908      	ldr	r1, [pc, #32]	@ (80037b8 <__NVIC_SetPriority+0x50>)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	3b04      	subs	r3, #4
 80037a0:	0112      	lsls	r2, r2, #4
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	440b      	add	r3, r1
 80037a6:	761a      	strb	r2, [r3, #24]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000e100 	.word	0xe000e100
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	@ 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f1c3 0307 	rsb	r3, r3, #7
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	bf28      	it	cs
 80037da:	2304      	movcs	r3, #4
 80037dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3304      	adds	r3, #4
 80037e2:	2b06      	cmp	r3, #6
 80037e4:	d902      	bls.n	80037ec <NVIC_EncodePriority+0x30>
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3b03      	subs	r3, #3
 80037ea:	e000      	b.n	80037ee <NVIC_EncodePriority+0x32>
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f0:	f04f 32ff 	mov.w	r2, #4294967295
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43da      	mvns	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	401a      	ands	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003804:	f04f 31ff 	mov.w	r1, #4294967295
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fa01 f303 	lsl.w	r3, r1, r3
 800380e:	43d9      	mvns	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	4313      	orrs	r3, r2
         );
}
 8003816:	4618      	mov	r0, r3
 8003818:	3724      	adds	r7, #36	@ 0x24
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003830:	d301      	bcc.n	8003836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003832:	2301      	movs	r3, #1
 8003834:	e00f      	b.n	8003856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003836:	4a0a      	ldr	r2, [pc, #40]	@ (8003860 <SysTick_Config+0x40>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3b01      	subs	r3, #1
 800383c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800383e:	210f      	movs	r1, #15
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	f7ff ff90 	bl	8003768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003848:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <SysTick_Config+0x40>)
 800384a:	2200      	movs	r2, #0
 800384c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800384e:	4b04      	ldr	r3, [pc, #16]	@ (8003860 <SysTick_Config+0x40>)
 8003850:	2207      	movs	r2, #7
 8003852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	e000e010 	.word	0xe000e010

08003864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff2d 	bl	80036cc <__NVIC_SetPriorityGrouping>
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800388c:	f7ff ff42 	bl	8003714 <__NVIC_GetPriorityGrouping>
 8003890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	6978      	ldr	r0, [r7, #20]
 8003898:	f7ff ff90 	bl	80037bc <NVIC_EncodePriority>
 800389c:	4602      	mov	r2, r0
 800389e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff5f 	bl	8003768 <__NVIC_SetPriority>
}
 80038aa:	bf00      	nop
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ff35 	bl	8003730 <__NVIC_EnableIRQ>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ffa2 	bl	8003820 <SysTick_Config>
 80038dc:	4603      	mov	r3, r0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d008      	beq.n	8003910 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2204      	movs	r2, #4
 8003902:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e020      	b.n	8003952 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 020e 	bic.w	r2, r2, #14
 800391e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003938:	2101      	movs	r1, #1
 800393a:	fa01 f202 	lsl.w	r2, r1, r2
 800393e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003950:	7bfb      	ldrb	r3, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d005      	beq.n	8003980 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2204      	movs	r2, #4
 8003978:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	e0d6      	b.n	8003b2e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 020e 	bic.w	r2, r2, #14
 800398e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	461a      	mov	r2, r3
 80039a6:	4b64      	ldr	r3, [pc, #400]	@ (8003b38 <HAL_DMA_Abort_IT+0x1dc>)
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d958      	bls.n	8003a5e <HAL_DMA_Abort_IT+0x102>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a62      	ldr	r2, [pc, #392]	@ (8003b3c <HAL_DMA_Abort_IT+0x1e0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d04f      	beq.n	8003a56 <HAL_DMA_Abort_IT+0xfa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a61      	ldr	r2, [pc, #388]	@ (8003b40 <HAL_DMA_Abort_IT+0x1e4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d048      	beq.n	8003a52 <HAL_DMA_Abort_IT+0xf6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a5f      	ldr	r2, [pc, #380]	@ (8003b44 <HAL_DMA_Abort_IT+0x1e8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d040      	beq.n	8003a4c <HAL_DMA_Abort_IT+0xf0>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003b48 <HAL_DMA_Abort_IT+0x1ec>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d038      	beq.n	8003a46 <HAL_DMA_Abort_IT+0xea>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a5c      	ldr	r2, [pc, #368]	@ (8003b4c <HAL_DMA_Abort_IT+0x1f0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d030      	beq.n	8003a40 <HAL_DMA_Abort_IT+0xe4>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b50 <HAL_DMA_Abort_IT+0x1f4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d028      	beq.n	8003a3a <HAL_DMA_Abort_IT+0xde>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a52      	ldr	r2, [pc, #328]	@ (8003b38 <HAL_DMA_Abort_IT+0x1dc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d020      	beq.n	8003a34 <HAL_DMA_Abort_IT+0xd8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a57      	ldr	r2, [pc, #348]	@ (8003b54 <HAL_DMA_Abort_IT+0x1f8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d019      	beq.n	8003a30 <HAL_DMA_Abort_IT+0xd4>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a55      	ldr	r2, [pc, #340]	@ (8003b58 <HAL_DMA_Abort_IT+0x1fc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d012      	beq.n	8003a2c <HAL_DMA_Abort_IT+0xd0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a54      	ldr	r2, [pc, #336]	@ (8003b5c <HAL_DMA_Abort_IT+0x200>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00a      	beq.n	8003a26 <HAL_DMA_Abort_IT+0xca>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a52      	ldr	r2, [pc, #328]	@ (8003b60 <HAL_DMA_Abort_IT+0x204>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d102      	bne.n	8003a20 <HAL_DMA_Abort_IT+0xc4>
 8003a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a1e:	e01b      	b.n	8003a58 <HAL_DMA_Abort_IT+0xfc>
 8003a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a24:	e018      	b.n	8003a58 <HAL_DMA_Abort_IT+0xfc>
 8003a26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a2a:	e015      	b.n	8003a58 <HAL_DMA_Abort_IT+0xfc>
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	e013      	b.n	8003a58 <HAL_DMA_Abort_IT+0xfc>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e011      	b.n	8003a58 <HAL_DMA_Abort_IT+0xfc>
 8003a34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a38:	e00e      	b.n	8003a58 <HAL_DMA_Abort_IT+0xfc>
 8003a3a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003a3e:	e00b      	b.n	8003a58 <HAL_DMA_Abort_IT+0xfc>
 8003a40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a44:	e008      	b.n	8003a58 <HAL_DMA_Abort_IT+0xfc>
 8003a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a4a:	e005      	b.n	8003a58 <HAL_DMA_Abort_IT+0xfc>
 8003a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a50:	e002      	b.n	8003a58 <HAL_DMA_Abort_IT+0xfc>
 8003a52:	2310      	movs	r3, #16
 8003a54:	e000      	b.n	8003a58 <HAL_DMA_Abort_IT+0xfc>
 8003a56:	2301      	movs	r3, #1
 8003a58:	4a42      	ldr	r2, [pc, #264]	@ (8003b64 <HAL_DMA_Abort_IT+0x208>)
 8003a5a:	6053      	str	r3, [r2, #4]
 8003a5c:	e057      	b.n	8003b0e <HAL_DMA_Abort_IT+0x1b2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a36      	ldr	r2, [pc, #216]	@ (8003b3c <HAL_DMA_Abort_IT+0x1e0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04f      	beq.n	8003b08 <HAL_DMA_Abort_IT+0x1ac>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a34      	ldr	r2, [pc, #208]	@ (8003b40 <HAL_DMA_Abort_IT+0x1e4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d048      	beq.n	8003b04 <HAL_DMA_Abort_IT+0x1a8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a33      	ldr	r2, [pc, #204]	@ (8003b44 <HAL_DMA_Abort_IT+0x1e8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_Abort_IT+0x1a2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a31      	ldr	r2, [pc, #196]	@ (8003b48 <HAL_DMA_Abort_IT+0x1ec>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d038      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x19c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a30      	ldr	r2, [pc, #192]	@ (8003b4c <HAL_DMA_Abort_IT+0x1f0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d030      	beq.n	8003af2 <HAL_DMA_Abort_IT+0x196>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2e      	ldr	r2, [pc, #184]	@ (8003b50 <HAL_DMA_Abort_IT+0x1f4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d028      	beq.n	8003aec <HAL_DMA_Abort_IT+0x190>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a26      	ldr	r2, [pc, #152]	@ (8003b38 <HAL_DMA_Abort_IT+0x1dc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d020      	beq.n	8003ae6 <HAL_DMA_Abort_IT+0x18a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8003b54 <HAL_DMA_Abort_IT+0x1f8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d019      	beq.n	8003ae2 <HAL_DMA_Abort_IT+0x186>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a29      	ldr	r2, [pc, #164]	@ (8003b58 <HAL_DMA_Abort_IT+0x1fc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d012      	beq.n	8003ade <HAL_DMA_Abort_IT+0x182>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a27      	ldr	r2, [pc, #156]	@ (8003b5c <HAL_DMA_Abort_IT+0x200>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_DMA_Abort_IT+0x17c>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a26      	ldr	r2, [pc, #152]	@ (8003b60 <HAL_DMA_Abort_IT+0x204>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d102      	bne.n	8003ad2 <HAL_DMA_Abort_IT+0x176>
 8003acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ad0:	e01b      	b.n	8003b0a <HAL_DMA_Abort_IT+0x1ae>
 8003ad2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ad6:	e018      	b.n	8003b0a <HAL_DMA_Abort_IT+0x1ae>
 8003ad8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003adc:	e015      	b.n	8003b0a <HAL_DMA_Abort_IT+0x1ae>
 8003ade:	2310      	movs	r3, #16
 8003ae0:	e013      	b.n	8003b0a <HAL_DMA_Abort_IT+0x1ae>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e011      	b.n	8003b0a <HAL_DMA_Abort_IT+0x1ae>
 8003ae6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003aea:	e00e      	b.n	8003b0a <HAL_DMA_Abort_IT+0x1ae>
 8003aec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003af0:	e00b      	b.n	8003b0a <HAL_DMA_Abort_IT+0x1ae>
 8003af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003af6:	e008      	b.n	8003b0a <HAL_DMA_Abort_IT+0x1ae>
 8003af8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003afc:	e005      	b.n	8003b0a <HAL_DMA_Abort_IT+0x1ae>
 8003afe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b02:	e002      	b.n	8003b0a <HAL_DMA_Abort_IT+0x1ae>
 8003b04:	2310      	movs	r3, #16
 8003b06:	e000      	b.n	8003b0a <HAL_DMA_Abort_IT+0x1ae>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	4a17      	ldr	r2, [pc, #92]	@ (8003b68 <HAL_DMA_Abort_IT+0x20c>)
 8003b0c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
    } 
  }
  return status;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40020080 	.word	0x40020080
 8003b3c:	40020008 	.word	0x40020008
 8003b40:	4002001c 	.word	0x4002001c
 8003b44:	40020030 	.word	0x40020030
 8003b48:	40020044 	.word	0x40020044
 8003b4c:	40020058 	.word	0x40020058
 8003b50:	4002006c 	.word	0x4002006c
 8003b54:	40020408 	.word	0x40020408
 8003b58:	4002041c 	.word	0x4002041c
 8003b5c:	40020430 	.word	0x40020430
 8003b60:	40020444 	.word	0x40020444
 8003b64:	40020400 	.word	0x40020400
 8003b68:	40020000 	.word	0x40020000

08003b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b08b      	sub	sp, #44	@ 0x2c
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b7e:	e179      	b.n	8003e74 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b80:	2201      	movs	r2, #1
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	f040 8168 	bne.w	8003e6e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4a96      	ldr	r2, [pc, #600]	@ (8003dfc <HAL_GPIO_Init+0x290>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d05e      	beq.n	8003c66 <HAL_GPIO_Init+0xfa>
 8003ba8:	4a94      	ldr	r2, [pc, #592]	@ (8003dfc <HAL_GPIO_Init+0x290>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d875      	bhi.n	8003c9a <HAL_GPIO_Init+0x12e>
 8003bae:	4a94      	ldr	r2, [pc, #592]	@ (8003e00 <HAL_GPIO_Init+0x294>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d058      	beq.n	8003c66 <HAL_GPIO_Init+0xfa>
 8003bb4:	4a92      	ldr	r2, [pc, #584]	@ (8003e00 <HAL_GPIO_Init+0x294>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d86f      	bhi.n	8003c9a <HAL_GPIO_Init+0x12e>
 8003bba:	4a92      	ldr	r2, [pc, #584]	@ (8003e04 <HAL_GPIO_Init+0x298>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d052      	beq.n	8003c66 <HAL_GPIO_Init+0xfa>
 8003bc0:	4a90      	ldr	r2, [pc, #576]	@ (8003e04 <HAL_GPIO_Init+0x298>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d869      	bhi.n	8003c9a <HAL_GPIO_Init+0x12e>
 8003bc6:	4a90      	ldr	r2, [pc, #576]	@ (8003e08 <HAL_GPIO_Init+0x29c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d04c      	beq.n	8003c66 <HAL_GPIO_Init+0xfa>
 8003bcc:	4a8e      	ldr	r2, [pc, #568]	@ (8003e08 <HAL_GPIO_Init+0x29c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d863      	bhi.n	8003c9a <HAL_GPIO_Init+0x12e>
 8003bd2:	4a8e      	ldr	r2, [pc, #568]	@ (8003e0c <HAL_GPIO_Init+0x2a0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d046      	beq.n	8003c66 <HAL_GPIO_Init+0xfa>
 8003bd8:	4a8c      	ldr	r2, [pc, #560]	@ (8003e0c <HAL_GPIO_Init+0x2a0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d85d      	bhi.n	8003c9a <HAL_GPIO_Init+0x12e>
 8003bde:	2b12      	cmp	r3, #18
 8003be0:	d82a      	bhi.n	8003c38 <HAL_GPIO_Init+0xcc>
 8003be2:	2b12      	cmp	r3, #18
 8003be4:	d859      	bhi.n	8003c9a <HAL_GPIO_Init+0x12e>
 8003be6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <HAL_GPIO_Init+0x80>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003c67 	.word	0x08003c67
 8003bf0:	08003c41 	.word	0x08003c41
 8003bf4:	08003c53 	.word	0x08003c53
 8003bf8:	08003c95 	.word	0x08003c95
 8003bfc:	08003c9b 	.word	0x08003c9b
 8003c00:	08003c9b 	.word	0x08003c9b
 8003c04:	08003c9b 	.word	0x08003c9b
 8003c08:	08003c9b 	.word	0x08003c9b
 8003c0c:	08003c9b 	.word	0x08003c9b
 8003c10:	08003c9b 	.word	0x08003c9b
 8003c14:	08003c9b 	.word	0x08003c9b
 8003c18:	08003c9b 	.word	0x08003c9b
 8003c1c:	08003c9b 	.word	0x08003c9b
 8003c20:	08003c9b 	.word	0x08003c9b
 8003c24:	08003c9b 	.word	0x08003c9b
 8003c28:	08003c9b 	.word	0x08003c9b
 8003c2c:	08003c9b 	.word	0x08003c9b
 8003c30:	08003c49 	.word	0x08003c49
 8003c34:	08003c5d 	.word	0x08003c5d
 8003c38:	4a75      	ldr	r2, [pc, #468]	@ (8003e10 <HAL_GPIO_Init+0x2a4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c3e:	e02c      	b.n	8003c9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	623b      	str	r3, [r7, #32]
          break;
 8003c46:	e029      	b.n	8003c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	623b      	str	r3, [r7, #32]
          break;
 8003c50:	e024      	b.n	8003c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	3308      	adds	r3, #8
 8003c58:	623b      	str	r3, [r7, #32]
          break;
 8003c5a:	e01f      	b.n	8003c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	330c      	adds	r3, #12
 8003c62:	623b      	str	r3, [r7, #32]
          break;
 8003c64:	e01a      	b.n	8003c9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c6e:	2304      	movs	r3, #4
 8003c70:	623b      	str	r3, [r7, #32]
          break;
 8003c72:	e013      	b.n	8003c9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	611a      	str	r2, [r3, #16]
          break;
 8003c86:	e009      	b.n	8003c9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c88:	2308      	movs	r3, #8
 8003c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	615a      	str	r2, [r3, #20]
          break;
 8003c92:	e003      	b.n	8003c9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c94:	2300      	movs	r3, #0
 8003c96:	623b      	str	r3, [r7, #32]
          break;
 8003c98:	e000      	b.n	8003c9c <HAL_GPIO_Init+0x130>
          break;
 8003c9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2bff      	cmp	r3, #255	@ 0xff
 8003ca0:	d801      	bhi.n	8003ca6 <HAL_GPIO_Init+0x13a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	e001      	b.n	8003caa <HAL_GPIO_Init+0x13e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2bff      	cmp	r3, #255	@ 0xff
 8003cb0:	d802      	bhi.n	8003cb8 <HAL_GPIO_Init+0x14c>
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	e002      	b.n	8003cbe <HAL_GPIO_Init+0x152>
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	3b08      	subs	r3, #8
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	210f      	movs	r1, #15
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	401a      	ands	r2, r3
 8003cd0:	6a39      	ldr	r1, [r7, #32]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80c1 	beq.w	8003e6e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cec:	4b49      	ldr	r3, [pc, #292]	@ (8003e14 <HAL_GPIO_Init+0x2a8>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	4a48      	ldr	r2, [pc, #288]	@ (8003e14 <HAL_GPIO_Init+0x2a8>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6193      	str	r3, [r2, #24]
 8003cf8:	4b46      	ldr	r3, [pc, #280]	@ (8003e14 <HAL_GPIO_Init+0x2a8>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d04:	4a44      	ldr	r2, [pc, #272]	@ (8003e18 <HAL_GPIO_Init+0x2ac>)
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	220f      	movs	r2, #15
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4013      	ands	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3c      	ldr	r2, [pc, #240]	@ (8003e1c <HAL_GPIO_Init+0x2b0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d01f      	beq.n	8003d70 <HAL_GPIO_Init+0x204>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a3b      	ldr	r2, [pc, #236]	@ (8003e20 <HAL_GPIO_Init+0x2b4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d019      	beq.n	8003d6c <HAL_GPIO_Init+0x200>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a3a      	ldr	r2, [pc, #232]	@ (8003e24 <HAL_GPIO_Init+0x2b8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <HAL_GPIO_Init+0x1fc>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a39      	ldr	r2, [pc, #228]	@ (8003e28 <HAL_GPIO_Init+0x2bc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00d      	beq.n	8003d64 <HAL_GPIO_Init+0x1f8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a38      	ldr	r2, [pc, #224]	@ (8003e2c <HAL_GPIO_Init+0x2c0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <HAL_GPIO_Init+0x1f4>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a37      	ldr	r2, [pc, #220]	@ (8003e30 <HAL_GPIO_Init+0x2c4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d101      	bne.n	8003d5c <HAL_GPIO_Init+0x1f0>
 8003d58:	2305      	movs	r3, #5
 8003d5a:	e00a      	b.n	8003d72 <HAL_GPIO_Init+0x206>
 8003d5c:	2306      	movs	r3, #6
 8003d5e:	e008      	b.n	8003d72 <HAL_GPIO_Init+0x206>
 8003d60:	2304      	movs	r3, #4
 8003d62:	e006      	b.n	8003d72 <HAL_GPIO_Init+0x206>
 8003d64:	2303      	movs	r3, #3
 8003d66:	e004      	b.n	8003d72 <HAL_GPIO_Init+0x206>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e002      	b.n	8003d72 <HAL_GPIO_Init+0x206>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_GPIO_Init+0x206>
 8003d70:	2300      	movs	r3, #0
 8003d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d74:	f002 0203 	and.w	r2, r2, #3
 8003d78:	0092      	lsls	r2, r2, #2
 8003d7a:	4093      	lsls	r3, r2
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d82:	4925      	ldr	r1, [pc, #148]	@ (8003e18 <HAL_GPIO_Init+0x2ac>)
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	3302      	adds	r3, #2
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d9c:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <HAL_GPIO_Init+0x2c8>)
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4924      	ldr	r1, [pc, #144]	@ (8003e34 <HAL_GPIO_Init+0x2c8>)
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]
 8003da8:	e006      	b.n	8003db8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003daa:	4b22      	ldr	r3, [pc, #136]	@ (8003e34 <HAL_GPIO_Init+0x2c8>)
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	4920      	ldr	r1, [pc, #128]	@ (8003e34 <HAL_GPIO_Init+0x2c8>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d006      	beq.n	8003dd2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e34 <HAL_GPIO_Init+0x2c8>)
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	491a      	ldr	r1, [pc, #104]	@ (8003e34 <HAL_GPIO_Init+0x2c8>)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60cb      	str	r3, [r1, #12]
 8003dd0:	e006      	b.n	8003de0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003dd2:	4b18      	ldr	r3, [pc, #96]	@ (8003e34 <HAL_GPIO_Init+0x2c8>)
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	4916      	ldr	r1, [pc, #88]	@ (8003e34 <HAL_GPIO_Init+0x2c8>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d025      	beq.n	8003e38 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003dec:	4b11      	ldr	r3, [pc, #68]	@ (8003e34 <HAL_GPIO_Init+0x2c8>)
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	4910      	ldr	r1, [pc, #64]	@ (8003e34 <HAL_GPIO_Init+0x2c8>)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	604b      	str	r3, [r1, #4]
 8003df8:	e025      	b.n	8003e46 <HAL_GPIO_Init+0x2da>
 8003dfa:	bf00      	nop
 8003dfc:	10320000 	.word	0x10320000
 8003e00:	10310000 	.word	0x10310000
 8003e04:	10220000 	.word	0x10220000
 8003e08:	10210000 	.word	0x10210000
 8003e0c:	10120000 	.word	0x10120000
 8003e10:	10110000 	.word	0x10110000
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40010800 	.word	0x40010800
 8003e20:	40010c00 	.word	0x40010c00
 8003e24:	40011000 	.word	0x40011000
 8003e28:	40011400 	.word	0x40011400
 8003e2c:	40011800 	.word	0x40011800
 8003e30:	40011c00 	.word	0x40011c00
 8003e34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e38:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <HAL_GPIO_Init+0x324>)
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	4913      	ldr	r1, [pc, #76]	@ (8003e90 <HAL_GPIO_Init+0x324>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e52:	4b0f      	ldr	r3, [pc, #60]	@ (8003e90 <HAL_GPIO_Init+0x324>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	490e      	ldr	r1, [pc, #56]	@ (8003e90 <HAL_GPIO_Init+0x324>)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]
 8003e5e:	e006      	b.n	8003e6e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <HAL_GPIO_Init+0x324>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	43db      	mvns	r3, r3
 8003e68:	4909      	ldr	r1, [pc, #36]	@ (8003e90 <HAL_GPIO_Init+0x324>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	3301      	adds	r3, #1
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f47f ae7e 	bne.w	8003b80 <HAL_GPIO_Init+0x14>
  }
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	372c      	adds	r7, #44	@ 0x2c
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr
 8003e90:	40010400 	.word	0x40010400

08003e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ea4:	787b      	ldrb	r3, [r7, #1]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eaa:	887a      	ldrh	r2, [r7, #2]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003eb0:	e003      	b.n	8003eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003eb2:	887b      	ldrh	r3, [r7, #2]
 8003eb4:	041a      	lsls	r2, r3, #16
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	611a      	str	r2, [r3, #16]
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ece:	4b08      	ldr	r3, [pc, #32]	@ (8003ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d006      	beq.n	8003ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eda:	4a05      	ldr	r2, [pc, #20]	@ (8003ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ee0:	88fb      	ldrh	r3, [r7, #6]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f806 	bl	8003ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40010400 	.word	0x40010400

08003ef4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e12b      	b.n	8004172 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff f8b4 	bl	800309c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2224      	movs	r2, #36	@ 0x24
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f6c:	f001 fbfc 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8003f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4a81      	ldr	r2, [pc, #516]	@ (800417c <HAL_I2C_Init+0x274>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d807      	bhi.n	8003f8c <HAL_I2C_Init+0x84>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4a80      	ldr	r2, [pc, #512]	@ (8004180 <HAL_I2C_Init+0x278>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	bf94      	ite	ls
 8003f84:	2301      	movls	r3, #1
 8003f86:	2300      	movhi	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e006      	b.n	8003f9a <HAL_I2C_Init+0x92>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a7d      	ldr	r2, [pc, #500]	@ (8004184 <HAL_I2C_Init+0x27c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bf94      	ite	ls
 8003f94:	2301      	movls	r3, #1
 8003f96:	2300      	movhi	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e0e7      	b.n	8004172 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4a78      	ldr	r2, [pc, #480]	@ (8004188 <HAL_I2C_Init+0x280>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	0c9b      	lsrs	r3, r3, #18
 8003fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a6a      	ldr	r2, [pc, #424]	@ (800417c <HAL_I2C_Init+0x274>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d802      	bhi.n	8003fdc <HAL_I2C_Init+0xd4>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	e009      	b.n	8003ff0 <HAL_I2C_Init+0xe8>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003fe2:	fb02 f303 	mul.w	r3, r2, r3
 8003fe6:	4a69      	ldr	r2, [pc, #420]	@ (800418c <HAL_I2C_Init+0x284>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	099b      	lsrs	r3, r3, #6
 8003fee:	3301      	adds	r3, #1
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004002:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	495c      	ldr	r1, [pc, #368]	@ (800417c <HAL_I2C_Init+0x274>)
 800400c:	428b      	cmp	r3, r1
 800400e:	d819      	bhi.n	8004044 <HAL_I2C_Init+0x13c>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1e59      	subs	r1, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	fbb1 f3f3 	udiv	r3, r1, r3
 800401e:	1c59      	adds	r1, r3, #1
 8004020:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004024:	400b      	ands	r3, r1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_I2C_Init+0x138>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1e59      	subs	r1, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fbb1 f3f3 	udiv	r3, r1, r3
 8004038:	3301      	adds	r3, #1
 800403a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403e:	e051      	b.n	80040e4 <HAL_I2C_Init+0x1dc>
 8004040:	2304      	movs	r3, #4
 8004042:	e04f      	b.n	80040e4 <HAL_I2C_Init+0x1dc>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <HAL_I2C_Init+0x168>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1e58      	subs	r0, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	440b      	add	r3, r1
 800405a:	fbb0 f3f3 	udiv	r3, r0, r3
 800405e:	3301      	adds	r3, #1
 8004060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e012      	b.n	8004096 <HAL_I2C_Init+0x18e>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1e58      	subs	r0, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	0099      	lsls	r1, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	fbb0 f3f3 	udiv	r3, r0, r3
 8004086:	3301      	adds	r3, #1
 8004088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_Init+0x196>
 800409a:	2301      	movs	r3, #1
 800409c:	e022      	b.n	80040e4 <HAL_I2C_Init+0x1dc>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10e      	bne.n	80040c4 <HAL_I2C_Init+0x1bc>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1e58      	subs	r0, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6859      	ldr	r1, [r3, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	440b      	add	r3, r1
 80040b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b8:	3301      	adds	r3, #1
 80040ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040c2:	e00f      	b.n	80040e4 <HAL_I2C_Init+0x1dc>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1e58      	subs	r0, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	0099      	lsls	r1, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040da:	3301      	adds	r3, #1
 80040dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	6809      	ldr	r1, [r1, #0]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004112:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6911      	ldr	r1, [r2, #16]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68d2      	ldr	r2, [r2, #12]
 800411e:	4311      	orrs	r1, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	430b      	orrs	r3, r1
 8004126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	000186a0 	.word	0x000186a0
 8004180:	001e847f 	.word	0x001e847f
 8004184:	003d08ff 	.word	0x003d08ff
 8004188:	431bde83 	.word	0x431bde83
 800418c:	10624dd3 	.word	0x10624dd3

08004190 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	461a      	mov	r2, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	817b      	strh	r3, [r7, #10]
 80041a2:	460b      	mov	r3, r1
 80041a4:	813b      	strh	r3, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041aa:	f7ff fa61 	bl	8003670 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	f040 80d9 	bne.w	8004370 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	2319      	movs	r3, #25
 80041c4:	2201      	movs	r2, #1
 80041c6:	496d      	ldr	r1, [pc, #436]	@ (800437c <HAL_I2C_Mem_Write+0x1ec>)
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 fccd 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
 80041d6:	e0cc      	b.n	8004372 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_I2C_Mem_Write+0x56>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e0c5      	b.n	8004372 <HAL_I2C_Mem_Write+0x1e2>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d007      	beq.n	800420c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800421a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2221      	movs	r2, #33	@ 0x21
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2240      	movs	r2, #64	@ 0x40
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a3a      	ldr	r2, [r7, #32]
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800423c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a4d      	ldr	r2, [pc, #308]	@ (8004380 <HAL_I2C_Mem_Write+0x1f0>)
 800424c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800424e:	88f8      	ldrh	r0, [r7, #6]
 8004250:	893a      	ldrh	r2, [r7, #8]
 8004252:	8979      	ldrh	r1, [r7, #10]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	4603      	mov	r3, r0
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fb04 	bl	800486c <I2C_RequestMemoryWrite>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d052      	beq.n	8004310 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e081      	b.n	8004372 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fd92 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	2b04      	cmp	r3, #4
 8004284:	d107      	bne.n	8004296 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e06b      	b.n	8004372 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d11b      	bne.n	8004310 <HAL_I2C_Mem_Write+0x180>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d017      	beq.n	8004310 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1aa      	bne.n	800426e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fd85 	bl	8004e2c <I2C_WaitOnBTFFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00d      	beq.n	8004344 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432c:	2b04      	cmp	r3, #4
 800432e:	d107      	bne.n	8004340 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800433e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e016      	b.n	8004372 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	00100002 	.word	0x00100002
 8004380:	ffff0000 	.word	0xffff0000

08004384 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08c      	sub	sp, #48	@ 0x30
 8004388:	af02      	add	r7, sp, #8
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	4608      	mov	r0, r1
 800438e:	4611      	mov	r1, r2
 8004390:	461a      	mov	r2, r3
 8004392:	4603      	mov	r3, r0
 8004394:	817b      	strh	r3, [r7, #10]
 8004396:	460b      	mov	r3, r1
 8004398:	813b      	strh	r3, [r7, #8]
 800439a:	4613      	mov	r3, r2
 800439c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043a2:	f7ff f965 	bl	8003670 <HAL_GetTick>
 80043a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	f040 8250 	bne.w	8004856 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	2319      	movs	r3, #25
 80043bc:	2201      	movs	r2, #1
 80043be:	4982      	ldr	r1, [pc, #520]	@ (80045c8 <HAL_I2C_Mem_Read+0x244>)
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fbd1 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
 80043ce:	e243      	b.n	8004858 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_I2C_Mem_Read+0x5a>
 80043da:	2302      	movs	r3, #2
 80043dc:	e23c      	b.n	8004858 <HAL_I2C_Mem_Read+0x4d4>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d007      	beq.n	8004404 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2222      	movs	r2, #34	@ 0x22
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2240      	movs	r2, #64	@ 0x40
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004434:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a62      	ldr	r2, [pc, #392]	@ (80045cc <HAL_I2C_Mem_Read+0x248>)
 8004444:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004446:	88f8      	ldrh	r0, [r7, #6]
 8004448:	893a      	ldrh	r2, [r7, #8]
 800444a:	8979      	ldrh	r1, [r7, #10]
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	4603      	mov	r3, r0
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fa9e 	bl	8004998 <I2C_RequestMemoryRead>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e1f8      	b.n	8004858 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446a:	2b00      	cmp	r3, #0
 800446c:	d113      	bne.n	8004496 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e1cc      	b.n	8004830 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449a:	2b01      	cmp	r3, #1
 800449c:	d11e      	bne.n	80044dc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044ae:	b672      	cpsid	i
}
 80044b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044d8:	b662      	cpsie	i
}
 80044da:	e035      	b.n	8004548 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d11e      	bne.n	8004522 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044f4:	b672      	cpsid	i
}
 80044f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800451c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800451e:	b662      	cpsie	i
}
 8004520:	e012      	b.n	8004548 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004530:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004548:	e172      	b.n	8004830 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454e:	2b03      	cmp	r3, #3
 8004550:	f200 811f 	bhi.w	8004792 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004558:	2b01      	cmp	r3, #1
 800455a:	d123      	bne.n	80045a4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800455e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fcab 	bl	8004ebc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e173      	b.n	8004858 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045a2:	e145      	b.n	8004830 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d152      	bne.n	8004652 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	2200      	movs	r2, #0
 80045b4:	4906      	ldr	r1, [pc, #24]	@ (80045d0 <HAL_I2C_Mem_Read+0x24c>)
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fad6 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e148      	b.n	8004858 <HAL_I2C_Mem_Read+0x4d4>
 80045c6:	bf00      	nop
 80045c8:	00100002 	.word	0x00100002
 80045cc:	ffff0000 	.word	0xffff0000
 80045d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80045d4:	b672      	cpsid	i
}
 80045d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800461a:	b662      	cpsie	i
}
 800461c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004650:	e0ee      	b.n	8004830 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004658:	2200      	movs	r2, #0
 800465a:	4981      	ldr	r1, [pc, #516]	@ (8004860 <HAL_I2C_Mem_Read+0x4dc>)
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fa83 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0f5      	b.n	8004858 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800467c:	b672      	cpsid	i
}
 800467e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004864 <HAL_I2C_Mem_Read+0x4e0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	08db      	lsrs	r3, r3, #3
 80046b8:	4a6b      	ldr	r2, [pc, #428]	@ (8004868 <HAL_I2C_Mem_Read+0x4e4>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	0a1a      	lsrs	r2, r3, #8
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	00da      	lsls	r2, r3, #3
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d118      	bne.n	800470a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80046fa:	b662      	cpsie	i
}
 80046fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e0a6      	b.n	8004858 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b04      	cmp	r3, #4
 8004716:	d1d9      	bne.n	80046cc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800475a:	b662      	cpsie	i
}
 800475c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004790:	e04e      	b.n	8004830 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004794:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fb90 	bl	8004ebc <I2C_WaitOnRXNEFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e058      	b.n	8004858 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d124      	bne.n	8004830 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d107      	bne.n	80047fe <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047fc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004834:	2b00      	cmp	r3, #0
 8004836:	f47f ae88 	bne.w	800454a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3728      	adds	r7, #40	@ 0x28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	00010004 	.word	0x00010004
 8004864:	20000008 	.word	0x20000008
 8004868:	14f8b589 	.word	0x14f8b589

0800486c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	4608      	mov	r0, r1
 8004876:	4611      	mov	r1, r2
 8004878:	461a      	mov	r2, r3
 800487a:	4603      	mov	r3, r0
 800487c:	817b      	strh	r3, [r7, #10]
 800487e:	460b      	mov	r3, r1
 8004880:	813b      	strh	r3, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004894:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	2200      	movs	r2, #0
 800489e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f960 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048bc:	d103      	bne.n	80048c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e05f      	b.n	800498a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ca:	897b      	ldrh	r3, [r7, #10]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	492d      	ldr	r1, [pc, #180]	@ (8004994 <I2C_RequestMemoryWrite+0x128>)
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f9bb 	bl	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e04c      	b.n	800498a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004908:	6a39      	ldr	r1, [r7, #32]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fa46 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	2b04      	cmp	r3, #4
 800491c:	d107      	bne.n	800492e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800492c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e02b      	b.n	800498a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004938:	893b      	ldrh	r3, [r7, #8]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	611a      	str	r2, [r3, #16]
 8004942:	e021      	b.n	8004988 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004944:	893b      	ldrh	r3, [r7, #8]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	b29b      	uxth	r3, r3
 800494a:	b2da      	uxtb	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004954:	6a39      	ldr	r1, [r7, #32]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 fa20 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00d      	beq.n	800497e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	2b04      	cmp	r3, #4
 8004968:	d107      	bne.n	800497a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004978:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e005      	b.n	800498a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800497e:	893b      	ldrh	r3, [r7, #8]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	00010002 	.word	0x00010002

08004998 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	4608      	mov	r0, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	461a      	mov	r2, r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	817b      	strh	r3, [r7, #10]
 80049aa:	460b      	mov	r3, r1
 80049ac:	813b      	strh	r3, [r7, #8]
 80049ae:	4613      	mov	r3, r2
 80049b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	2200      	movs	r2, #0
 80049da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f8c2 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f8:	d103      	bne.n	8004a02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e0aa      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a06:	897b      	ldrh	r3, [r7, #10]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	4952      	ldr	r1, [pc, #328]	@ (8004b64 <I2C_RequestMemoryRead+0x1cc>)
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f91d 	bl	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e097      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a44:	6a39      	ldr	r1, [r7, #32]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f9a8 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d107      	bne.n	8004a6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e076      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d105      	bne.n	8004a80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a74:	893b      	ldrh	r3, [r7, #8]
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	611a      	str	r2, [r3, #16]
 8004a7e:	e021      	b.n	8004ac4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a80:	893b      	ldrh	r3, [r7, #8]
 8004a82:	0a1b      	lsrs	r3, r3, #8
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a90:	6a39      	ldr	r1, [r7, #32]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f982 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d107      	bne.n	8004ab6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e050      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aba:	893b      	ldrh	r3, [r7, #8]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac6:	6a39      	ldr	r1, [r7, #32]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f967 	bl	8004d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00d      	beq.n	8004af0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d107      	bne.n	8004aec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e035      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004afe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f82b 	bl	8004b68 <I2C_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00d      	beq.n	8004b34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b26:	d103      	bne.n	8004b30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e013      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b34:	897b      	ldrh	r3, [r7, #10]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b46:	6a3a      	ldr	r2, [r7, #32]
 8004b48:	4906      	ldr	r1, [pc, #24]	@ (8004b64 <I2C_RequestMemoryRead+0x1cc>)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f886 	bl	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	00010002 	.word	0x00010002

08004b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	4613      	mov	r3, r2
 8004b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b78:	e048      	b.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d044      	beq.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b82:	f7fe fd75 	bl	8003670 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d302      	bcc.n	8004b98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d139      	bne.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	0c1b      	lsrs	r3, r3, #16
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10d      	bne.n	8004bbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	e00c      	b.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	43da      	mvns	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d116      	bne.n	8004c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e023      	b.n	8004c54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	0c1b      	lsrs	r3, r3, #16
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d10d      	bne.n	8004c32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	43da      	mvns	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4013      	ands	r3, r2
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	e00c      	b.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d093      	beq.n	8004b7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c6a:	e071      	b.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c7a:	d123      	bne.n	8004cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb0:	f043 0204 	orr.w	r2, r3, #4
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e067      	b.n	8004d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d041      	beq.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ccc:	f7fe fcd0 	bl	8003670 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d302      	bcc.n	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d136      	bne.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10c      	bne.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	43da      	mvns	r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	bf14      	ite	ne
 8004cfe:	2301      	movne	r3, #1
 8004d00:	2300      	moveq	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	e00b      	b.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	43da      	mvns	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4013      	ands	r3, r2
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf14      	ite	ne
 8004d18:	2301      	movne	r3, #1
 8004d1a:	2300      	moveq	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d016      	beq.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	f043 0220 	orr.w	r2, r3, #32
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e021      	b.n	8004d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	0c1b      	lsrs	r3, r3, #16
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d10c      	bne.n	8004d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	43da      	mvns	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4013      	ands	r3, r2
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	e00b      	b.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	43da      	mvns	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f47f af6d 	bne.w	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da8:	e034      	b.n	8004e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f8e3 	bl	8004f76 <I2C_IsAcknowledgeFailed>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e034      	b.n	8004e24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d028      	beq.n	8004e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fe fc55 	bl	8003670 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d11d      	bne.n	8004e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de2:	2b80      	cmp	r3, #128	@ 0x80
 8004de4:	d016      	beq.n	8004e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e00:	f043 0220 	orr.w	r2, r3, #32
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e007      	b.n	8004e24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1e:	2b80      	cmp	r3, #128	@ 0x80
 8004e20:	d1c3      	bne.n	8004daa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e38:	e034      	b.n	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f89b 	bl	8004f76 <I2C_IsAcknowledgeFailed>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e034      	b.n	8004eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d028      	beq.n	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fe fc0d 	bl	8003670 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11d      	bne.n	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d016      	beq.n	8004ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	f043 0220 	orr.w	r2, r3, #32
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e007      	b.n	8004eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d1c3      	bne.n	8004e3a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec8:	e049      	b.n	8004f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d119      	bne.n	8004f0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0210 	mvn.w	r2, #16
 8004ee0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e030      	b.n	8004f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0c:	f7fe fbb0 	bl	8003670 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d302      	bcc.n	8004f22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d11d      	bne.n	8004f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2c:	2b40      	cmp	r3, #64	@ 0x40
 8004f2e:	d016      	beq.n	8004f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e007      	b.n	8004f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f68:	2b40      	cmp	r3, #64	@ 0x40
 8004f6a:	d1ae      	bne.n	8004eca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f8c:	d11b      	bne.n	8004fc6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f96:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	f043 0204 	orr.w	r2, r3, #4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr
	...

08004fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e272      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 8087 	beq.w	8005102 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ff4:	4b92      	ldr	r3, [pc, #584]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 030c 	and.w	r3, r3, #12
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d00c      	beq.n	800501a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005000:	4b8f      	ldr	r3, [pc, #572]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 030c 	and.w	r3, r3, #12
 8005008:	2b08      	cmp	r3, #8
 800500a:	d112      	bne.n	8005032 <HAL_RCC_OscConfig+0x5e>
 800500c:	4b8c      	ldr	r3, [pc, #560]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005018:	d10b      	bne.n	8005032 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501a:	4b89      	ldr	r3, [pc, #548]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d06c      	beq.n	8005100 <HAL_RCC_OscConfig+0x12c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d168      	bne.n	8005100 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e24c      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800503a:	d106      	bne.n	800504a <HAL_RCC_OscConfig+0x76>
 800503c:	4b80      	ldr	r3, [pc, #512]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a7f      	ldr	r2, [pc, #508]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	e02e      	b.n	80050a8 <HAL_RCC_OscConfig+0xd4>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10c      	bne.n	800506c <HAL_RCC_OscConfig+0x98>
 8005052:	4b7b      	ldr	r3, [pc, #492]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a7a      	ldr	r2, [pc, #488]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	4b78      	ldr	r3, [pc, #480]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a77      	ldr	r2, [pc, #476]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005064:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	e01d      	b.n	80050a8 <HAL_RCC_OscConfig+0xd4>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005074:	d10c      	bne.n	8005090 <HAL_RCC_OscConfig+0xbc>
 8005076:	4b72      	ldr	r3, [pc, #456]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a71      	ldr	r2, [pc, #452]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 800507c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	4b6f      	ldr	r3, [pc, #444]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6e      	ldr	r2, [pc, #440]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e00b      	b.n	80050a8 <HAL_RCC_OscConfig+0xd4>
 8005090:	4b6b      	ldr	r3, [pc, #428]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a6a      	ldr	r2, [pc, #424]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	4b68      	ldr	r3, [pc, #416]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a67      	ldr	r2, [pc, #412]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 80050a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d013      	beq.n	80050d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b0:	f7fe fade 	bl	8003670 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b8:	f7fe fada 	bl	8003670 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b64      	cmp	r3, #100	@ 0x64
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e200      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0xe4>
 80050d6:	e014      	b.n	8005102 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d8:	f7fe faca 	bl	8003670 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e0:	f7fe fac6 	bl	8003670 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b64      	cmp	r3, #100	@ 0x64
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e1ec      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f2:	4b53      	ldr	r3, [pc, #332]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x10c>
 80050fe:	e000      	b.n	8005102 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d063      	beq.n	80051d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800510e:	4b4c      	ldr	r3, [pc, #304]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800511a:	4b49      	ldr	r3, [pc, #292]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	2b08      	cmp	r3, #8
 8005124:	d11c      	bne.n	8005160 <HAL_RCC_OscConfig+0x18c>
 8005126:	4b46      	ldr	r3, [pc, #280]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d116      	bne.n	8005160 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005132:	4b43      	ldr	r3, [pc, #268]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_RCC_OscConfig+0x176>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d001      	beq.n	800514a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e1c0      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514a:	4b3d      	ldr	r3, [pc, #244]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	4939      	ldr	r1, [pc, #228]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515e:	e03a      	b.n	80051d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d020      	beq.n	80051aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005168:	4b36      	ldr	r3, [pc, #216]	@ (8005244 <HAL_RCC_OscConfig+0x270>)
 800516a:	2201      	movs	r2, #1
 800516c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516e:	f7fe fa7f 	bl	8003670 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005176:	f7fe fa7b 	bl	8003670 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e1a1      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005188:	4b2d      	ldr	r3, [pc, #180]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005194:	4b2a      	ldr	r3, [pc, #168]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4927      	ldr	r1, [pc, #156]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	600b      	str	r3, [r1, #0]
 80051a8:	e015      	b.n	80051d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051aa:	4b26      	ldr	r3, [pc, #152]	@ (8005244 <HAL_RCC_OscConfig+0x270>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7fe fa5e 	bl	8003670 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b8:	f7fe fa5a 	bl	8003670 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e180      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d03a      	beq.n	8005258 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d019      	beq.n	800521e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ea:	4b17      	ldr	r3, [pc, #92]	@ (8005248 <HAL_RCC_OscConfig+0x274>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f0:	f7fe fa3e 	bl	8003670 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f8:	f7fe fa3a 	bl	8003670 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e160      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520a:	4b0d      	ldr	r3, [pc, #52]	@ (8005240 <HAL_RCC_OscConfig+0x26c>)
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005216:	2001      	movs	r0, #1
 8005218:	f000 face 	bl	80057b8 <RCC_Delay>
 800521c:	e01c      	b.n	8005258 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800521e:	4b0a      	ldr	r3, [pc, #40]	@ (8005248 <HAL_RCC_OscConfig+0x274>)
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005224:	f7fe fa24 	bl	8003670 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522a:	e00f      	b.n	800524c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800522c:	f7fe fa20 	bl	8003670 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d908      	bls.n	800524c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e146      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
 800523e:	bf00      	nop
 8005240:	40021000 	.word	0x40021000
 8005244:	42420000 	.word	0x42420000
 8005248:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800524c:	4b92      	ldr	r3, [pc, #584]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e9      	bne.n	800522c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 80a6 	beq.w	80053b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526a:	4b8b      	ldr	r3, [pc, #556]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10d      	bne.n	8005292 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	4b88      	ldr	r3, [pc, #544]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	4a87      	ldr	r2, [pc, #540]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005280:	61d3      	str	r3, [r2, #28]
 8005282:	4b85      	ldr	r3, [pc, #532]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528a:	60bb      	str	r3, [r7, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800528e:	2301      	movs	r3, #1
 8005290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005292:	4b82      	ldr	r3, [pc, #520]	@ (800549c <HAL_RCC_OscConfig+0x4c8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d118      	bne.n	80052d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800529e:	4b7f      	ldr	r3, [pc, #508]	@ (800549c <HAL_RCC_OscConfig+0x4c8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a7e      	ldr	r2, [pc, #504]	@ (800549c <HAL_RCC_OscConfig+0x4c8>)
 80052a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052aa:	f7fe f9e1 	bl	8003670 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b2:	f7fe f9dd 	bl	8003670 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b64      	cmp	r3, #100	@ 0x64
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e103      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c4:	4b75      	ldr	r3, [pc, #468]	@ (800549c <HAL_RCC_OscConfig+0x4c8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d106      	bne.n	80052e6 <HAL_RCC_OscConfig+0x312>
 80052d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	6213      	str	r3, [r2, #32]
 80052e4:	e02d      	b.n	8005342 <HAL_RCC_OscConfig+0x36e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0x334>
 80052ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	4a69      	ldr	r2, [pc, #420]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	6213      	str	r3, [r2, #32]
 80052fa:	4b67      	ldr	r3, [pc, #412]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	4a66      	ldr	r2, [pc, #408]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005300:	f023 0304 	bic.w	r3, r3, #4
 8005304:	6213      	str	r3, [r2, #32]
 8005306:	e01c      	b.n	8005342 <HAL_RCC_OscConfig+0x36e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	2b05      	cmp	r3, #5
 800530e:	d10c      	bne.n	800532a <HAL_RCC_OscConfig+0x356>
 8005310:	4b61      	ldr	r3, [pc, #388]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	4a60      	ldr	r2, [pc, #384]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005316:	f043 0304 	orr.w	r3, r3, #4
 800531a:	6213      	str	r3, [r2, #32]
 800531c:	4b5e      	ldr	r3, [pc, #376]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	4a5d      	ldr	r2, [pc, #372]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005322:	f043 0301 	orr.w	r3, r3, #1
 8005326:	6213      	str	r3, [r2, #32]
 8005328:	e00b      	b.n	8005342 <HAL_RCC_OscConfig+0x36e>
 800532a:	4b5b      	ldr	r3, [pc, #364]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	4a5a      	ldr	r2, [pc, #360]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	6213      	str	r3, [r2, #32]
 8005336:	4b58      	ldr	r3, [pc, #352]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	4a57      	ldr	r2, [pc, #348]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 800533c:	f023 0304 	bic.w	r3, r3, #4
 8005340:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d015      	beq.n	8005376 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800534a:	f7fe f991 	bl	8003670 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005350:	e00a      	b.n	8005368 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005352:	f7fe f98d 	bl	8003670 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005360:	4293      	cmp	r3, r2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e0b1      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005368:	4b4b      	ldr	r3, [pc, #300]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0ee      	beq.n	8005352 <HAL_RCC_OscConfig+0x37e>
 8005374:	e014      	b.n	80053a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005376:	f7fe f97b 	bl	8003670 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800537c:	e00a      	b.n	8005394 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537e:	f7fe f977 	bl	8003670 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538c:	4293      	cmp	r3, r2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e09b      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005394:	4b40      	ldr	r3, [pc, #256]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1ee      	bne.n	800537e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d105      	bne.n	80053b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a6:	4b3c      	ldr	r3, [pc, #240]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	4a3b      	ldr	r2, [pc, #236]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 80053ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 8087 	beq.w	80054ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053bc:	4b36      	ldr	r3, [pc, #216]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f003 030c 	and.w	r3, r3, #12
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d061      	beq.n	800548c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d146      	bne.n	800545e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d0:	4b33      	ldr	r3, [pc, #204]	@ (80054a0 <HAL_RCC_OscConfig+0x4cc>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d6:	f7fe f94b 	bl	8003670 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053de:	f7fe f947 	bl	8003670 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e06d      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f0:	4b29      	ldr	r3, [pc, #164]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005404:	d108      	bne.n	8005418 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005406:	4b24      	ldr	r3, [pc, #144]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	4921      	ldr	r1, [pc, #132]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005414:	4313      	orrs	r3, r2
 8005416:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005418:	4b1f      	ldr	r3, [pc, #124]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a19      	ldr	r1, [r3, #32]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	430b      	orrs	r3, r1
 800542a:	491b      	ldr	r1, [pc, #108]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 800542c:	4313      	orrs	r3, r2
 800542e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005430:	4b1b      	ldr	r3, [pc, #108]	@ (80054a0 <HAL_RCC_OscConfig+0x4cc>)
 8005432:	2201      	movs	r2, #1
 8005434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005436:	f7fe f91b 	bl	8003670 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543e:	f7fe f917 	bl	8003670 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e03d      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005450:	4b11      	ldr	r3, [pc, #68]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0f0      	beq.n	800543e <HAL_RCC_OscConfig+0x46a>
 800545c:	e035      	b.n	80054ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545e:	4b10      	ldr	r3, [pc, #64]	@ (80054a0 <HAL_RCC_OscConfig+0x4cc>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005464:	f7fe f904 	bl	8003670 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800546c:	f7fe f900 	bl	8003670 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e026      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <HAL_RCC_OscConfig+0x4c4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0x498>
 800548a:	e01e      	b.n	80054ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d107      	bne.n	80054a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e019      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
 8005498:	40021000 	.word	0x40021000
 800549c:	40007000 	.word	0x40007000
 80054a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054a4:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <HAL_RCC_OscConfig+0x500>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d106      	bne.n	80054c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d001      	beq.n	80054ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40021000 	.word	0x40021000

080054d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0d0      	b.n	800568e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005698 <HAL_RCC_ClockConfig+0x1c0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d910      	bls.n	800551c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fa:	4b67      	ldr	r3, [pc, #412]	@ (8005698 <HAL_RCC_ClockConfig+0x1c0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 0207 	bic.w	r2, r3, #7
 8005502:	4965      	ldr	r1, [pc, #404]	@ (8005698 <HAL_RCC_ClockConfig+0x1c0>)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	4313      	orrs	r3, r2
 8005508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800550a:	4b63      	ldr	r3, [pc, #396]	@ (8005698 <HAL_RCC_ClockConfig+0x1c0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d001      	beq.n	800551c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0b8      	b.n	800568e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d020      	beq.n	800556a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005534:	4b59      	ldr	r3, [pc, #356]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4a58      	ldr	r2, [pc, #352]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 800553a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800553e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800554c:	4b53      	ldr	r3, [pc, #332]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4a52      	ldr	r2, [pc, #328]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 8005552:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005556:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005558:	4b50      	ldr	r3, [pc, #320]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	494d      	ldr	r1, [pc, #308]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 8005566:	4313      	orrs	r3, r2
 8005568:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d040      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d107      	bne.n	800558e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557e:	4b47      	ldr	r3, [pc, #284]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d115      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e07f      	b.n	800568e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d107      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005596:	4b41      	ldr	r3, [pc, #260]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e073      	b.n	800568e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a6:	4b3d      	ldr	r3, [pc, #244]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e06b      	b.n	800568e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055b6:	4b39      	ldr	r3, [pc, #228]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f023 0203 	bic.w	r2, r3, #3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	4936      	ldr	r1, [pc, #216]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055c8:	f7fe f852 	bl	8003670 <HAL_GetTick>
 80055cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d0:	f7fe f84e 	bl	8003670 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e053      	b.n	800568e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e6:	4b2d      	ldr	r3, [pc, #180]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f003 020c 	and.w	r2, r3, #12
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d1eb      	bne.n	80055d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055f8:	4b27      	ldr	r3, [pc, #156]	@ (8005698 <HAL_RCC_ClockConfig+0x1c0>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d210      	bcs.n	8005628 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005606:	4b24      	ldr	r3, [pc, #144]	@ (8005698 <HAL_RCC_ClockConfig+0x1c0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f023 0207 	bic.w	r2, r3, #7
 800560e:	4922      	ldr	r1, [pc, #136]	@ (8005698 <HAL_RCC_ClockConfig+0x1c0>)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	4313      	orrs	r3, r2
 8005614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005616:	4b20      	ldr	r3, [pc, #128]	@ (8005698 <HAL_RCC_ClockConfig+0x1c0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d001      	beq.n	8005628 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e032      	b.n	800568e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005634:	4b19      	ldr	r3, [pc, #100]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4916      	ldr	r1, [pc, #88]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 8005642:	4313      	orrs	r3, r2
 8005644:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005652:	4b12      	ldr	r3, [pc, #72]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	490e      	ldr	r1, [pc, #56]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 8005662:	4313      	orrs	r3, r2
 8005664:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005666:	f000 f821 	bl	80056ac <HAL_RCC_GetSysClockFreq>
 800566a:	4602      	mov	r2, r0
 800566c:	4b0b      	ldr	r3, [pc, #44]	@ (800569c <HAL_RCC_ClockConfig+0x1c4>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	490a      	ldr	r1, [pc, #40]	@ (80056a0 <HAL_RCC_ClockConfig+0x1c8>)
 8005678:	5ccb      	ldrb	r3, [r1, r3]
 800567a:	fa22 f303 	lsr.w	r3, r2, r3
 800567e:	4a09      	ldr	r2, [pc, #36]	@ (80056a4 <HAL_RCC_ClockConfig+0x1cc>)
 8005680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005682:	4b09      	ldr	r3, [pc, #36]	@ (80056a8 <HAL_RCC_ClockConfig+0x1d0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f7fd ffb0 	bl	80035ec <HAL_InitTick>

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40022000 	.word	0x40022000
 800569c:	40021000 	.word	0x40021000
 80056a0:	0800c5c4 	.word	0x0800c5c4
 80056a4:	20000008 	.word	0x20000008
 80056a8:	2000000c 	.word	0x2000000c

080056ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	2300      	movs	r3, #0
 80056c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x94>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 030c 	and.w	r3, r3, #12
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d002      	beq.n	80056dc <HAL_RCC_GetSysClockFreq+0x30>
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d003      	beq.n	80056e2 <HAL_RCC_GetSysClockFreq+0x36>
 80056da:	e027      	b.n	800572c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056dc:	4b19      	ldr	r3, [pc, #100]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x98>)
 80056de:	613b      	str	r3, [r7, #16]
      break;
 80056e0:	e027      	b.n	8005732 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	0c9b      	lsrs	r3, r3, #18
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	4a17      	ldr	r2, [pc, #92]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056ec:	5cd3      	ldrb	r3, [r2, r3]
 80056ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d010      	beq.n	800571c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056fa:	4b11      	ldr	r3, [pc, #68]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x94>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	0c5b      	lsrs	r3, r3, #17
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	4a11      	ldr	r2, [pc, #68]	@ (800574c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005706:	5cd3      	ldrb	r3, [r2, r3]
 8005708:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a0d      	ldr	r2, [pc, #52]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x98>)
 800570e:	fb03 f202 	mul.w	r2, r3, r2
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	fbb2 f3f3 	udiv	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	e004      	b.n	8005726 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a0c      	ldr	r2, [pc, #48]	@ (8005750 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005720:	fb02 f303 	mul.w	r3, r2, r3
 8005724:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	613b      	str	r3, [r7, #16]
      break;
 800572a:	e002      	b.n	8005732 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800572c:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x98>)
 800572e:	613b      	str	r3, [r7, #16]
      break;
 8005730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005732:	693b      	ldr	r3, [r7, #16]
}
 8005734:	4618      	mov	r0, r3
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000
 8005744:	007a1200 	.word	0x007a1200
 8005748:	0800c5dc 	.word	0x0800c5dc
 800574c:	0800c5ec 	.word	0x0800c5ec
 8005750:	003d0900 	.word	0x003d0900

08005754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005758:	4b02      	ldr	r3, [pc, #8]	@ (8005764 <HAL_RCC_GetHCLKFreq+0x10>)
 800575a:	681b      	ldr	r3, [r3, #0]
}
 800575c:	4618      	mov	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr
 8005764:	20000008 	.word	0x20000008

08005768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800576c:	f7ff fff2 	bl	8005754 <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b05      	ldr	r3, [pc, #20]	@ (8005788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4903      	ldr	r1, [pc, #12]	@ (800578c <HAL_RCC_GetPCLK1Freq+0x24>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40021000 	.word	0x40021000
 800578c:	0800c5d4 	.word	0x0800c5d4

08005790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005794:	f7ff ffde 	bl	8005754 <HAL_RCC_GetHCLKFreq>
 8005798:	4602      	mov	r2, r0
 800579a:	4b05      	ldr	r3, [pc, #20]	@ (80057b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	0adb      	lsrs	r3, r3, #11
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	4903      	ldr	r1, [pc, #12]	@ (80057b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a6:	5ccb      	ldrb	r3, [r1, r3]
 80057a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40021000 	.word	0x40021000
 80057b4:	0800c5d4 	.word	0x0800c5d4

080057b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057c0:	4b0a      	ldr	r3, [pc, #40]	@ (80057ec <RCC_Delay+0x34>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	@ (80057f0 <RCC_Delay+0x38>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	0a5b      	lsrs	r3, r3, #9
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057d4:	bf00      	nop
  }
  while (Delay --);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1e5a      	subs	r2, r3, #1
 80057da:	60fa      	str	r2, [r7, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1f9      	bne.n	80057d4 <RCC_Delay+0x1c>
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr
 80057ec:	20000008 	.word	0x20000008
 80057f0:	10624dd3 	.word	0x10624dd3

080057f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e076      	b.n	80058f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	2b00      	cmp	r3, #0
 800580c:	d108      	bne.n	8005820 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005816:	d009      	beq.n	800582c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	61da      	str	r2, [r3, #28]
 800581e:	e005      	b.n	800582c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fd fc78 	bl	800313c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005862:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b0:	ea42 0103 	orr.w	r1, r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	0c1a      	lsrs	r2, r3, #16
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f002 0204 	and.w	r2, r2, #4
 80058d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69da      	ldr	r2, [r3, #28]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800590c:	f7fd feb0 	bl	8003670 <HAL_GetTick>
 8005910:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	d001      	beq.n	8005926 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005922:	2302      	movs	r3, #2
 8005924:	e12a      	b.n	8005b7c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_SPI_Transmit+0x36>
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e122      	b.n	8005b7c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_SPI_Transmit+0x48>
 8005940:	2302      	movs	r3, #2
 8005942:	e11b      	b.n	8005b7c <HAL_SPI_Transmit+0x280>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2203      	movs	r2, #3
 8005950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	88fa      	ldrh	r2, [r7, #6]
 8005964:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	88fa      	ldrh	r2, [r7, #6]
 800596a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005992:	d10f      	bne.n	80059b4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059be:	2b40      	cmp	r3, #64	@ 0x40
 80059c0:	d007      	beq.n	80059d2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059da:	d152      	bne.n	8005a82 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_SPI_Transmit+0xee>
 80059e4:	8b7b      	ldrh	r3, [r7, #26]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d145      	bne.n	8005a76 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ee:	881a      	ldrh	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fa:	1c9a      	adds	r2, r3, #2
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a0e:	e032      	b.n	8005a76 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d112      	bne.n	8005a44 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	881a      	ldrh	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2e:	1c9a      	adds	r2, r3, #2
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a42:	e018      	b.n	8005a76 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a44:	f7fd fe14 	bl	8003670 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d803      	bhi.n	8005a5c <HAL_SPI_Transmit+0x160>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d102      	bne.n	8005a62 <HAL_SPI_Transmit+0x166>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e082      	b.n	8005b7c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1c7      	bne.n	8005a10 <HAL_SPI_Transmit+0x114>
 8005a80:	e053      	b.n	8005b2a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_SPI_Transmit+0x194>
 8005a8a:	8b7b      	ldrh	r3, [r7, #26]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d147      	bne.n	8005b20 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ab6:	e033      	b.n	8005b20 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d113      	bne.n	8005aee <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	7812      	ldrb	r2, [r2, #0]
 8005ad2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005aec:	e018      	b.n	8005b20 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aee:	f7fd fdbf 	bl	8003670 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d803      	bhi.n	8005b06 <HAL_SPI_Transmit+0x20a>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b04:	d102      	bne.n	8005b0c <HAL_SPI_Transmit+0x210>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e02d      	b.n	8005b7c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1c6      	bne.n	8005ab8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f8b0 	bl	8005c94 <SPI_EndRxTxTransaction>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3720      	adds	r7, #32
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b94:	f7fd fd6c 	bl	8003670 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ba4:	f7fd fd64 	bl	8003670 <HAL_GetTick>
 8005ba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005baa:	4b39      	ldr	r3, [pc, #228]	@ (8005c90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	015b      	lsls	r3, r3, #5
 8005bb0:	0d1b      	lsrs	r3, r3, #20
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bba:	e054      	b.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d050      	beq.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bc4:	f7fd fd54 	bl	8003670 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d902      	bls.n	8005bda <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d13d      	bne.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bf2:	d111      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bfc:	d004      	beq.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c06:	d107      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c20:	d10f      	bne.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e017      	b.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d19b      	bne.n	8005bbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000008 	.word	0x20000008

08005c94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	2102      	movs	r1, #2
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff ff6a 	bl	8005b84 <SPI_WaitFlagStateUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cba:	f043 0220 	orr.w	r2, r3, #32
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e013      	b.n	8005cee <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2180      	movs	r1, #128	@ 0x80
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff ff57 	bl	8005b84 <SPI_WaitFlagStateUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d007      	beq.n	8005cec <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce0:	f043 0220 	orr.w	r2, r3, #32
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e000      	b.n	8005cee <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b082      	sub	sp, #8
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e042      	b.n	8005d8e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d106      	bne.n	8005d22 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7fd fa57 	bl	80031d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2224      	movs	r2, #36	@ 0x24
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d38:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fdb8 	bl	80068b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d5e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d6e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b08a      	sub	sp, #40	@ 0x28
 8005d9a:	af02      	add	r7, sp, #8
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d175      	bne.n	8005ea2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_UART_Transmit+0x2c>
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e06e      	b.n	8005ea4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2221      	movs	r2, #33	@ 0x21
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dd4:	f7fd fc4c 	bl	8003670 <HAL_GetTick>
 8005dd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	88fa      	ldrh	r2, [r7, #6]
 8005dde:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	88fa      	ldrh	r2, [r7, #6]
 8005de4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dee:	d108      	bne.n	8005e02 <HAL_UART_Transmit+0x6c>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	e003      	b.n	8005e0a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e0a:	e02e      	b.n	8005e6a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2200      	movs	r2, #0
 8005e14:	2180      	movs	r1, #128	@ 0x80
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fb1d 	bl	8006456 <UART_WaitOnFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e03a      	b.n	8005ea4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10b      	bne.n	8005e4c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e42:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	3302      	adds	r3, #2
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e007      	b.n	8005e5c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	781a      	ldrb	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1cb      	bne.n	8005e0c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2140      	movs	r1, #64	@ 0x40
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fae9 	bl	8006456 <UART_WaitOnFlagUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e006      	b.n	8005ea4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e000      	b.n	8005ea4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
  }
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d112      	bne.n	8005eec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <HAL_UART_Receive_IT+0x26>
 8005ecc:	88fb      	ldrh	r3, [r7, #6]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e00b      	b.n	8005eee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fb10 	bl	8006508 <UART_Start_Receive_IT>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	e000      	b.n	8005eee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
  }
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b0ba      	sub	sp, #232	@ 0xe8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10f      	bne.n	8005f5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <HAL_UART_IRQHandler+0x66>
 8005f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fbec 	bl	8006734 <UART_Receive_IT>
      return;
 8005f5c:	e25b      	b.n	8006416 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80de 	beq.w	8006124 <HAL_UART_IRQHandler+0x22c>
 8005f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d106      	bne.n	8005f82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80d1 	beq.w	8006124 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <HAL_UART_IRQHandler+0xae>
 8005f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00b      	beq.n	8005fca <HAL_UART_IRQHandler+0xd2>
 8005fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc2:	f043 0202 	orr.w	r2, r3, #2
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00b      	beq.n	8005fee <HAL_UART_IRQHandler+0xf6>
 8005fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe6:	f043 0204 	orr.w	r2, r3, #4
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d011      	beq.n	800601e <HAL_UART_IRQHandler+0x126>
 8005ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b00      	cmp	r3, #0
 8006004:	d105      	bne.n	8006012 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006016:	f043 0208 	orr.w	r2, r3, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 81f2 	beq.w	800640c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d008      	beq.n	8006046 <HAL_UART_IRQHandler+0x14e>
 8006034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fb77 	bl	8006734 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	bf14      	ite	ne
 8006054:	2301      	movne	r3, #1
 8006056:	2300      	moveq	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d103      	bne.n	8006072 <HAL_UART_IRQHandler+0x17a>
 800606a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800606e:	2b00      	cmp	r3, #0
 8006070:	d04f      	beq.n	8006112 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fa81 	bl	800657a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d041      	beq.n	800610a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3314      	adds	r3, #20
 800608c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800609c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80060b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1d9      	bne.n	8006086 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d013      	beq.n	8006102 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060de:	4a7e      	ldr	r2, [pc, #504]	@ (80062d8 <HAL_UART_IRQHandler+0x3e0>)
 80060e0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fd fc38 	bl	800395c <HAL_DMA_Abort_IT>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80060fc:	4610      	mov	r0, r2
 80060fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006100:	e00e      	b.n	8006120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f993 	bl	800642e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006108:	e00a      	b.n	8006120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f98f 	bl	800642e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006110:	e006      	b.n	8006120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f98b 	bl	800642e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800611e:	e175      	b.n	800640c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006120:	bf00      	nop
    return;
 8006122:	e173      	b.n	800640c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006128:	2b01      	cmp	r3, #1
 800612a:	f040 814f 	bne.w	80063cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800612e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006132:	f003 0310 	and.w	r3, r3, #16
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 8148 	beq.w	80063cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800613c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8141 	beq.w	80063cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800614a:	2300      	movs	r3, #0
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60bb      	str	r3, [r7, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80b6 	beq.w	80062dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800617c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8145 	beq.w	8006410 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800618a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800618e:	429a      	cmp	r2, r3
 8006190:	f080 813e 	bcs.w	8006410 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800619a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	f000 8088 	beq.w	80062b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	330c      	adds	r3, #12
 80061ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	330c      	adds	r3, #12
 80061d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80061d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1d9      	bne.n	80061a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3314      	adds	r3, #20
 80061fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006204:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3314      	adds	r3, #20
 8006214:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006218:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800621c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006220:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800622a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e1      	bne.n	80061f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3314      	adds	r3, #20
 8006236:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3314      	adds	r3, #20
 8006250:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006254:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006256:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800625a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e3      	bne.n	8006230 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006288:	f023 0310 	bic.w	r3, r3, #16
 800628c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	330c      	adds	r3, #12
 8006296:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800629a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800629c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e3      	bne.n	8006276 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fd fb17 	bl	80038e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f8b6 	bl	8006440 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062d4:	e09c      	b.n	8006410 <HAL_UART_IRQHandler+0x518>
 80062d6:	bf00      	nop
 80062d8:	0800663f 	.word	0x0800663f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 808e 	beq.w	8006414 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80062f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8089 	beq.w	8006414 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006314:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006318:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006326:	647a      	str	r2, [r7, #68]	@ 0x44
 8006328:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800632c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e3      	bne.n	8006302 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3314      	adds	r3, #20
 8006340:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	623b      	str	r3, [r7, #32]
   return(result);
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3314      	adds	r3, #20
 800635a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800635e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006360:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e3      	bne.n	800633a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	330c      	adds	r3, #12
 8006386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0310 	bic.w	r3, r3, #16
 8006396:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80063a4:	61fa      	str	r2, [r7, #28]
 80063a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	69b9      	ldr	r1, [r7, #24]
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	617b      	str	r3, [r7, #20]
   return(result);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e3      	bne.n	8006380 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f83b 	bl	8006440 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063ca:	e023      	b.n	8006414 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <HAL_UART_IRQHandler+0x4f4>
 80063d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f93e 	bl	8006666 <UART_Transmit_IT>
    return;
 80063ea:	e014      	b.n	8006416 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00e      	beq.n	8006416 <HAL_UART_IRQHandler+0x51e>
 80063f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f97d 	bl	8006704 <UART_EndTransmit_IT>
    return;
 800640a:	e004      	b.n	8006416 <HAL_UART_IRQHandler+0x51e>
    return;
 800640c:	bf00      	nop
 800640e:	e002      	b.n	8006416 <HAL_UART_IRQHandler+0x51e>
      return;
 8006410:	bf00      	nop
 8006412:	e000      	b.n	8006416 <HAL_UART_IRQHandler+0x51e>
      return;
 8006414:	bf00      	nop
  }
}
 8006416:	37e8      	adds	r7, #232	@ 0xe8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr

0800642e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	bc80      	pop	{r7}
 8006454:	4770      	bx	lr

08006456 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b086      	sub	sp, #24
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	603b      	str	r3, [r7, #0]
 8006462:	4613      	mov	r3, r2
 8006464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006466:	e03b      	b.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646e:	d037      	beq.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006470:	f7fd f8fe 	bl	8003670 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	429a      	cmp	r2, r3
 800647e:	d302      	bcc.n	8006486 <UART_WaitOnFlagUntilTimeout+0x30>
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e03a      	b.n	8006500 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b00      	cmp	r3, #0
 8006496:	d023      	beq.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2b80      	cmp	r3, #128	@ 0x80
 800649c:	d020      	beq.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b40      	cmp	r3, #64	@ 0x40
 80064a2:	d01d      	beq.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d116      	bne.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f856 	bl	800657a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2208      	movs	r2, #8
 80064d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e00f      	b.n	8006500 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	4013      	ands	r3, r2
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	bf0c      	ite	eq
 80064f0:	2301      	moveq	r3, #1
 80064f2:	2300      	movne	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d0b4      	beq.n	8006468 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2222      	movs	r2, #34	@ 0x22
 8006532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800654c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695a      	ldr	r2, [r3, #20]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0201 	orr.w	r2, r2, #1
 800655c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0220 	orr.w	r2, r2, #32
 800656c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr

0800657a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800657a:	b480      	push	{r7}
 800657c:	b095      	sub	sp, #84	@ 0x54
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	330c      	adds	r3, #12
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006598:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	330c      	adds	r3, #12
 80065a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80065a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e5      	bne.n	8006582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3314      	adds	r3, #20
 80065bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f023 0301 	bic.w	r3, r3, #1
 80065cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3314      	adds	r3, #20
 80065d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e5      	bne.n	80065b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d119      	bne.n	8006626 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	60bb      	str	r3, [r7, #8]
   return(result);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f023 0310 	bic.w	r3, r3, #16
 8006608:	647b      	str	r3, [r7, #68]	@ 0x44
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	330c      	adds	r3, #12
 8006610:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006612:	61ba      	str	r2, [r7, #24]
 8006614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6979      	ldr	r1, [r7, #20]
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	613b      	str	r3, [r7, #16]
   return(result);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e5      	bne.n	80065f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006634:	bf00      	nop
 8006636:	3754      	adds	r7, #84	@ 0x54
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr

0800663e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fee8 	bl	800642e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800665e:	bf00      	nop
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b21      	cmp	r3, #33	@ 0x21
 8006678:	d13e      	bne.n	80066f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006682:	d114      	bne.n	80066ae <UART_Transmit_IT+0x48>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d110      	bne.n	80066ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	1c9a      	adds	r2, r3, #2
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	621a      	str	r2, [r3, #32]
 80066ac:	e008      	b.n	80066c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	1c59      	adds	r1, r3, #1
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6211      	str	r1, [r2, #32]
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4619      	mov	r1, r3
 80066ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10f      	bne.n	80066f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066f8:	2302      	movs	r3, #2
  }
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr

08006704 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800671a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff fe79 	bl	800641c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08c      	sub	sp, #48	@ 0x30
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b22      	cmp	r3, #34	@ 0x22
 8006746:	f040 80ae 	bne.w	80068a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006752:	d117      	bne.n	8006784 <UART_Receive_IT+0x50>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d113      	bne.n	8006784 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800675c:	2300      	movs	r3, #0
 800675e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006764:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006772:	b29a      	uxth	r2, r3
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677c:	1c9a      	adds	r2, r3, #2
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	629a      	str	r2, [r3, #40]	@ 0x28
 8006782:	e026      	b.n	80067d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006788:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800678a:	2300      	movs	r3, #0
 800678c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006796:	d007      	beq.n	80067a8 <UART_Receive_IT+0x74>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <UART_Receive_IT+0x82>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d106      	bne.n	80067b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	e008      	b.n	80067c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29b      	uxth	r3, r3
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	4619      	mov	r1, r3
 80067e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d15d      	bne.n	80068a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0220 	bic.w	r2, r2, #32
 80067f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006804:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695a      	ldr	r2, [r3, #20]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0201 	bic.w	r2, r2, #1
 8006814:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006828:	2b01      	cmp	r3, #1
 800682a:	d135      	bne.n	8006898 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	613b      	str	r3, [r7, #16]
   return(result);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f023 0310 	bic.w	r3, r3, #16
 8006848:	627b      	str	r3, [r7, #36]	@ 0x24
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	330c      	adds	r3, #12
 8006850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006852:	623a      	str	r2, [r7, #32]
 8006854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	69f9      	ldr	r1, [r7, #28]
 8006858:	6a3a      	ldr	r2, [r7, #32]
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e5      	bne.n	8006832 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b10      	cmp	r3, #16
 8006872:	d10a      	bne.n	800688a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff fdd5 	bl	8006440 <HAL_UARTEx_RxEventCallback>
 8006896:	e002      	b.n	800689e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7fc f869 	bl	8002970 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	e002      	b.n	80068a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e000      	b.n	80068a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80068a6:	2302      	movs	r3, #2
  }
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3730      	adds	r7, #48	@ 0x30
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80068ea:	f023 030c 	bic.w	r3, r3, #12
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	430b      	orrs	r3, r1
 80068f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a2c      	ldr	r2, [pc, #176]	@ (80069c4 <UART_SetConfig+0x114>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d103      	bne.n	8006920 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006918:	f7fe ff3a 	bl	8005790 <HAL_RCC_GetPCLK2Freq>
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	e002      	b.n	8006926 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006920:	f7fe ff22 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8006924:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009a      	lsls	r2, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	fbb2 f3f3 	udiv	r3, r2, r3
 800693c:	4a22      	ldr	r2, [pc, #136]	@ (80069c8 <UART_SetConfig+0x118>)
 800693e:	fba2 2303 	umull	r2, r3, r2, r3
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	0119      	lsls	r1, r3, #4
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009a      	lsls	r2, r3, #2
 8006950:	441a      	add	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	fbb2 f2f3 	udiv	r2, r2, r3
 800695c:	4b1a      	ldr	r3, [pc, #104]	@ (80069c8 <UART_SetConfig+0x118>)
 800695e:	fba3 0302 	umull	r0, r3, r3, r2
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	2064      	movs	r0, #100	@ 0x64
 8006966:	fb00 f303 	mul.w	r3, r0, r3
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	3332      	adds	r3, #50	@ 0x32
 8006970:	4a15      	ldr	r2, [pc, #84]	@ (80069c8 <UART_SetConfig+0x118>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	095b      	lsrs	r3, r3, #5
 8006978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800697c:	4419      	add	r1, r3
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4613      	mov	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	009a      	lsls	r2, r3, #2
 8006988:	441a      	add	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	fbb2 f2f3 	udiv	r2, r2, r3
 8006994:	4b0c      	ldr	r3, [pc, #48]	@ (80069c8 <UART_SetConfig+0x118>)
 8006996:	fba3 0302 	umull	r0, r3, r3, r2
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	2064      	movs	r0, #100	@ 0x64
 800699e:	fb00 f303 	mul.w	r3, r0, r3
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	3332      	adds	r3, #50	@ 0x32
 80069a8:	4a07      	ldr	r2, [pc, #28]	@ (80069c8 <UART_SetConfig+0x118>)
 80069aa:	fba2 2303 	umull	r2, r3, r2, r3
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	f003 020f 	and.w	r2, r3, #15
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	440a      	add	r2, r1
 80069ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40013800 	.word	0x40013800
 80069c8:	51eb851f 	.word	0x51eb851f

080069cc <__cvt>:
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d2:	461d      	mov	r5, r3
 80069d4:	bfbb      	ittet	lt
 80069d6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80069da:	461d      	movlt	r5, r3
 80069dc:	2300      	movge	r3, #0
 80069de:	232d      	movlt	r3, #45	@ 0x2d
 80069e0:	b088      	sub	sp, #32
 80069e2:	4614      	mov	r4, r2
 80069e4:	bfb8      	it	lt
 80069e6:	4614      	movlt	r4, r2
 80069e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80069ea:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80069ec:	7013      	strb	r3, [r2, #0]
 80069ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80069f4:	f023 0820 	bic.w	r8, r3, #32
 80069f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069fc:	d005      	beq.n	8006a0a <__cvt+0x3e>
 80069fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a02:	d100      	bne.n	8006a06 <__cvt+0x3a>
 8006a04:	3601      	adds	r6, #1
 8006a06:	2302      	movs	r3, #2
 8006a08:	e000      	b.n	8006a0c <__cvt+0x40>
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	aa07      	add	r2, sp, #28
 8006a0e:	9204      	str	r2, [sp, #16]
 8006a10:	aa06      	add	r2, sp, #24
 8006a12:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a16:	e9cd 3600 	strd	r3, r6, [sp]
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	f001 f8bf 	bl	8007ba0 <_dtoa_r>
 8006a22:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006a26:	4607      	mov	r7, r0
 8006a28:	d119      	bne.n	8006a5e <__cvt+0x92>
 8006a2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a2c:	07db      	lsls	r3, r3, #31
 8006a2e:	d50e      	bpl.n	8006a4e <__cvt+0x82>
 8006a30:	eb00 0906 	add.w	r9, r0, r6
 8006a34:	2200      	movs	r2, #0
 8006a36:	2300      	movs	r3, #0
 8006a38:	4620      	mov	r0, r4
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	f7fa f820 	bl	8000a80 <__aeabi_dcmpeq>
 8006a40:	b108      	cbz	r0, 8006a46 <__cvt+0x7a>
 8006a42:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a46:	2230      	movs	r2, #48	@ 0x30
 8006a48:	9b07      	ldr	r3, [sp, #28]
 8006a4a:	454b      	cmp	r3, r9
 8006a4c:	d31e      	bcc.n	8006a8c <__cvt+0xc0>
 8006a4e:	4638      	mov	r0, r7
 8006a50:	9b07      	ldr	r3, [sp, #28]
 8006a52:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006a54:	1bdb      	subs	r3, r3, r7
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	b008      	add	sp, #32
 8006a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a62:	eb00 0906 	add.w	r9, r0, r6
 8006a66:	d1e5      	bne.n	8006a34 <__cvt+0x68>
 8006a68:	7803      	ldrb	r3, [r0, #0]
 8006a6a:	2b30      	cmp	r3, #48	@ 0x30
 8006a6c:	d10a      	bne.n	8006a84 <__cvt+0xb8>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2300      	movs	r3, #0
 8006a72:	4620      	mov	r0, r4
 8006a74:	4629      	mov	r1, r5
 8006a76:	f7fa f803 	bl	8000a80 <__aeabi_dcmpeq>
 8006a7a:	b918      	cbnz	r0, 8006a84 <__cvt+0xb8>
 8006a7c:	f1c6 0601 	rsb	r6, r6, #1
 8006a80:	f8ca 6000 	str.w	r6, [sl]
 8006a84:	f8da 3000 	ldr.w	r3, [sl]
 8006a88:	4499      	add	r9, r3
 8006a8a:	e7d3      	b.n	8006a34 <__cvt+0x68>
 8006a8c:	1c59      	adds	r1, r3, #1
 8006a8e:	9107      	str	r1, [sp, #28]
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	e7d9      	b.n	8006a48 <__cvt+0x7c>

08006a94 <__exponent>:
 8006a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a96:	2900      	cmp	r1, #0
 8006a98:	bfb6      	itet	lt
 8006a9a:	232d      	movlt	r3, #45	@ 0x2d
 8006a9c:	232b      	movge	r3, #43	@ 0x2b
 8006a9e:	4249      	neglt	r1, r1
 8006aa0:	2909      	cmp	r1, #9
 8006aa2:	7002      	strb	r2, [r0, #0]
 8006aa4:	7043      	strb	r3, [r0, #1]
 8006aa6:	dd29      	ble.n	8006afc <__exponent+0x68>
 8006aa8:	f10d 0307 	add.w	r3, sp, #7
 8006aac:	461d      	mov	r5, r3
 8006aae:	270a      	movs	r7, #10
 8006ab0:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	fb07 1416 	mls	r4, r7, r6, r1
 8006aba:	3430      	adds	r4, #48	@ 0x30
 8006abc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	2c63      	cmp	r4, #99	@ 0x63
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006aca:	dcf1      	bgt.n	8006ab0 <__exponent+0x1c>
 8006acc:	3130      	adds	r1, #48	@ 0x30
 8006ace:	1e94      	subs	r4, r2, #2
 8006ad0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ad4:	4623      	mov	r3, r4
 8006ad6:	1c41      	adds	r1, r0, #1
 8006ad8:	42ab      	cmp	r3, r5
 8006ada:	d30a      	bcc.n	8006af2 <__exponent+0x5e>
 8006adc:	f10d 0309 	add.w	r3, sp, #9
 8006ae0:	1a9b      	subs	r3, r3, r2
 8006ae2:	42ac      	cmp	r4, r5
 8006ae4:	bf88      	it	hi
 8006ae6:	2300      	movhi	r3, #0
 8006ae8:	3302      	adds	r3, #2
 8006aea:	4403      	add	r3, r0
 8006aec:	1a18      	subs	r0, r3, r0
 8006aee:	b003      	add	sp, #12
 8006af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006af2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006af6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006afa:	e7ed      	b.n	8006ad8 <__exponent+0x44>
 8006afc:	2330      	movs	r3, #48	@ 0x30
 8006afe:	3130      	adds	r1, #48	@ 0x30
 8006b00:	7083      	strb	r3, [r0, #2]
 8006b02:	70c1      	strb	r1, [r0, #3]
 8006b04:	1d03      	adds	r3, r0, #4
 8006b06:	e7f1      	b.n	8006aec <__exponent+0x58>

08006b08 <_printf_float>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	b091      	sub	sp, #68	@ 0x44
 8006b0e:	460c      	mov	r4, r1
 8006b10:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006b14:	4616      	mov	r6, r2
 8006b16:	461f      	mov	r7, r3
 8006b18:	4605      	mov	r5, r0
 8006b1a:	f000 ff2f 	bl	800797c <_localeconv_r>
 8006b1e:	6803      	ldr	r3, [r0, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	9308      	str	r3, [sp, #32]
 8006b24:	f7f9 fb80 	bl	8000228 <strlen>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b30:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b32:	3307      	adds	r3, #7
 8006b34:	f023 0307 	bic.w	r3, r3, #7
 8006b38:	f103 0208 	add.w	r2, r3, #8
 8006b3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b40:	f8d4 b000 	ldr.w	fp, [r4]
 8006b44:	f8c8 2000 	str.w	r2, [r8]
 8006b48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b52:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006b62:	4b9c      	ldr	r3, [pc, #624]	@ (8006dd4 <_printf_float+0x2cc>)
 8006b64:	f7f9 ffbe 	bl	8000ae4 <__aeabi_dcmpun>
 8006b68:	bb70      	cbnz	r0, 8006bc8 <_printf_float+0xc0>
 8006b6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b72:	4b98      	ldr	r3, [pc, #608]	@ (8006dd4 <_printf_float+0x2cc>)
 8006b74:	f7f9 ff98 	bl	8000aa8 <__aeabi_dcmple>
 8006b78:	bb30      	cbnz	r0, 8006bc8 <_printf_float+0xc0>
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4640      	mov	r0, r8
 8006b80:	4649      	mov	r1, r9
 8006b82:	f7f9 ff87 	bl	8000a94 <__aeabi_dcmplt>
 8006b86:	b110      	cbz	r0, 8006b8e <_printf_float+0x86>
 8006b88:	232d      	movs	r3, #45	@ 0x2d
 8006b8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b8e:	4a92      	ldr	r2, [pc, #584]	@ (8006dd8 <_printf_float+0x2d0>)
 8006b90:	4b92      	ldr	r3, [pc, #584]	@ (8006ddc <_printf_float+0x2d4>)
 8006b92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b96:	bf94      	ite	ls
 8006b98:	4690      	movls	r8, r2
 8006b9a:	4698      	movhi	r8, r3
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	f04f 0900 	mov.w	r9, #0
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	f02b 0304 	bic.w	r3, fp, #4
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	4633      	mov	r3, r6
 8006bac:	4621      	mov	r1, r4
 8006bae:	4628      	mov	r0, r5
 8006bb0:	9700      	str	r7, [sp, #0]
 8006bb2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006bb4:	f000 f9d4 	bl	8006f60 <_printf_common>
 8006bb8:	3001      	adds	r0, #1
 8006bba:	f040 8090 	bne.w	8006cde <_printf_float+0x1d6>
 8006bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc2:	b011      	add	sp, #68	@ 0x44
 8006bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc8:	4642      	mov	r2, r8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	4640      	mov	r0, r8
 8006bce:	4649      	mov	r1, r9
 8006bd0:	f7f9 ff88 	bl	8000ae4 <__aeabi_dcmpun>
 8006bd4:	b148      	cbz	r0, 8006bea <_printf_float+0xe2>
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bfb8      	it	lt
 8006bdc:	232d      	movlt	r3, #45	@ 0x2d
 8006bde:	4a80      	ldr	r2, [pc, #512]	@ (8006de0 <_printf_float+0x2d8>)
 8006be0:	bfb8      	it	lt
 8006be2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006be6:	4b7f      	ldr	r3, [pc, #508]	@ (8006de4 <_printf_float+0x2dc>)
 8006be8:	e7d3      	b.n	8006b92 <_printf_float+0x8a>
 8006bea:	6863      	ldr	r3, [r4, #4]
 8006bec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	d13f      	bne.n	8006c74 <_printf_float+0x16c>
 8006bf4:	2306      	movs	r3, #6
 8006bf6:	6063      	str	r3, [r4, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	9206      	str	r2, [sp, #24]
 8006c02:	aa0e      	add	r2, sp, #56	@ 0x38
 8006c04:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006c08:	aa0d      	add	r2, sp, #52	@ 0x34
 8006c0a:	9203      	str	r2, [sp, #12]
 8006c0c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006c10:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c14:	6863      	ldr	r3, [r4, #4]
 8006c16:	4642      	mov	r2, r8
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	910a      	str	r1, [sp, #40]	@ 0x28
 8006c20:	f7ff fed4 	bl	80069cc <__cvt>
 8006c24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c26:	4680      	mov	r8, r0
 8006c28:	2947      	cmp	r1, #71	@ 0x47
 8006c2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006c2c:	d128      	bne.n	8006c80 <_printf_float+0x178>
 8006c2e:	1cc8      	adds	r0, r1, #3
 8006c30:	db02      	blt.n	8006c38 <_printf_float+0x130>
 8006c32:	6863      	ldr	r3, [r4, #4]
 8006c34:	4299      	cmp	r1, r3
 8006c36:	dd40      	ble.n	8006cba <_printf_float+0x1b2>
 8006c38:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c3c:	fa5f fa8a 	uxtb.w	sl, sl
 8006c40:	4652      	mov	r2, sl
 8006c42:	3901      	subs	r1, #1
 8006c44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c48:	910d      	str	r1, [sp, #52]	@ 0x34
 8006c4a:	f7ff ff23 	bl	8006a94 <__exponent>
 8006c4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c50:	4681      	mov	r9, r0
 8006c52:	1813      	adds	r3, r2, r0
 8006c54:	2a01      	cmp	r2, #1
 8006c56:	6123      	str	r3, [r4, #16]
 8006c58:	dc02      	bgt.n	8006c60 <_printf_float+0x158>
 8006c5a:	6822      	ldr	r2, [r4, #0]
 8006c5c:	07d2      	lsls	r2, r2, #31
 8006c5e:	d501      	bpl.n	8006c64 <_printf_float+0x15c>
 8006c60:	3301      	adds	r3, #1
 8006c62:	6123      	str	r3, [r4, #16]
 8006c64:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d09e      	beq.n	8006baa <_printf_float+0xa2>
 8006c6c:	232d      	movs	r3, #45	@ 0x2d
 8006c6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c72:	e79a      	b.n	8006baa <_printf_float+0xa2>
 8006c74:	2947      	cmp	r1, #71	@ 0x47
 8006c76:	d1bf      	bne.n	8006bf8 <_printf_float+0xf0>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1bd      	bne.n	8006bf8 <_printf_float+0xf0>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e7ba      	b.n	8006bf6 <_printf_float+0xee>
 8006c80:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c84:	d9dc      	bls.n	8006c40 <_printf_float+0x138>
 8006c86:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c8a:	d118      	bne.n	8006cbe <_printf_float+0x1b6>
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	6863      	ldr	r3, [r4, #4]
 8006c90:	dd0b      	ble.n	8006caa <_printf_float+0x1a2>
 8006c92:	6121      	str	r1, [r4, #16]
 8006c94:	b913      	cbnz	r3, 8006c9c <_printf_float+0x194>
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	07d0      	lsls	r0, r2, #31
 8006c9a:	d502      	bpl.n	8006ca2 <_printf_float+0x19a>
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	440b      	add	r3, r1
 8006ca0:	6123      	str	r3, [r4, #16]
 8006ca2:	f04f 0900 	mov.w	r9, #0
 8006ca6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ca8:	e7dc      	b.n	8006c64 <_printf_float+0x15c>
 8006caa:	b913      	cbnz	r3, 8006cb2 <_printf_float+0x1aa>
 8006cac:	6822      	ldr	r2, [r4, #0]
 8006cae:	07d2      	lsls	r2, r2, #31
 8006cb0:	d501      	bpl.n	8006cb6 <_printf_float+0x1ae>
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	e7f4      	b.n	8006ca0 <_printf_float+0x198>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e7f2      	b.n	8006ca0 <_printf_float+0x198>
 8006cba:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	db05      	blt.n	8006cd0 <_printf_float+0x1c8>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	6121      	str	r1, [r4, #16]
 8006cc8:	07d8      	lsls	r0, r3, #31
 8006cca:	d5ea      	bpl.n	8006ca2 <_printf_float+0x19a>
 8006ccc:	1c4b      	adds	r3, r1, #1
 8006cce:	e7e7      	b.n	8006ca0 <_printf_float+0x198>
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	bfcc      	ite	gt
 8006cd4:	2201      	movgt	r2, #1
 8006cd6:	f1c1 0202 	rsble	r2, r1, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	e7e0      	b.n	8006ca0 <_printf_float+0x198>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	055a      	lsls	r2, r3, #21
 8006ce2:	d407      	bmi.n	8006cf4 <_printf_float+0x1ec>
 8006ce4:	6923      	ldr	r3, [r4, #16]
 8006ce6:	4642      	mov	r2, r8
 8006ce8:	4631      	mov	r1, r6
 8006cea:	4628      	mov	r0, r5
 8006cec:	47b8      	blx	r7
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d12b      	bne.n	8006d4a <_printf_float+0x242>
 8006cf2:	e764      	b.n	8006bbe <_printf_float+0xb6>
 8006cf4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cf8:	f240 80dc 	bls.w	8006eb4 <_printf_float+0x3ac>
 8006cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d00:	2200      	movs	r2, #0
 8006d02:	2300      	movs	r3, #0
 8006d04:	f7f9 febc 	bl	8000a80 <__aeabi_dcmpeq>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d033      	beq.n	8006d74 <_printf_float+0x26c>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	4a35      	ldr	r2, [pc, #212]	@ (8006de8 <_printf_float+0x2e0>)
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f af51 	beq.w	8006bbe <_printf_float+0xb6>
 8006d1c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006d20:	4543      	cmp	r3, r8
 8006d22:	db02      	blt.n	8006d2a <_printf_float+0x222>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	07d8      	lsls	r0, r3, #31
 8006d28:	d50f      	bpl.n	8006d4a <_printf_float+0x242>
 8006d2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	f43f af42 	beq.w	8006bbe <_printf_float+0xb6>
 8006d3a:	f04f 0900 	mov.w	r9, #0
 8006d3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d42:	f104 0a1a 	add.w	sl, r4, #26
 8006d46:	45c8      	cmp	r8, r9
 8006d48:	dc09      	bgt.n	8006d5e <_printf_float+0x256>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	079b      	lsls	r3, r3, #30
 8006d4e:	f100 8102 	bmi.w	8006f56 <_printf_float+0x44e>
 8006d52:	68e0      	ldr	r0, [r4, #12]
 8006d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d56:	4298      	cmp	r0, r3
 8006d58:	bfb8      	it	lt
 8006d5a:	4618      	movlt	r0, r3
 8006d5c:	e731      	b.n	8006bc2 <_printf_float+0xba>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4652      	mov	r2, sl
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f43f af28 	beq.w	8006bbe <_printf_float+0xb6>
 8006d6e:	f109 0901 	add.w	r9, r9, #1
 8006d72:	e7e8      	b.n	8006d46 <_printf_float+0x23e>
 8006d74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dc38      	bgt.n	8006dec <_printf_float+0x2e4>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4628      	mov	r0, r5
 8006d80:	4a19      	ldr	r2, [pc, #100]	@ (8006de8 <_printf_float+0x2e0>)
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	f43f af1a 	beq.w	8006bbe <_printf_float+0xb6>
 8006d8a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006d8e:	ea59 0303 	orrs.w	r3, r9, r3
 8006d92:	d102      	bne.n	8006d9a <_printf_float+0x292>
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	07d9      	lsls	r1, r3, #31
 8006d98:	d5d7      	bpl.n	8006d4a <_printf_float+0x242>
 8006d9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b8      	blx	r7
 8006da4:	3001      	adds	r0, #1
 8006da6:	f43f af0a 	beq.w	8006bbe <_printf_float+0xb6>
 8006daa:	f04f 0a00 	mov.w	sl, #0
 8006dae:	f104 0b1a 	add.w	fp, r4, #26
 8006db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006db4:	425b      	negs	r3, r3
 8006db6:	4553      	cmp	r3, sl
 8006db8:	dc01      	bgt.n	8006dbe <_printf_float+0x2b6>
 8006dba:	464b      	mov	r3, r9
 8006dbc:	e793      	b.n	8006ce6 <_printf_float+0x1de>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	465a      	mov	r2, fp
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	f43f aef8 	beq.w	8006bbe <_printf_float+0xb6>
 8006dce:	f10a 0a01 	add.w	sl, sl, #1
 8006dd2:	e7ee      	b.n	8006db2 <_printf_float+0x2aa>
 8006dd4:	7fefffff 	.word	0x7fefffff
 8006dd8:	0800c5ee 	.word	0x0800c5ee
 8006ddc:	0800c5f2 	.word	0x0800c5f2
 8006de0:	0800c5f6 	.word	0x0800c5f6
 8006de4:	0800c5fa 	.word	0x0800c5fa
 8006de8:	0800c988 	.word	0x0800c988
 8006dec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006df2:	4553      	cmp	r3, sl
 8006df4:	bfa8      	it	ge
 8006df6:	4653      	movge	r3, sl
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	4699      	mov	r9, r3
 8006dfc:	dc36      	bgt.n	8006e6c <_printf_float+0x364>
 8006dfe:	f04f 0b00 	mov.w	fp, #0
 8006e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e06:	f104 021a 	add.w	r2, r4, #26
 8006e0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e0e:	eba3 0309 	sub.w	r3, r3, r9
 8006e12:	455b      	cmp	r3, fp
 8006e14:	dc31      	bgt.n	8006e7a <_printf_float+0x372>
 8006e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e18:	459a      	cmp	sl, r3
 8006e1a:	dc3a      	bgt.n	8006e92 <_printf_float+0x38a>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	07da      	lsls	r2, r3, #31
 8006e20:	d437      	bmi.n	8006e92 <_printf_float+0x38a>
 8006e22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e24:	ebaa 0903 	sub.w	r9, sl, r3
 8006e28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e2a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e2e:	4599      	cmp	r9, r3
 8006e30:	bfa8      	it	ge
 8006e32:	4699      	movge	r9, r3
 8006e34:	f1b9 0f00 	cmp.w	r9, #0
 8006e38:	dc33      	bgt.n	8006ea2 <_printf_float+0x39a>
 8006e3a:	f04f 0800 	mov.w	r8, #0
 8006e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e42:	f104 0b1a 	add.w	fp, r4, #26
 8006e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e48:	ebaa 0303 	sub.w	r3, sl, r3
 8006e4c:	eba3 0309 	sub.w	r3, r3, r9
 8006e50:	4543      	cmp	r3, r8
 8006e52:	f77f af7a 	ble.w	8006d4a <_printf_float+0x242>
 8006e56:	2301      	movs	r3, #1
 8006e58:	465a      	mov	r2, fp
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	f43f aeac 	beq.w	8006bbe <_printf_float+0xb6>
 8006e66:	f108 0801 	add.w	r8, r8, #1
 8006e6a:	e7ec      	b.n	8006e46 <_printf_float+0x33e>
 8006e6c:	4642      	mov	r2, r8
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	d1c2      	bne.n	8006dfe <_printf_float+0x2f6>
 8006e78:	e6a1      	b.n	8006bbe <_printf_float+0xb6>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4628      	mov	r0, r5
 8006e80:	920a      	str	r2, [sp, #40]	@ 0x28
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	f43f ae9a 	beq.w	8006bbe <_printf_float+0xb6>
 8006e8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e8c:	f10b 0b01 	add.w	fp, fp, #1
 8006e90:	e7bb      	b.n	8006e0a <_printf_float+0x302>
 8006e92:	4631      	mov	r1, r6
 8006e94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e98:	4628      	mov	r0, r5
 8006e9a:	47b8      	blx	r7
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d1c0      	bne.n	8006e22 <_printf_float+0x31a>
 8006ea0:	e68d      	b.n	8006bbe <_printf_float+0xb6>
 8006ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ea4:	464b      	mov	r3, r9
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	4442      	add	r2, r8
 8006eac:	47b8      	blx	r7
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d1c3      	bne.n	8006e3a <_printf_float+0x332>
 8006eb2:	e684      	b.n	8006bbe <_printf_float+0xb6>
 8006eb4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006eb8:	f1ba 0f01 	cmp.w	sl, #1
 8006ebc:	dc01      	bgt.n	8006ec2 <_printf_float+0x3ba>
 8006ebe:	07db      	lsls	r3, r3, #31
 8006ec0:	d536      	bpl.n	8006f30 <_printf_float+0x428>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	f43f ae76 	beq.w	8006bbe <_printf_float+0xb6>
 8006ed2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f ae6e 	beq.w	8006bbe <_printf_float+0xb6>
 8006ee2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eee:	f7f9 fdc7 	bl	8000a80 <__aeabi_dcmpeq>
 8006ef2:	b9c0      	cbnz	r0, 8006f26 <_printf_float+0x41e>
 8006ef4:	4653      	mov	r3, sl
 8006ef6:	f108 0201 	add.w	r2, r8, #1
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	d10c      	bne.n	8006f1e <_printf_float+0x416>
 8006f04:	e65b      	b.n	8006bbe <_printf_float+0xb6>
 8006f06:	2301      	movs	r3, #1
 8006f08:	465a      	mov	r2, fp
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	47b8      	blx	r7
 8006f10:	3001      	adds	r0, #1
 8006f12:	f43f ae54 	beq.w	8006bbe <_printf_float+0xb6>
 8006f16:	f108 0801 	add.w	r8, r8, #1
 8006f1a:	45d0      	cmp	r8, sl
 8006f1c:	dbf3      	blt.n	8006f06 <_printf_float+0x3fe>
 8006f1e:	464b      	mov	r3, r9
 8006f20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f24:	e6e0      	b.n	8006ce8 <_printf_float+0x1e0>
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	f104 0b1a 	add.w	fp, r4, #26
 8006f2e:	e7f4      	b.n	8006f1a <_printf_float+0x412>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4642      	mov	r2, r8
 8006f34:	e7e1      	b.n	8006efa <_printf_float+0x3f2>
 8006f36:	2301      	movs	r3, #1
 8006f38:	464a      	mov	r2, r9
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	f43f ae3c 	beq.w	8006bbe <_printf_float+0xb6>
 8006f46:	f108 0801 	add.w	r8, r8, #1
 8006f4a:	68e3      	ldr	r3, [r4, #12]
 8006f4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006f4e:	1a5b      	subs	r3, r3, r1
 8006f50:	4543      	cmp	r3, r8
 8006f52:	dcf0      	bgt.n	8006f36 <_printf_float+0x42e>
 8006f54:	e6fd      	b.n	8006d52 <_printf_float+0x24a>
 8006f56:	f04f 0800 	mov.w	r8, #0
 8006f5a:	f104 0919 	add.w	r9, r4, #25
 8006f5e:	e7f4      	b.n	8006f4a <_printf_float+0x442>

08006f60 <_printf_common>:
 8006f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f64:	4616      	mov	r6, r2
 8006f66:	4698      	mov	r8, r3
 8006f68:	688a      	ldr	r2, [r1, #8]
 8006f6a:	690b      	ldr	r3, [r1, #16]
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	bfb8      	it	lt
 8006f72:	4613      	movlt	r3, r2
 8006f74:	6033      	str	r3, [r6, #0]
 8006f76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f80:	b10a      	cbz	r2, 8006f86 <_printf_common+0x26>
 8006f82:	3301      	adds	r3, #1
 8006f84:	6033      	str	r3, [r6, #0]
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	0699      	lsls	r1, r3, #26
 8006f8a:	bf42      	ittt	mi
 8006f8c:	6833      	ldrmi	r3, [r6, #0]
 8006f8e:	3302      	addmi	r3, #2
 8006f90:	6033      	strmi	r3, [r6, #0]
 8006f92:	6825      	ldr	r5, [r4, #0]
 8006f94:	f015 0506 	ands.w	r5, r5, #6
 8006f98:	d106      	bne.n	8006fa8 <_printf_common+0x48>
 8006f9a:	f104 0a19 	add.w	sl, r4, #25
 8006f9e:	68e3      	ldr	r3, [r4, #12]
 8006fa0:	6832      	ldr	r2, [r6, #0]
 8006fa2:	1a9b      	subs	r3, r3, r2
 8006fa4:	42ab      	cmp	r3, r5
 8006fa6:	dc2b      	bgt.n	8007000 <_printf_common+0xa0>
 8006fa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fac:	6822      	ldr	r2, [r4, #0]
 8006fae:	3b00      	subs	r3, #0
 8006fb0:	bf18      	it	ne
 8006fb2:	2301      	movne	r3, #1
 8006fb4:	0692      	lsls	r2, r2, #26
 8006fb6:	d430      	bmi.n	800701a <_printf_common+0xba>
 8006fb8:	4641      	mov	r1, r8
 8006fba:	4638      	mov	r0, r7
 8006fbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fc0:	47c8      	blx	r9
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d023      	beq.n	800700e <_printf_common+0xae>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	6922      	ldr	r2, [r4, #16]
 8006fca:	f003 0306 	and.w	r3, r3, #6
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	bf14      	ite	ne
 8006fd2:	2500      	movne	r5, #0
 8006fd4:	6833      	ldreq	r3, [r6, #0]
 8006fd6:	f04f 0600 	mov.w	r6, #0
 8006fda:	bf08      	it	eq
 8006fdc:	68e5      	ldreq	r5, [r4, #12]
 8006fde:	f104 041a 	add.w	r4, r4, #26
 8006fe2:	bf08      	it	eq
 8006fe4:	1aed      	subeq	r5, r5, r3
 8006fe6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006fea:	bf08      	it	eq
 8006fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	bfc4      	itt	gt
 8006ff4:	1a9b      	subgt	r3, r3, r2
 8006ff6:	18ed      	addgt	r5, r5, r3
 8006ff8:	42b5      	cmp	r5, r6
 8006ffa:	d11a      	bne.n	8007032 <_printf_common+0xd2>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e008      	b.n	8007012 <_printf_common+0xb2>
 8007000:	2301      	movs	r3, #1
 8007002:	4652      	mov	r2, sl
 8007004:	4641      	mov	r1, r8
 8007006:	4638      	mov	r0, r7
 8007008:	47c8      	blx	r9
 800700a:	3001      	adds	r0, #1
 800700c:	d103      	bne.n	8007016 <_printf_common+0xb6>
 800700e:	f04f 30ff 	mov.w	r0, #4294967295
 8007012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007016:	3501      	adds	r5, #1
 8007018:	e7c1      	b.n	8006f9e <_printf_common+0x3e>
 800701a:	2030      	movs	r0, #48	@ 0x30
 800701c:	18e1      	adds	r1, r4, r3
 800701e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007028:	4422      	add	r2, r4
 800702a:	3302      	adds	r3, #2
 800702c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007030:	e7c2      	b.n	8006fb8 <_printf_common+0x58>
 8007032:	2301      	movs	r3, #1
 8007034:	4622      	mov	r2, r4
 8007036:	4641      	mov	r1, r8
 8007038:	4638      	mov	r0, r7
 800703a:	47c8      	blx	r9
 800703c:	3001      	adds	r0, #1
 800703e:	d0e6      	beq.n	800700e <_printf_common+0xae>
 8007040:	3601      	adds	r6, #1
 8007042:	e7d9      	b.n	8006ff8 <_printf_common+0x98>

08007044 <_printf_i>:
 8007044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007048:	7e0f      	ldrb	r7, [r1, #24]
 800704a:	4691      	mov	r9, r2
 800704c:	2f78      	cmp	r7, #120	@ 0x78
 800704e:	4680      	mov	r8, r0
 8007050:	460c      	mov	r4, r1
 8007052:	469a      	mov	sl, r3
 8007054:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800705a:	d807      	bhi.n	800706c <_printf_i+0x28>
 800705c:	2f62      	cmp	r7, #98	@ 0x62
 800705e:	d80a      	bhi.n	8007076 <_printf_i+0x32>
 8007060:	2f00      	cmp	r7, #0
 8007062:	f000 80d3 	beq.w	800720c <_printf_i+0x1c8>
 8007066:	2f58      	cmp	r7, #88	@ 0x58
 8007068:	f000 80ba 	beq.w	80071e0 <_printf_i+0x19c>
 800706c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007074:	e03a      	b.n	80070ec <_printf_i+0xa8>
 8007076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800707a:	2b15      	cmp	r3, #21
 800707c:	d8f6      	bhi.n	800706c <_printf_i+0x28>
 800707e:	a101      	add	r1, pc, #4	@ (adr r1, 8007084 <_printf_i+0x40>)
 8007080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007084:	080070dd 	.word	0x080070dd
 8007088:	080070f1 	.word	0x080070f1
 800708c:	0800706d 	.word	0x0800706d
 8007090:	0800706d 	.word	0x0800706d
 8007094:	0800706d 	.word	0x0800706d
 8007098:	0800706d 	.word	0x0800706d
 800709c:	080070f1 	.word	0x080070f1
 80070a0:	0800706d 	.word	0x0800706d
 80070a4:	0800706d 	.word	0x0800706d
 80070a8:	0800706d 	.word	0x0800706d
 80070ac:	0800706d 	.word	0x0800706d
 80070b0:	080071f3 	.word	0x080071f3
 80070b4:	0800711b 	.word	0x0800711b
 80070b8:	080071ad 	.word	0x080071ad
 80070bc:	0800706d 	.word	0x0800706d
 80070c0:	0800706d 	.word	0x0800706d
 80070c4:	08007215 	.word	0x08007215
 80070c8:	0800706d 	.word	0x0800706d
 80070cc:	0800711b 	.word	0x0800711b
 80070d0:	0800706d 	.word	0x0800706d
 80070d4:	0800706d 	.word	0x0800706d
 80070d8:	080071b5 	.word	0x080071b5
 80070dc:	6833      	ldr	r3, [r6, #0]
 80070de:	1d1a      	adds	r2, r3, #4
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6032      	str	r2, [r6, #0]
 80070e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070ec:	2301      	movs	r3, #1
 80070ee:	e09e      	b.n	800722e <_printf_i+0x1ea>
 80070f0:	6833      	ldr	r3, [r6, #0]
 80070f2:	6820      	ldr	r0, [r4, #0]
 80070f4:	1d19      	adds	r1, r3, #4
 80070f6:	6031      	str	r1, [r6, #0]
 80070f8:	0606      	lsls	r6, r0, #24
 80070fa:	d501      	bpl.n	8007100 <_printf_i+0xbc>
 80070fc:	681d      	ldr	r5, [r3, #0]
 80070fe:	e003      	b.n	8007108 <_printf_i+0xc4>
 8007100:	0645      	lsls	r5, r0, #25
 8007102:	d5fb      	bpl.n	80070fc <_printf_i+0xb8>
 8007104:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007108:	2d00      	cmp	r5, #0
 800710a:	da03      	bge.n	8007114 <_printf_i+0xd0>
 800710c:	232d      	movs	r3, #45	@ 0x2d
 800710e:	426d      	negs	r5, r5
 8007110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007114:	230a      	movs	r3, #10
 8007116:	4859      	ldr	r0, [pc, #356]	@ (800727c <_printf_i+0x238>)
 8007118:	e011      	b.n	800713e <_printf_i+0xfa>
 800711a:	6821      	ldr	r1, [r4, #0]
 800711c:	6833      	ldr	r3, [r6, #0]
 800711e:	0608      	lsls	r0, r1, #24
 8007120:	f853 5b04 	ldr.w	r5, [r3], #4
 8007124:	d402      	bmi.n	800712c <_printf_i+0xe8>
 8007126:	0649      	lsls	r1, r1, #25
 8007128:	bf48      	it	mi
 800712a:	b2ad      	uxthmi	r5, r5
 800712c:	2f6f      	cmp	r7, #111	@ 0x6f
 800712e:	6033      	str	r3, [r6, #0]
 8007130:	bf14      	ite	ne
 8007132:	230a      	movne	r3, #10
 8007134:	2308      	moveq	r3, #8
 8007136:	4851      	ldr	r0, [pc, #324]	@ (800727c <_printf_i+0x238>)
 8007138:	2100      	movs	r1, #0
 800713a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800713e:	6866      	ldr	r6, [r4, #4]
 8007140:	2e00      	cmp	r6, #0
 8007142:	bfa8      	it	ge
 8007144:	6821      	ldrge	r1, [r4, #0]
 8007146:	60a6      	str	r6, [r4, #8]
 8007148:	bfa4      	itt	ge
 800714a:	f021 0104 	bicge.w	r1, r1, #4
 800714e:	6021      	strge	r1, [r4, #0]
 8007150:	b90d      	cbnz	r5, 8007156 <_printf_i+0x112>
 8007152:	2e00      	cmp	r6, #0
 8007154:	d04b      	beq.n	80071ee <_printf_i+0x1aa>
 8007156:	4616      	mov	r6, r2
 8007158:	fbb5 f1f3 	udiv	r1, r5, r3
 800715c:	fb03 5711 	mls	r7, r3, r1, r5
 8007160:	5dc7      	ldrb	r7, [r0, r7]
 8007162:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007166:	462f      	mov	r7, r5
 8007168:	42bb      	cmp	r3, r7
 800716a:	460d      	mov	r5, r1
 800716c:	d9f4      	bls.n	8007158 <_printf_i+0x114>
 800716e:	2b08      	cmp	r3, #8
 8007170:	d10b      	bne.n	800718a <_printf_i+0x146>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	07df      	lsls	r7, r3, #31
 8007176:	d508      	bpl.n	800718a <_printf_i+0x146>
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	6861      	ldr	r1, [r4, #4]
 800717c:	4299      	cmp	r1, r3
 800717e:	bfde      	ittt	le
 8007180:	2330      	movle	r3, #48	@ 0x30
 8007182:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007186:	f106 36ff 	addle.w	r6, r6, #4294967295
 800718a:	1b92      	subs	r2, r2, r6
 800718c:	6122      	str	r2, [r4, #16]
 800718e:	464b      	mov	r3, r9
 8007190:	4621      	mov	r1, r4
 8007192:	4640      	mov	r0, r8
 8007194:	f8cd a000 	str.w	sl, [sp]
 8007198:	aa03      	add	r2, sp, #12
 800719a:	f7ff fee1 	bl	8006f60 <_printf_common>
 800719e:	3001      	adds	r0, #1
 80071a0:	d14a      	bne.n	8007238 <_printf_i+0x1f4>
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295
 80071a6:	b004      	add	sp, #16
 80071a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	f043 0320 	orr.w	r3, r3, #32
 80071b2:	6023      	str	r3, [r4, #0]
 80071b4:	2778      	movs	r7, #120	@ 0x78
 80071b6:	4832      	ldr	r0, [pc, #200]	@ (8007280 <_printf_i+0x23c>)
 80071b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	6831      	ldr	r1, [r6, #0]
 80071c0:	061f      	lsls	r7, r3, #24
 80071c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80071c6:	d402      	bmi.n	80071ce <_printf_i+0x18a>
 80071c8:	065f      	lsls	r7, r3, #25
 80071ca:	bf48      	it	mi
 80071cc:	b2ad      	uxthmi	r5, r5
 80071ce:	6031      	str	r1, [r6, #0]
 80071d0:	07d9      	lsls	r1, r3, #31
 80071d2:	bf44      	itt	mi
 80071d4:	f043 0320 	orrmi.w	r3, r3, #32
 80071d8:	6023      	strmi	r3, [r4, #0]
 80071da:	b11d      	cbz	r5, 80071e4 <_printf_i+0x1a0>
 80071dc:	2310      	movs	r3, #16
 80071de:	e7ab      	b.n	8007138 <_printf_i+0xf4>
 80071e0:	4826      	ldr	r0, [pc, #152]	@ (800727c <_printf_i+0x238>)
 80071e2:	e7e9      	b.n	80071b8 <_printf_i+0x174>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	f023 0320 	bic.w	r3, r3, #32
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	e7f6      	b.n	80071dc <_printf_i+0x198>
 80071ee:	4616      	mov	r6, r2
 80071f0:	e7bd      	b.n	800716e <_printf_i+0x12a>
 80071f2:	6833      	ldr	r3, [r6, #0]
 80071f4:	6825      	ldr	r5, [r4, #0]
 80071f6:	1d18      	adds	r0, r3, #4
 80071f8:	6961      	ldr	r1, [r4, #20]
 80071fa:	6030      	str	r0, [r6, #0]
 80071fc:	062e      	lsls	r6, r5, #24
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	d501      	bpl.n	8007206 <_printf_i+0x1c2>
 8007202:	6019      	str	r1, [r3, #0]
 8007204:	e002      	b.n	800720c <_printf_i+0x1c8>
 8007206:	0668      	lsls	r0, r5, #25
 8007208:	d5fb      	bpl.n	8007202 <_printf_i+0x1be>
 800720a:	8019      	strh	r1, [r3, #0]
 800720c:	2300      	movs	r3, #0
 800720e:	4616      	mov	r6, r2
 8007210:	6123      	str	r3, [r4, #16]
 8007212:	e7bc      	b.n	800718e <_printf_i+0x14a>
 8007214:	6833      	ldr	r3, [r6, #0]
 8007216:	2100      	movs	r1, #0
 8007218:	1d1a      	adds	r2, r3, #4
 800721a:	6032      	str	r2, [r6, #0]
 800721c:	681e      	ldr	r6, [r3, #0]
 800721e:	6862      	ldr	r2, [r4, #4]
 8007220:	4630      	mov	r0, r6
 8007222:	f000 fc22 	bl	8007a6a <memchr>
 8007226:	b108      	cbz	r0, 800722c <_printf_i+0x1e8>
 8007228:	1b80      	subs	r0, r0, r6
 800722a:	6060      	str	r0, [r4, #4]
 800722c:	6863      	ldr	r3, [r4, #4]
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	2300      	movs	r3, #0
 8007232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007236:	e7aa      	b.n	800718e <_printf_i+0x14a>
 8007238:	4632      	mov	r2, r6
 800723a:	4649      	mov	r1, r9
 800723c:	4640      	mov	r0, r8
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	47d0      	blx	sl
 8007242:	3001      	adds	r0, #1
 8007244:	d0ad      	beq.n	80071a2 <_printf_i+0x15e>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	079b      	lsls	r3, r3, #30
 800724a:	d413      	bmi.n	8007274 <_printf_i+0x230>
 800724c:	68e0      	ldr	r0, [r4, #12]
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	4298      	cmp	r0, r3
 8007252:	bfb8      	it	lt
 8007254:	4618      	movlt	r0, r3
 8007256:	e7a6      	b.n	80071a6 <_printf_i+0x162>
 8007258:	2301      	movs	r3, #1
 800725a:	4632      	mov	r2, r6
 800725c:	4649      	mov	r1, r9
 800725e:	4640      	mov	r0, r8
 8007260:	47d0      	blx	sl
 8007262:	3001      	adds	r0, #1
 8007264:	d09d      	beq.n	80071a2 <_printf_i+0x15e>
 8007266:	3501      	adds	r5, #1
 8007268:	68e3      	ldr	r3, [r4, #12]
 800726a:	9903      	ldr	r1, [sp, #12]
 800726c:	1a5b      	subs	r3, r3, r1
 800726e:	42ab      	cmp	r3, r5
 8007270:	dcf2      	bgt.n	8007258 <_printf_i+0x214>
 8007272:	e7eb      	b.n	800724c <_printf_i+0x208>
 8007274:	2500      	movs	r5, #0
 8007276:	f104 0619 	add.w	r6, r4, #25
 800727a:	e7f5      	b.n	8007268 <_printf_i+0x224>
 800727c:	0800c5fe 	.word	0x0800c5fe
 8007280:	0800c60f 	.word	0x0800c60f

08007284 <_scanf_float>:
 8007284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007288:	b087      	sub	sp, #28
 800728a:	9303      	str	r3, [sp, #12]
 800728c:	688b      	ldr	r3, [r1, #8]
 800728e:	4617      	mov	r7, r2
 8007290:	1e5a      	subs	r2, r3, #1
 8007292:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007296:	bf82      	ittt	hi
 8007298:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800729c:	eb03 0b05 	addhi.w	fp, r3, r5
 80072a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80072a4:	460a      	mov	r2, r1
 80072a6:	f04f 0500 	mov.w	r5, #0
 80072aa:	bf88      	it	hi
 80072ac:	608b      	strhi	r3, [r1, #8]
 80072ae:	680b      	ldr	r3, [r1, #0]
 80072b0:	4680      	mov	r8, r0
 80072b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80072b6:	f842 3b1c 	str.w	r3, [r2], #28
 80072ba:	460c      	mov	r4, r1
 80072bc:	bf98      	it	ls
 80072be:	f04f 0b00 	movls.w	fp, #0
 80072c2:	4616      	mov	r6, r2
 80072c4:	46aa      	mov	sl, r5
 80072c6:	46a9      	mov	r9, r5
 80072c8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80072cc:	9201      	str	r2, [sp, #4]
 80072ce:	9502      	str	r5, [sp, #8]
 80072d0:	68a2      	ldr	r2, [r4, #8]
 80072d2:	b152      	cbz	r2, 80072ea <_scanf_float+0x66>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b4e      	cmp	r3, #78	@ 0x4e
 80072da:	d865      	bhi.n	80073a8 <_scanf_float+0x124>
 80072dc:	2b40      	cmp	r3, #64	@ 0x40
 80072de:	d83d      	bhi.n	800735c <_scanf_float+0xd8>
 80072e0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80072e4:	b2c8      	uxtb	r0, r1
 80072e6:	280e      	cmp	r0, #14
 80072e8:	d93b      	bls.n	8007362 <_scanf_float+0xde>
 80072ea:	f1b9 0f00 	cmp.w	r9, #0
 80072ee:	d003      	beq.n	80072f8 <_scanf_float+0x74>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072fc:	f1ba 0f01 	cmp.w	sl, #1
 8007300:	f200 8118 	bhi.w	8007534 <_scanf_float+0x2b0>
 8007304:	9b01      	ldr	r3, [sp, #4]
 8007306:	429e      	cmp	r6, r3
 8007308:	f200 8109 	bhi.w	800751e <_scanf_float+0x29a>
 800730c:	2001      	movs	r0, #1
 800730e:	b007      	add	sp, #28
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007314:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007318:	2a0d      	cmp	r2, #13
 800731a:	d8e6      	bhi.n	80072ea <_scanf_float+0x66>
 800731c:	a101      	add	r1, pc, #4	@ (adr r1, 8007324 <_scanf_float+0xa0>)
 800731e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007322:	bf00      	nop
 8007324:	0800746b 	.word	0x0800746b
 8007328:	080072eb 	.word	0x080072eb
 800732c:	080072eb 	.word	0x080072eb
 8007330:	080072eb 	.word	0x080072eb
 8007334:	080074cb 	.word	0x080074cb
 8007338:	080074a3 	.word	0x080074a3
 800733c:	080072eb 	.word	0x080072eb
 8007340:	080072eb 	.word	0x080072eb
 8007344:	08007479 	.word	0x08007479
 8007348:	080072eb 	.word	0x080072eb
 800734c:	080072eb 	.word	0x080072eb
 8007350:	080072eb 	.word	0x080072eb
 8007354:	080072eb 	.word	0x080072eb
 8007358:	08007431 	.word	0x08007431
 800735c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007360:	e7da      	b.n	8007318 <_scanf_float+0x94>
 8007362:	290e      	cmp	r1, #14
 8007364:	d8c1      	bhi.n	80072ea <_scanf_float+0x66>
 8007366:	a001      	add	r0, pc, #4	@ (adr r0, 800736c <_scanf_float+0xe8>)
 8007368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800736c:	08007421 	.word	0x08007421
 8007370:	080072eb 	.word	0x080072eb
 8007374:	08007421 	.word	0x08007421
 8007378:	080074b7 	.word	0x080074b7
 800737c:	080072eb 	.word	0x080072eb
 8007380:	080073c9 	.word	0x080073c9
 8007384:	08007407 	.word	0x08007407
 8007388:	08007407 	.word	0x08007407
 800738c:	08007407 	.word	0x08007407
 8007390:	08007407 	.word	0x08007407
 8007394:	08007407 	.word	0x08007407
 8007398:	08007407 	.word	0x08007407
 800739c:	08007407 	.word	0x08007407
 80073a0:	08007407 	.word	0x08007407
 80073a4:	08007407 	.word	0x08007407
 80073a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80073aa:	d809      	bhi.n	80073c0 <_scanf_float+0x13c>
 80073ac:	2b60      	cmp	r3, #96	@ 0x60
 80073ae:	d8b1      	bhi.n	8007314 <_scanf_float+0x90>
 80073b0:	2b54      	cmp	r3, #84	@ 0x54
 80073b2:	d07b      	beq.n	80074ac <_scanf_float+0x228>
 80073b4:	2b59      	cmp	r3, #89	@ 0x59
 80073b6:	d198      	bne.n	80072ea <_scanf_float+0x66>
 80073b8:	2d07      	cmp	r5, #7
 80073ba:	d196      	bne.n	80072ea <_scanf_float+0x66>
 80073bc:	2508      	movs	r5, #8
 80073be:	e02c      	b.n	800741a <_scanf_float+0x196>
 80073c0:	2b74      	cmp	r3, #116	@ 0x74
 80073c2:	d073      	beq.n	80074ac <_scanf_float+0x228>
 80073c4:	2b79      	cmp	r3, #121	@ 0x79
 80073c6:	e7f6      	b.n	80073b6 <_scanf_float+0x132>
 80073c8:	6821      	ldr	r1, [r4, #0]
 80073ca:	05c8      	lsls	r0, r1, #23
 80073cc:	d51b      	bpl.n	8007406 <_scanf_float+0x182>
 80073ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80073d2:	6021      	str	r1, [r4, #0]
 80073d4:	f109 0901 	add.w	r9, r9, #1
 80073d8:	f1bb 0f00 	cmp.w	fp, #0
 80073dc:	d003      	beq.n	80073e6 <_scanf_float+0x162>
 80073de:	3201      	adds	r2, #1
 80073e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073e4:	60a2      	str	r2, [r4, #8]
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	60a3      	str	r3, [r4, #8]
 80073ec:	6923      	ldr	r3, [r4, #16]
 80073ee:	3301      	adds	r3, #1
 80073f0:	6123      	str	r3, [r4, #16]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	f340 8087 	ble.w	800750c <_scanf_float+0x288>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	3301      	adds	r3, #1
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	e764      	b.n	80072d0 <_scanf_float+0x4c>
 8007406:	eb1a 0105 	adds.w	r1, sl, r5
 800740a:	f47f af6e 	bne.w	80072ea <_scanf_float+0x66>
 800740e:	460d      	mov	r5, r1
 8007410:	468a      	mov	sl, r1
 8007412:	6822      	ldr	r2, [r4, #0]
 8007414:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007418:	6022      	str	r2, [r4, #0]
 800741a:	f806 3b01 	strb.w	r3, [r6], #1
 800741e:	e7e2      	b.n	80073e6 <_scanf_float+0x162>
 8007420:	6822      	ldr	r2, [r4, #0]
 8007422:	0610      	lsls	r0, r2, #24
 8007424:	f57f af61 	bpl.w	80072ea <_scanf_float+0x66>
 8007428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800742c:	6022      	str	r2, [r4, #0]
 800742e:	e7f4      	b.n	800741a <_scanf_float+0x196>
 8007430:	f1ba 0f00 	cmp.w	sl, #0
 8007434:	d10e      	bne.n	8007454 <_scanf_float+0x1d0>
 8007436:	f1b9 0f00 	cmp.w	r9, #0
 800743a:	d10e      	bne.n	800745a <_scanf_float+0x1d6>
 800743c:	6822      	ldr	r2, [r4, #0]
 800743e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007442:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007446:	d108      	bne.n	800745a <_scanf_float+0x1d6>
 8007448:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800744c:	f04f 0a01 	mov.w	sl, #1
 8007450:	6022      	str	r2, [r4, #0]
 8007452:	e7e2      	b.n	800741a <_scanf_float+0x196>
 8007454:	f1ba 0f02 	cmp.w	sl, #2
 8007458:	d055      	beq.n	8007506 <_scanf_float+0x282>
 800745a:	2d01      	cmp	r5, #1
 800745c:	d002      	beq.n	8007464 <_scanf_float+0x1e0>
 800745e:	2d04      	cmp	r5, #4
 8007460:	f47f af43 	bne.w	80072ea <_scanf_float+0x66>
 8007464:	3501      	adds	r5, #1
 8007466:	b2ed      	uxtb	r5, r5
 8007468:	e7d7      	b.n	800741a <_scanf_float+0x196>
 800746a:	f1ba 0f01 	cmp.w	sl, #1
 800746e:	f47f af3c 	bne.w	80072ea <_scanf_float+0x66>
 8007472:	f04f 0a02 	mov.w	sl, #2
 8007476:	e7d0      	b.n	800741a <_scanf_float+0x196>
 8007478:	b97d      	cbnz	r5, 800749a <_scanf_float+0x216>
 800747a:	f1b9 0f00 	cmp.w	r9, #0
 800747e:	f47f af37 	bne.w	80072f0 <_scanf_float+0x6c>
 8007482:	6822      	ldr	r2, [r4, #0]
 8007484:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007488:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800748c:	f040 8103 	bne.w	8007696 <_scanf_float+0x412>
 8007490:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007494:	2501      	movs	r5, #1
 8007496:	6022      	str	r2, [r4, #0]
 8007498:	e7bf      	b.n	800741a <_scanf_float+0x196>
 800749a:	2d03      	cmp	r5, #3
 800749c:	d0e2      	beq.n	8007464 <_scanf_float+0x1e0>
 800749e:	2d05      	cmp	r5, #5
 80074a0:	e7de      	b.n	8007460 <_scanf_float+0x1dc>
 80074a2:	2d02      	cmp	r5, #2
 80074a4:	f47f af21 	bne.w	80072ea <_scanf_float+0x66>
 80074a8:	2503      	movs	r5, #3
 80074aa:	e7b6      	b.n	800741a <_scanf_float+0x196>
 80074ac:	2d06      	cmp	r5, #6
 80074ae:	f47f af1c 	bne.w	80072ea <_scanf_float+0x66>
 80074b2:	2507      	movs	r5, #7
 80074b4:	e7b1      	b.n	800741a <_scanf_float+0x196>
 80074b6:	6822      	ldr	r2, [r4, #0]
 80074b8:	0591      	lsls	r1, r2, #22
 80074ba:	f57f af16 	bpl.w	80072ea <_scanf_float+0x66>
 80074be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80074c2:	6022      	str	r2, [r4, #0]
 80074c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80074c8:	e7a7      	b.n	800741a <_scanf_float+0x196>
 80074ca:	6822      	ldr	r2, [r4, #0]
 80074cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80074d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80074d4:	d006      	beq.n	80074e4 <_scanf_float+0x260>
 80074d6:	0550      	lsls	r0, r2, #21
 80074d8:	f57f af07 	bpl.w	80072ea <_scanf_float+0x66>
 80074dc:	f1b9 0f00 	cmp.w	r9, #0
 80074e0:	f000 80d9 	beq.w	8007696 <_scanf_float+0x412>
 80074e4:	0591      	lsls	r1, r2, #22
 80074e6:	bf58      	it	pl
 80074e8:	9902      	ldrpl	r1, [sp, #8]
 80074ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074ee:	bf58      	it	pl
 80074f0:	eba9 0101 	subpl.w	r1, r9, r1
 80074f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80074f8:	f04f 0900 	mov.w	r9, #0
 80074fc:	bf58      	it	pl
 80074fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007502:	6022      	str	r2, [r4, #0]
 8007504:	e789      	b.n	800741a <_scanf_float+0x196>
 8007506:	f04f 0a03 	mov.w	sl, #3
 800750a:	e786      	b.n	800741a <_scanf_float+0x196>
 800750c:	4639      	mov	r1, r7
 800750e:	4640      	mov	r0, r8
 8007510:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007514:	4798      	blx	r3
 8007516:	2800      	cmp	r0, #0
 8007518:	f43f aeda 	beq.w	80072d0 <_scanf_float+0x4c>
 800751c:	e6e5      	b.n	80072ea <_scanf_float+0x66>
 800751e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007522:	463a      	mov	r2, r7
 8007524:	4640      	mov	r0, r8
 8007526:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800752a:	4798      	blx	r3
 800752c:	6923      	ldr	r3, [r4, #16]
 800752e:	3b01      	subs	r3, #1
 8007530:	6123      	str	r3, [r4, #16]
 8007532:	e6e7      	b.n	8007304 <_scanf_float+0x80>
 8007534:	1e6b      	subs	r3, r5, #1
 8007536:	2b06      	cmp	r3, #6
 8007538:	d824      	bhi.n	8007584 <_scanf_float+0x300>
 800753a:	2d02      	cmp	r5, #2
 800753c:	d836      	bhi.n	80075ac <_scanf_float+0x328>
 800753e:	9b01      	ldr	r3, [sp, #4]
 8007540:	429e      	cmp	r6, r3
 8007542:	f67f aee3 	bls.w	800730c <_scanf_float+0x88>
 8007546:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800754a:	463a      	mov	r2, r7
 800754c:	4640      	mov	r0, r8
 800754e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007552:	4798      	blx	r3
 8007554:	6923      	ldr	r3, [r4, #16]
 8007556:	3b01      	subs	r3, #1
 8007558:	6123      	str	r3, [r4, #16]
 800755a:	e7f0      	b.n	800753e <_scanf_float+0x2ba>
 800755c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007560:	463a      	mov	r2, r7
 8007562:	4640      	mov	r0, r8
 8007564:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007568:	4798      	blx	r3
 800756a:	6923      	ldr	r3, [r4, #16]
 800756c:	3b01      	subs	r3, #1
 800756e:	6123      	str	r3, [r4, #16]
 8007570:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007574:	fa5f fa8a 	uxtb.w	sl, sl
 8007578:	f1ba 0f02 	cmp.w	sl, #2
 800757c:	d1ee      	bne.n	800755c <_scanf_float+0x2d8>
 800757e:	3d03      	subs	r5, #3
 8007580:	b2ed      	uxtb	r5, r5
 8007582:	1b76      	subs	r6, r6, r5
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	05da      	lsls	r2, r3, #23
 8007588:	d530      	bpl.n	80075ec <_scanf_float+0x368>
 800758a:	055b      	lsls	r3, r3, #21
 800758c:	d511      	bpl.n	80075b2 <_scanf_float+0x32e>
 800758e:	9b01      	ldr	r3, [sp, #4]
 8007590:	429e      	cmp	r6, r3
 8007592:	f67f aebb 	bls.w	800730c <_scanf_float+0x88>
 8007596:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800759a:	463a      	mov	r2, r7
 800759c:	4640      	mov	r0, r8
 800759e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075a2:	4798      	blx	r3
 80075a4:	6923      	ldr	r3, [r4, #16]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	6123      	str	r3, [r4, #16]
 80075aa:	e7f0      	b.n	800758e <_scanf_float+0x30a>
 80075ac:	46aa      	mov	sl, r5
 80075ae:	46b3      	mov	fp, r6
 80075b0:	e7de      	b.n	8007570 <_scanf_float+0x2ec>
 80075b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80075b6:	6923      	ldr	r3, [r4, #16]
 80075b8:	2965      	cmp	r1, #101	@ 0x65
 80075ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80075be:	f106 35ff 	add.w	r5, r6, #4294967295
 80075c2:	6123      	str	r3, [r4, #16]
 80075c4:	d00c      	beq.n	80075e0 <_scanf_float+0x35c>
 80075c6:	2945      	cmp	r1, #69	@ 0x45
 80075c8:	d00a      	beq.n	80075e0 <_scanf_float+0x35c>
 80075ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075ce:	463a      	mov	r2, r7
 80075d0:	4640      	mov	r0, r8
 80075d2:	4798      	blx	r3
 80075d4:	6923      	ldr	r3, [r4, #16]
 80075d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80075da:	3b01      	subs	r3, #1
 80075dc:	1eb5      	subs	r5, r6, #2
 80075de:	6123      	str	r3, [r4, #16]
 80075e0:	463a      	mov	r2, r7
 80075e2:	4640      	mov	r0, r8
 80075e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075e8:	4798      	blx	r3
 80075ea:	462e      	mov	r6, r5
 80075ec:	6822      	ldr	r2, [r4, #0]
 80075ee:	f012 0210 	ands.w	r2, r2, #16
 80075f2:	d001      	beq.n	80075f8 <_scanf_float+0x374>
 80075f4:	2000      	movs	r0, #0
 80075f6:	e68a      	b.n	800730e <_scanf_float+0x8a>
 80075f8:	7032      	strb	r2, [r6, #0]
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007604:	d11c      	bne.n	8007640 <_scanf_float+0x3bc>
 8007606:	9b02      	ldr	r3, [sp, #8]
 8007608:	454b      	cmp	r3, r9
 800760a:	eba3 0209 	sub.w	r2, r3, r9
 800760e:	d123      	bne.n	8007658 <_scanf_float+0x3d4>
 8007610:	2200      	movs	r2, #0
 8007612:	4640      	mov	r0, r8
 8007614:	9901      	ldr	r1, [sp, #4]
 8007616:	f002 fc2b 	bl	8009e70 <_strtod_r>
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	6825      	ldr	r5, [r4, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f015 0f02 	tst.w	r5, #2
 8007624:	4606      	mov	r6, r0
 8007626:	460f      	mov	r7, r1
 8007628:	f103 0204 	add.w	r2, r3, #4
 800762c:	d01f      	beq.n	800766e <_scanf_float+0x3ea>
 800762e:	9903      	ldr	r1, [sp, #12]
 8007630:	600a      	str	r2, [r1, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	e9c3 6700 	strd	r6, r7, [r3]
 8007638:	68e3      	ldr	r3, [r4, #12]
 800763a:	3301      	adds	r3, #1
 800763c:	60e3      	str	r3, [r4, #12]
 800763e:	e7d9      	b.n	80075f4 <_scanf_float+0x370>
 8007640:	9b04      	ldr	r3, [sp, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0e4      	beq.n	8007610 <_scanf_float+0x38c>
 8007646:	9905      	ldr	r1, [sp, #20]
 8007648:	230a      	movs	r3, #10
 800764a:	4640      	mov	r0, r8
 800764c:	3101      	adds	r1, #1
 800764e:	f002 fc8f 	bl	8009f70 <_strtol_r>
 8007652:	9b04      	ldr	r3, [sp, #16]
 8007654:	9e05      	ldr	r6, [sp, #20]
 8007656:	1ac2      	subs	r2, r0, r3
 8007658:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800765c:	429e      	cmp	r6, r3
 800765e:	bf28      	it	cs
 8007660:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007664:	4630      	mov	r0, r6
 8007666:	490d      	ldr	r1, [pc, #52]	@ (800769c <_scanf_float+0x418>)
 8007668:	f000 f8de 	bl	8007828 <siprintf>
 800766c:	e7d0      	b.n	8007610 <_scanf_float+0x38c>
 800766e:	076d      	lsls	r5, r5, #29
 8007670:	d4dd      	bmi.n	800762e <_scanf_float+0x3aa>
 8007672:	9d03      	ldr	r5, [sp, #12]
 8007674:	602a      	str	r2, [r5, #0]
 8007676:	681d      	ldr	r5, [r3, #0]
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	f7f9 fa32 	bl	8000ae4 <__aeabi_dcmpun>
 8007680:	b120      	cbz	r0, 800768c <_scanf_float+0x408>
 8007682:	4807      	ldr	r0, [pc, #28]	@ (80076a0 <_scanf_float+0x41c>)
 8007684:	f000 fa00 	bl	8007a88 <nanf>
 8007688:	6028      	str	r0, [r5, #0]
 800768a:	e7d5      	b.n	8007638 <_scanf_float+0x3b4>
 800768c:	4630      	mov	r0, r6
 800768e:	4639      	mov	r1, r7
 8007690:	f7f9 fa86 	bl	8000ba0 <__aeabi_d2f>
 8007694:	e7f8      	b.n	8007688 <_scanf_float+0x404>
 8007696:	f04f 0900 	mov.w	r9, #0
 800769a:	e62d      	b.n	80072f8 <_scanf_float+0x74>
 800769c:	0800c620 	.word	0x0800c620
 80076a0:	0800c9d0 	.word	0x0800c9d0

080076a4 <std>:
 80076a4:	2300      	movs	r3, #0
 80076a6:	b510      	push	{r4, lr}
 80076a8:	4604      	mov	r4, r0
 80076aa:	e9c0 3300 	strd	r3, r3, [r0]
 80076ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076b2:	6083      	str	r3, [r0, #8]
 80076b4:	8181      	strh	r1, [r0, #12]
 80076b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80076b8:	81c2      	strh	r2, [r0, #14]
 80076ba:	6183      	str	r3, [r0, #24]
 80076bc:	4619      	mov	r1, r3
 80076be:	2208      	movs	r2, #8
 80076c0:	305c      	adds	r0, #92	@ 0x5c
 80076c2:	f000 f940 	bl	8007946 <memset>
 80076c6:	4b0d      	ldr	r3, [pc, #52]	@ (80076fc <std+0x58>)
 80076c8:	6224      	str	r4, [r4, #32]
 80076ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80076cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007700 <std+0x5c>)
 80076ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007704 <std+0x60>)
 80076d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007708 <std+0x64>)
 80076d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80076d8:	4b0c      	ldr	r3, [pc, #48]	@ (800770c <std+0x68>)
 80076da:	429c      	cmp	r4, r3
 80076dc:	d006      	beq.n	80076ec <std+0x48>
 80076de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076e2:	4294      	cmp	r4, r2
 80076e4:	d002      	beq.n	80076ec <std+0x48>
 80076e6:	33d0      	adds	r3, #208	@ 0xd0
 80076e8:	429c      	cmp	r4, r3
 80076ea:	d105      	bne.n	80076f8 <std+0x54>
 80076ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f4:	f000 b9b6 	b.w	8007a64 <__retarget_lock_init_recursive>
 80076f8:	bd10      	pop	{r4, pc}
 80076fa:	bf00      	nop
 80076fc:	080078bd 	.word	0x080078bd
 8007700:	080078e3 	.word	0x080078e3
 8007704:	0800791b 	.word	0x0800791b
 8007708:	0800793f 	.word	0x0800793f
 800770c:	20000948 	.word	0x20000948

08007710 <stdio_exit_handler>:
 8007710:	4a02      	ldr	r2, [pc, #8]	@ (800771c <stdio_exit_handler+0xc>)
 8007712:	4903      	ldr	r1, [pc, #12]	@ (8007720 <stdio_exit_handler+0x10>)
 8007714:	4803      	ldr	r0, [pc, #12]	@ (8007724 <stdio_exit_handler+0x14>)
 8007716:	f000 b869 	b.w	80077ec <_fwalk_sglue>
 800771a:	bf00      	nop
 800771c:	20000014 	.word	0x20000014
 8007720:	0800a951 	.word	0x0800a951
 8007724:	20000024 	.word	0x20000024

08007728 <cleanup_stdio>:
 8007728:	6841      	ldr	r1, [r0, #4]
 800772a:	4b0c      	ldr	r3, [pc, #48]	@ (800775c <cleanup_stdio+0x34>)
 800772c:	b510      	push	{r4, lr}
 800772e:	4299      	cmp	r1, r3
 8007730:	4604      	mov	r4, r0
 8007732:	d001      	beq.n	8007738 <cleanup_stdio+0x10>
 8007734:	f003 f90c 	bl	800a950 <_fflush_r>
 8007738:	68a1      	ldr	r1, [r4, #8]
 800773a:	4b09      	ldr	r3, [pc, #36]	@ (8007760 <cleanup_stdio+0x38>)
 800773c:	4299      	cmp	r1, r3
 800773e:	d002      	beq.n	8007746 <cleanup_stdio+0x1e>
 8007740:	4620      	mov	r0, r4
 8007742:	f003 f905 	bl	800a950 <_fflush_r>
 8007746:	68e1      	ldr	r1, [r4, #12]
 8007748:	4b06      	ldr	r3, [pc, #24]	@ (8007764 <cleanup_stdio+0x3c>)
 800774a:	4299      	cmp	r1, r3
 800774c:	d004      	beq.n	8007758 <cleanup_stdio+0x30>
 800774e:	4620      	mov	r0, r4
 8007750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007754:	f003 b8fc 	b.w	800a950 <_fflush_r>
 8007758:	bd10      	pop	{r4, pc}
 800775a:	bf00      	nop
 800775c:	20000948 	.word	0x20000948
 8007760:	200009b0 	.word	0x200009b0
 8007764:	20000a18 	.word	0x20000a18

08007768 <global_stdio_init.part.0>:
 8007768:	b510      	push	{r4, lr}
 800776a:	4b0b      	ldr	r3, [pc, #44]	@ (8007798 <global_stdio_init.part.0+0x30>)
 800776c:	4c0b      	ldr	r4, [pc, #44]	@ (800779c <global_stdio_init.part.0+0x34>)
 800776e:	4a0c      	ldr	r2, [pc, #48]	@ (80077a0 <global_stdio_init.part.0+0x38>)
 8007770:	4620      	mov	r0, r4
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	2104      	movs	r1, #4
 8007776:	2200      	movs	r2, #0
 8007778:	f7ff ff94 	bl	80076a4 <std>
 800777c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007780:	2201      	movs	r2, #1
 8007782:	2109      	movs	r1, #9
 8007784:	f7ff ff8e 	bl	80076a4 <std>
 8007788:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800778c:	2202      	movs	r2, #2
 800778e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007792:	2112      	movs	r1, #18
 8007794:	f7ff bf86 	b.w	80076a4 <std>
 8007798:	20000a80 	.word	0x20000a80
 800779c:	20000948 	.word	0x20000948
 80077a0:	08007711 	.word	0x08007711

080077a4 <__sfp_lock_acquire>:
 80077a4:	4801      	ldr	r0, [pc, #4]	@ (80077ac <__sfp_lock_acquire+0x8>)
 80077a6:	f000 b95e 	b.w	8007a66 <__retarget_lock_acquire_recursive>
 80077aa:	bf00      	nop
 80077ac:	20000a89 	.word	0x20000a89

080077b0 <__sfp_lock_release>:
 80077b0:	4801      	ldr	r0, [pc, #4]	@ (80077b8 <__sfp_lock_release+0x8>)
 80077b2:	f000 b959 	b.w	8007a68 <__retarget_lock_release_recursive>
 80077b6:	bf00      	nop
 80077b8:	20000a89 	.word	0x20000a89

080077bc <__sinit>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	4604      	mov	r4, r0
 80077c0:	f7ff fff0 	bl	80077a4 <__sfp_lock_acquire>
 80077c4:	6a23      	ldr	r3, [r4, #32]
 80077c6:	b11b      	cbz	r3, 80077d0 <__sinit+0x14>
 80077c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077cc:	f7ff bff0 	b.w	80077b0 <__sfp_lock_release>
 80077d0:	4b04      	ldr	r3, [pc, #16]	@ (80077e4 <__sinit+0x28>)
 80077d2:	6223      	str	r3, [r4, #32]
 80077d4:	4b04      	ldr	r3, [pc, #16]	@ (80077e8 <__sinit+0x2c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f5      	bne.n	80077c8 <__sinit+0xc>
 80077dc:	f7ff ffc4 	bl	8007768 <global_stdio_init.part.0>
 80077e0:	e7f2      	b.n	80077c8 <__sinit+0xc>
 80077e2:	bf00      	nop
 80077e4:	08007729 	.word	0x08007729
 80077e8:	20000a80 	.word	0x20000a80

080077ec <_fwalk_sglue>:
 80077ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f0:	4607      	mov	r7, r0
 80077f2:	4688      	mov	r8, r1
 80077f4:	4614      	mov	r4, r2
 80077f6:	2600      	movs	r6, #0
 80077f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077fc:	f1b9 0901 	subs.w	r9, r9, #1
 8007800:	d505      	bpl.n	800780e <_fwalk_sglue+0x22>
 8007802:	6824      	ldr	r4, [r4, #0]
 8007804:	2c00      	cmp	r4, #0
 8007806:	d1f7      	bne.n	80077f8 <_fwalk_sglue+0xc>
 8007808:	4630      	mov	r0, r6
 800780a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800780e:	89ab      	ldrh	r3, [r5, #12]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d907      	bls.n	8007824 <_fwalk_sglue+0x38>
 8007814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007818:	3301      	adds	r3, #1
 800781a:	d003      	beq.n	8007824 <_fwalk_sglue+0x38>
 800781c:	4629      	mov	r1, r5
 800781e:	4638      	mov	r0, r7
 8007820:	47c0      	blx	r8
 8007822:	4306      	orrs	r6, r0
 8007824:	3568      	adds	r5, #104	@ 0x68
 8007826:	e7e9      	b.n	80077fc <_fwalk_sglue+0x10>

08007828 <siprintf>:
 8007828:	b40e      	push	{r1, r2, r3}
 800782a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800782e:	b500      	push	{lr}
 8007830:	b09c      	sub	sp, #112	@ 0x70
 8007832:	ab1d      	add	r3, sp, #116	@ 0x74
 8007834:	9002      	str	r0, [sp, #8]
 8007836:	9006      	str	r0, [sp, #24]
 8007838:	9107      	str	r1, [sp, #28]
 800783a:	9104      	str	r1, [sp, #16]
 800783c:	4808      	ldr	r0, [pc, #32]	@ (8007860 <siprintf+0x38>)
 800783e:	4909      	ldr	r1, [pc, #36]	@ (8007864 <siprintf+0x3c>)
 8007840:	f853 2b04 	ldr.w	r2, [r3], #4
 8007844:	9105      	str	r1, [sp, #20]
 8007846:	6800      	ldr	r0, [r0, #0]
 8007848:	a902      	add	r1, sp, #8
 800784a:	9301      	str	r3, [sp, #4]
 800784c:	f002 fbee 	bl	800a02c <_svfiprintf_r>
 8007850:	2200      	movs	r2, #0
 8007852:	9b02      	ldr	r3, [sp, #8]
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	b01c      	add	sp, #112	@ 0x70
 8007858:	f85d eb04 	ldr.w	lr, [sp], #4
 800785c:	b003      	add	sp, #12
 800785e:	4770      	bx	lr
 8007860:	20000020 	.word	0x20000020
 8007864:	ffff0208 	.word	0xffff0208

08007868 <siscanf>:
 8007868:	b40e      	push	{r1, r2, r3}
 800786a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800786e:	b530      	push	{r4, r5, lr}
 8007870:	b09c      	sub	sp, #112	@ 0x70
 8007872:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007874:	f854 5b04 	ldr.w	r5, [r4], #4
 8007878:	f8ad 2014 	strh.w	r2, [sp, #20]
 800787c:	9002      	str	r0, [sp, #8]
 800787e:	9006      	str	r0, [sp, #24]
 8007880:	f7f8 fcd2 	bl	8000228 <strlen>
 8007884:	4b0b      	ldr	r3, [pc, #44]	@ (80078b4 <siscanf+0x4c>)
 8007886:	9003      	str	r0, [sp, #12]
 8007888:	930b      	str	r3, [sp, #44]	@ 0x2c
 800788a:	2300      	movs	r3, #0
 800788c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800788e:	9314      	str	r3, [sp, #80]	@ 0x50
 8007890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007894:	9007      	str	r0, [sp, #28]
 8007896:	4808      	ldr	r0, [pc, #32]	@ (80078b8 <siscanf+0x50>)
 8007898:	f8ad 3016 	strh.w	r3, [sp, #22]
 800789c:	462a      	mov	r2, r5
 800789e:	4623      	mov	r3, r4
 80078a0:	a902      	add	r1, sp, #8
 80078a2:	6800      	ldr	r0, [r0, #0]
 80078a4:	9401      	str	r4, [sp, #4]
 80078a6:	f002 fd15 	bl	800a2d4 <__ssvfiscanf_r>
 80078aa:	b01c      	add	sp, #112	@ 0x70
 80078ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078b0:	b003      	add	sp, #12
 80078b2:	4770      	bx	lr
 80078b4:	080078df 	.word	0x080078df
 80078b8:	20000020 	.word	0x20000020

080078bc <__sread>:
 80078bc:	b510      	push	{r4, lr}
 80078be:	460c      	mov	r4, r1
 80078c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c4:	f000 f880 	bl	80079c8 <_read_r>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	bfab      	itete	ge
 80078cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078ce:	89a3      	ldrhlt	r3, [r4, #12]
 80078d0:	181b      	addge	r3, r3, r0
 80078d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078d6:	bfac      	ite	ge
 80078d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078da:	81a3      	strhlt	r3, [r4, #12]
 80078dc:	bd10      	pop	{r4, pc}

080078de <__seofread>:
 80078de:	2000      	movs	r0, #0
 80078e0:	4770      	bx	lr

080078e2 <__swrite>:
 80078e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e6:	461f      	mov	r7, r3
 80078e8:	898b      	ldrh	r3, [r1, #12]
 80078ea:	4605      	mov	r5, r0
 80078ec:	05db      	lsls	r3, r3, #23
 80078ee:	460c      	mov	r4, r1
 80078f0:	4616      	mov	r6, r2
 80078f2:	d505      	bpl.n	8007900 <__swrite+0x1e>
 80078f4:	2302      	movs	r3, #2
 80078f6:	2200      	movs	r2, #0
 80078f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fc:	f000 f852 	bl	80079a4 <_lseek_r>
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	4632      	mov	r2, r6
 8007904:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	4628      	mov	r0, r5
 800790c:	463b      	mov	r3, r7
 800790e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	f000 b869 	b.w	80079ec <_write_r>

0800791a <__sseek>:
 800791a:	b510      	push	{r4, lr}
 800791c:	460c      	mov	r4, r1
 800791e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007922:	f000 f83f 	bl	80079a4 <_lseek_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	bf15      	itete	ne
 800792c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800792e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007936:	81a3      	strheq	r3, [r4, #12]
 8007938:	bf18      	it	ne
 800793a:	81a3      	strhne	r3, [r4, #12]
 800793c:	bd10      	pop	{r4, pc}

0800793e <__sclose>:
 800793e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007942:	f000 b81f 	b.w	8007984 <_close_r>

08007946 <memset>:
 8007946:	4603      	mov	r3, r0
 8007948:	4402      	add	r2, r0
 800794a:	4293      	cmp	r3, r2
 800794c:	d100      	bne.n	8007950 <memset+0xa>
 800794e:	4770      	bx	lr
 8007950:	f803 1b01 	strb.w	r1, [r3], #1
 8007954:	e7f9      	b.n	800794a <memset+0x4>

08007956 <strncmp>:
 8007956:	b510      	push	{r4, lr}
 8007958:	b16a      	cbz	r2, 8007976 <strncmp+0x20>
 800795a:	3901      	subs	r1, #1
 800795c:	1884      	adds	r4, r0, r2
 800795e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007962:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007966:	429a      	cmp	r2, r3
 8007968:	d103      	bne.n	8007972 <strncmp+0x1c>
 800796a:	42a0      	cmp	r0, r4
 800796c:	d001      	beq.n	8007972 <strncmp+0x1c>
 800796e:	2a00      	cmp	r2, #0
 8007970:	d1f5      	bne.n	800795e <strncmp+0x8>
 8007972:	1ad0      	subs	r0, r2, r3
 8007974:	bd10      	pop	{r4, pc}
 8007976:	4610      	mov	r0, r2
 8007978:	e7fc      	b.n	8007974 <strncmp+0x1e>
	...

0800797c <_localeconv_r>:
 800797c:	4800      	ldr	r0, [pc, #0]	@ (8007980 <_localeconv_r+0x4>)
 800797e:	4770      	bx	lr
 8007980:	20000160 	.word	0x20000160

08007984 <_close_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	2300      	movs	r3, #0
 8007988:	4d05      	ldr	r5, [pc, #20]	@ (80079a0 <_close_r+0x1c>)
 800798a:	4604      	mov	r4, r0
 800798c:	4608      	mov	r0, r1
 800798e:	602b      	str	r3, [r5, #0]
 8007990:	f7fb fd83 	bl	800349a <_close>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d102      	bne.n	800799e <_close_r+0x1a>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	b103      	cbz	r3, 800799e <_close_r+0x1a>
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	20000a84 	.word	0x20000a84

080079a4 <_lseek_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4604      	mov	r4, r0
 80079a8:	4608      	mov	r0, r1
 80079aa:	4611      	mov	r1, r2
 80079ac:	2200      	movs	r2, #0
 80079ae:	4d05      	ldr	r5, [pc, #20]	@ (80079c4 <_lseek_r+0x20>)
 80079b0:	602a      	str	r2, [r5, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f7fb fd95 	bl	80034e2 <_lseek>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d102      	bne.n	80079c2 <_lseek_r+0x1e>
 80079bc:	682b      	ldr	r3, [r5, #0]
 80079be:	b103      	cbz	r3, 80079c2 <_lseek_r+0x1e>
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	20000a84 	.word	0x20000a84

080079c8 <_read_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4604      	mov	r4, r0
 80079cc:	4608      	mov	r0, r1
 80079ce:	4611      	mov	r1, r2
 80079d0:	2200      	movs	r2, #0
 80079d2:	4d05      	ldr	r5, [pc, #20]	@ (80079e8 <_read_r+0x20>)
 80079d4:	602a      	str	r2, [r5, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	f7fb fd26 	bl	8003428 <_read>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_read_r+0x1e>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_read_r+0x1e>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	20000a84 	.word	0x20000a84

080079ec <_write_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4604      	mov	r4, r0
 80079f0:	4608      	mov	r0, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	2200      	movs	r2, #0
 80079f6:	4d05      	ldr	r5, [pc, #20]	@ (8007a0c <_write_r+0x20>)
 80079f8:	602a      	str	r2, [r5, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f7fb fd31 	bl	8003462 <_write>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_write_r+0x1e>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_write_r+0x1e>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	20000a84 	.word	0x20000a84

08007a10 <__errno>:
 8007a10:	4b01      	ldr	r3, [pc, #4]	@ (8007a18 <__errno+0x8>)
 8007a12:	6818      	ldr	r0, [r3, #0]
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	20000020 	.word	0x20000020

08007a1c <__libc_init_array>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	2600      	movs	r6, #0
 8007a20:	4d0c      	ldr	r5, [pc, #48]	@ (8007a54 <__libc_init_array+0x38>)
 8007a22:	4c0d      	ldr	r4, [pc, #52]	@ (8007a58 <__libc_init_array+0x3c>)
 8007a24:	1b64      	subs	r4, r4, r5
 8007a26:	10a4      	asrs	r4, r4, #2
 8007a28:	42a6      	cmp	r6, r4
 8007a2a:	d109      	bne.n	8007a40 <__libc_init_array+0x24>
 8007a2c:	f004 f8a4 	bl	800bb78 <_init>
 8007a30:	2600      	movs	r6, #0
 8007a32:	4d0a      	ldr	r5, [pc, #40]	@ (8007a5c <__libc_init_array+0x40>)
 8007a34:	4c0a      	ldr	r4, [pc, #40]	@ (8007a60 <__libc_init_array+0x44>)
 8007a36:	1b64      	subs	r4, r4, r5
 8007a38:	10a4      	asrs	r4, r4, #2
 8007a3a:	42a6      	cmp	r6, r4
 8007a3c:	d105      	bne.n	8007a4a <__libc_init_array+0x2e>
 8007a3e:	bd70      	pop	{r4, r5, r6, pc}
 8007a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a44:	4798      	blx	r3
 8007a46:	3601      	adds	r6, #1
 8007a48:	e7ee      	b.n	8007a28 <__libc_init_array+0xc>
 8007a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a4e:	4798      	blx	r3
 8007a50:	3601      	adds	r6, #1
 8007a52:	e7f2      	b.n	8007a3a <__libc_init_array+0x1e>
 8007a54:	0800ca3c 	.word	0x0800ca3c
 8007a58:	0800ca3c 	.word	0x0800ca3c
 8007a5c:	0800ca3c 	.word	0x0800ca3c
 8007a60:	0800ca40 	.word	0x0800ca40

08007a64 <__retarget_lock_init_recursive>:
 8007a64:	4770      	bx	lr

08007a66 <__retarget_lock_acquire_recursive>:
 8007a66:	4770      	bx	lr

08007a68 <__retarget_lock_release_recursive>:
 8007a68:	4770      	bx	lr

08007a6a <memchr>:
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	b2c9      	uxtb	r1, r1
 8007a70:	4402      	add	r2, r0
 8007a72:	4293      	cmp	r3, r2
 8007a74:	4618      	mov	r0, r3
 8007a76:	d101      	bne.n	8007a7c <memchr+0x12>
 8007a78:	2000      	movs	r0, #0
 8007a7a:	e003      	b.n	8007a84 <memchr+0x1a>
 8007a7c:	7804      	ldrb	r4, [r0, #0]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	428c      	cmp	r4, r1
 8007a82:	d1f6      	bne.n	8007a72 <memchr+0x8>
 8007a84:	bd10      	pop	{r4, pc}
	...

08007a88 <nanf>:
 8007a88:	4800      	ldr	r0, [pc, #0]	@ (8007a8c <nanf+0x4>)
 8007a8a:	4770      	bx	lr
 8007a8c:	7fc00000 	.word	0x7fc00000

08007a90 <quorem>:
 8007a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	6903      	ldr	r3, [r0, #16]
 8007a96:	690c      	ldr	r4, [r1, #16]
 8007a98:	4607      	mov	r7, r0
 8007a9a:	42a3      	cmp	r3, r4
 8007a9c:	db7e      	blt.n	8007b9c <quorem+0x10c>
 8007a9e:	3c01      	subs	r4, #1
 8007aa0:	00a3      	lsls	r3, r4, #2
 8007aa2:	f100 0514 	add.w	r5, r0, #20
 8007aa6:	f101 0814 	add.w	r8, r1, #20
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ab6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aba:	3301      	adds	r3, #1
 8007abc:	429a      	cmp	r2, r3
 8007abe:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ac2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ac6:	d32e      	bcc.n	8007b26 <quorem+0x96>
 8007ac8:	f04f 0a00 	mov.w	sl, #0
 8007acc:	46c4      	mov	ip, r8
 8007ace:	46ae      	mov	lr, r5
 8007ad0:	46d3      	mov	fp, sl
 8007ad2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ad6:	b298      	uxth	r0, r3
 8007ad8:	fb06 a000 	mla	r0, r6, r0, sl
 8007adc:	0c1b      	lsrs	r3, r3, #16
 8007ade:	0c02      	lsrs	r2, r0, #16
 8007ae0:	fb06 2303 	mla	r3, r6, r3, r2
 8007ae4:	f8de 2000 	ldr.w	r2, [lr]
 8007ae8:	b280      	uxth	r0, r0
 8007aea:	b292      	uxth	r2, r2
 8007aec:	1a12      	subs	r2, r2, r0
 8007aee:	445a      	add	r2, fp
 8007af0:	f8de 0000 	ldr.w	r0, [lr]
 8007af4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007afe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b02:	b292      	uxth	r2, r2
 8007b04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b08:	45e1      	cmp	r9, ip
 8007b0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b0e:	f84e 2b04 	str.w	r2, [lr], #4
 8007b12:	d2de      	bcs.n	8007ad2 <quorem+0x42>
 8007b14:	9b00      	ldr	r3, [sp, #0]
 8007b16:	58eb      	ldr	r3, [r5, r3]
 8007b18:	b92b      	cbnz	r3, 8007b26 <quorem+0x96>
 8007b1a:	9b01      	ldr	r3, [sp, #4]
 8007b1c:	3b04      	subs	r3, #4
 8007b1e:	429d      	cmp	r5, r3
 8007b20:	461a      	mov	r2, r3
 8007b22:	d32f      	bcc.n	8007b84 <quorem+0xf4>
 8007b24:	613c      	str	r4, [r7, #16]
 8007b26:	4638      	mov	r0, r7
 8007b28:	f001 f9c2 	bl	8008eb0 <__mcmp>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	db25      	blt.n	8007b7c <quorem+0xec>
 8007b30:	4629      	mov	r1, r5
 8007b32:	2000      	movs	r0, #0
 8007b34:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b38:	f8d1 c000 	ldr.w	ip, [r1]
 8007b3c:	fa1f fe82 	uxth.w	lr, r2
 8007b40:	fa1f f38c 	uxth.w	r3, ip
 8007b44:	eba3 030e 	sub.w	r3, r3, lr
 8007b48:	4403      	add	r3, r0
 8007b4a:	0c12      	lsrs	r2, r2, #16
 8007b4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b5a:	45c1      	cmp	r9, r8
 8007b5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b60:	f841 3b04 	str.w	r3, [r1], #4
 8007b64:	d2e6      	bcs.n	8007b34 <quorem+0xa4>
 8007b66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b6e:	b922      	cbnz	r2, 8007b7a <quorem+0xea>
 8007b70:	3b04      	subs	r3, #4
 8007b72:	429d      	cmp	r5, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	d30b      	bcc.n	8007b90 <quorem+0x100>
 8007b78:	613c      	str	r4, [r7, #16]
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	b003      	add	sp, #12
 8007b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	3b04      	subs	r3, #4
 8007b88:	2a00      	cmp	r2, #0
 8007b8a:	d1cb      	bne.n	8007b24 <quorem+0x94>
 8007b8c:	3c01      	subs	r4, #1
 8007b8e:	e7c6      	b.n	8007b1e <quorem+0x8e>
 8007b90:	6812      	ldr	r2, [r2, #0]
 8007b92:	3b04      	subs	r3, #4
 8007b94:	2a00      	cmp	r2, #0
 8007b96:	d1ef      	bne.n	8007b78 <quorem+0xe8>
 8007b98:	3c01      	subs	r4, #1
 8007b9a:	e7ea      	b.n	8007b72 <quorem+0xe2>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	e7ee      	b.n	8007b7e <quorem+0xee>

08007ba0 <_dtoa_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	461d      	mov	r5, r3
 8007ba8:	69c7      	ldr	r7, [r0, #28]
 8007baa:	b097      	sub	sp, #92	@ 0x5c
 8007bac:	4683      	mov	fp, r0
 8007bae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007bb2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007bb4:	b97f      	cbnz	r7, 8007bd6 <_dtoa_r+0x36>
 8007bb6:	2010      	movs	r0, #16
 8007bb8:	f000 fe02 	bl	80087c0 <malloc>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	f8cb 001c 	str.w	r0, [fp, #28]
 8007bc2:	b920      	cbnz	r0, 8007bce <_dtoa_r+0x2e>
 8007bc4:	21ef      	movs	r1, #239	@ 0xef
 8007bc6:	4ba8      	ldr	r3, [pc, #672]	@ (8007e68 <_dtoa_r+0x2c8>)
 8007bc8:	48a8      	ldr	r0, [pc, #672]	@ (8007e6c <_dtoa_r+0x2cc>)
 8007bca:	f002 ff99 	bl	800ab00 <__assert_func>
 8007bce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007bd2:	6007      	str	r7, [r0, #0]
 8007bd4:	60c7      	str	r7, [r0, #12]
 8007bd6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bda:	6819      	ldr	r1, [r3, #0]
 8007bdc:	b159      	cbz	r1, 8007bf6 <_dtoa_r+0x56>
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	2301      	movs	r3, #1
 8007be2:	4093      	lsls	r3, r2
 8007be4:	604a      	str	r2, [r1, #4]
 8007be6:	608b      	str	r3, [r1, #8]
 8007be8:	4658      	mov	r0, fp
 8007bea:	f000 fedf 	bl	80089ac <_Bfree>
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	1e2b      	subs	r3, r5, #0
 8007bf8:	bfaf      	iteee	ge
 8007bfa:	2300      	movge	r3, #0
 8007bfc:	2201      	movlt	r2, #1
 8007bfe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c02:	9303      	strlt	r3, [sp, #12]
 8007c04:	bfa8      	it	ge
 8007c06:	6033      	strge	r3, [r6, #0]
 8007c08:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007c0c:	4b98      	ldr	r3, [pc, #608]	@ (8007e70 <_dtoa_r+0x2d0>)
 8007c0e:	bfb8      	it	lt
 8007c10:	6032      	strlt	r2, [r6, #0]
 8007c12:	ea33 0308 	bics.w	r3, r3, r8
 8007c16:	d112      	bne.n	8007c3e <_dtoa_r+0x9e>
 8007c18:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c1c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007c24:	4323      	orrs	r3, r4
 8007c26:	f000 8550 	beq.w	80086ca <_dtoa_r+0xb2a>
 8007c2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c2c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007e74 <_dtoa_r+0x2d4>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8552 	beq.w	80086da <_dtoa_r+0xb3a>
 8007c36:	f10a 0303 	add.w	r3, sl, #3
 8007c3a:	f000 bd4c 	b.w	80086d6 <_dtoa_r+0xb36>
 8007c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f7f8 ff17 	bl	8000a80 <__aeabi_dcmpeq>
 8007c52:	4607      	mov	r7, r0
 8007c54:	b158      	cbz	r0, 8007c6e <_dtoa_r+0xce>
 8007c56:	2301      	movs	r3, #1
 8007c58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c5e:	b113      	cbz	r3, 8007c66 <_dtoa_r+0xc6>
 8007c60:	4b85      	ldr	r3, [pc, #532]	@ (8007e78 <_dtoa_r+0x2d8>)
 8007c62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007e7c <_dtoa_r+0x2dc>
 8007c6a:	f000 bd36 	b.w	80086da <_dtoa_r+0xb3a>
 8007c6e:	ab14      	add	r3, sp, #80	@ 0x50
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	ab15      	add	r3, sp, #84	@ 0x54
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4658      	mov	r0, fp
 8007c78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007c7c:	f001 fa30 	bl	80090e0 <__d2b>
 8007c80:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007c84:	4681      	mov	r9, r0
 8007c86:	2e00      	cmp	r6, #0
 8007c88:	d077      	beq.n	8007d7a <_dtoa_r+0x1da>
 8007c8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c90:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c98:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c9c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ca0:	9712      	str	r7, [sp, #72]	@ 0x48
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	4b76      	ldr	r3, [pc, #472]	@ (8007e80 <_dtoa_r+0x2e0>)
 8007ca8:	f7f8 faca 	bl	8000240 <__aeabi_dsub>
 8007cac:	a368      	add	r3, pc, #416	@ (adr r3, 8007e50 <_dtoa_r+0x2b0>)
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f7f8 fc7d 	bl	80005b0 <__aeabi_dmul>
 8007cb6:	a368      	add	r3, pc, #416	@ (adr r3, 8007e58 <_dtoa_r+0x2b8>)
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f7f8 fac2 	bl	8000244 <__adddf3>
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	460d      	mov	r5, r1
 8007cc6:	f7f8 fc09 	bl	80004dc <__aeabi_i2d>
 8007cca:	a365      	add	r3, pc, #404	@ (adr r3, 8007e60 <_dtoa_r+0x2c0>)
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f7f8 fc6e 	bl	80005b0 <__aeabi_dmul>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4620      	mov	r0, r4
 8007cda:	4629      	mov	r1, r5
 8007cdc:	f7f8 fab2 	bl	8000244 <__adddf3>
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	460d      	mov	r5, r1
 8007ce4:	f7f8 ff14 	bl	8000b10 <__aeabi_d2iz>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4607      	mov	r7, r0
 8007cec:	2300      	movs	r3, #0
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 fecf 	bl	8000a94 <__aeabi_dcmplt>
 8007cf6:	b140      	cbz	r0, 8007d0a <_dtoa_r+0x16a>
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f7f8 fbef 	bl	80004dc <__aeabi_i2d>
 8007cfe:	4622      	mov	r2, r4
 8007d00:	462b      	mov	r3, r5
 8007d02:	f7f8 febd 	bl	8000a80 <__aeabi_dcmpeq>
 8007d06:	b900      	cbnz	r0, 8007d0a <_dtoa_r+0x16a>
 8007d08:	3f01      	subs	r7, #1
 8007d0a:	2f16      	cmp	r7, #22
 8007d0c:	d853      	bhi.n	8007db6 <_dtoa_r+0x216>
 8007d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d12:	4b5c      	ldr	r3, [pc, #368]	@ (8007e84 <_dtoa_r+0x2e4>)
 8007d14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f7f8 feba 	bl	8000a94 <__aeabi_dcmplt>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d04a      	beq.n	8007dba <_dtoa_r+0x21a>
 8007d24:	2300      	movs	r3, #0
 8007d26:	3f01      	subs	r7, #1
 8007d28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d2c:	1b9b      	subs	r3, r3, r6
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	bf46      	itte	mi
 8007d32:	f1c3 0801 	rsbmi	r8, r3, #1
 8007d36:	2300      	movmi	r3, #0
 8007d38:	f04f 0800 	movpl.w	r8, #0
 8007d3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d3e:	bf48      	it	mi
 8007d40:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007d42:	2f00      	cmp	r7, #0
 8007d44:	db3b      	blt.n	8007dbe <_dtoa_r+0x21e>
 8007d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d48:	970e      	str	r7, [sp, #56]	@ 0x38
 8007d4a:	443b      	add	r3, r7
 8007d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d4e:	2300      	movs	r3, #0
 8007d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d54:	2b09      	cmp	r3, #9
 8007d56:	d866      	bhi.n	8007e26 <_dtoa_r+0x286>
 8007d58:	2b05      	cmp	r3, #5
 8007d5a:	bfc4      	itt	gt
 8007d5c:	3b04      	subgt	r3, #4
 8007d5e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007d60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d62:	bfc8      	it	gt
 8007d64:	2400      	movgt	r4, #0
 8007d66:	f1a3 0302 	sub.w	r3, r3, #2
 8007d6a:	bfd8      	it	le
 8007d6c:	2401      	movle	r4, #1
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d864      	bhi.n	8007e3c <_dtoa_r+0x29c>
 8007d72:	e8df f003 	tbb	[pc, r3]
 8007d76:	382b      	.short	0x382b
 8007d78:	5636      	.short	0x5636
 8007d7a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007d7e:	441e      	add	r6, r3
 8007d80:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	bfc1      	itttt	gt
 8007d88:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007d90:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d94:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d98:	bfd6      	itet	le
 8007d9a:	f1c3 0320 	rsble	r3, r3, #32
 8007d9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007da2:	fa04 f003 	lslle.w	r0, r4, r3
 8007da6:	f7f8 fb89 	bl	80004bc <__aeabi_ui2d>
 8007daa:	2201      	movs	r2, #1
 8007dac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007db0:	3e01      	subs	r6, #1
 8007db2:	9212      	str	r2, [sp, #72]	@ 0x48
 8007db4:	e775      	b.n	8007ca2 <_dtoa_r+0x102>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e7b6      	b.n	8007d28 <_dtoa_r+0x188>
 8007dba:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007dbc:	e7b5      	b.n	8007d2a <_dtoa_r+0x18a>
 8007dbe:	427b      	negs	r3, r7
 8007dc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	eba8 0807 	sub.w	r8, r8, r7
 8007dc8:	930e      	str	r3, [sp, #56]	@ 0x38
 8007dca:	e7c2      	b.n	8007d52 <_dtoa_r+0x1b2>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dc35      	bgt.n	8007e42 <_dtoa_r+0x2a2>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	461a      	mov	r2, r3
 8007dda:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007dde:	9221      	str	r2, [sp, #132]	@ 0x84
 8007de0:	e00b      	b.n	8007dfa <_dtoa_r+0x25a>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e7f3      	b.n	8007dce <_dtoa_r+0x22e>
 8007de6:	2300      	movs	r3, #0
 8007de8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dec:	18fb      	adds	r3, r7, r3
 8007dee:	9308      	str	r3, [sp, #32]
 8007df0:	3301      	adds	r3, #1
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	9307      	str	r3, [sp, #28]
 8007df6:	bfb8      	it	lt
 8007df8:	2301      	movlt	r3, #1
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	2204      	movs	r2, #4
 8007dfe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007e02:	f102 0514 	add.w	r5, r2, #20
 8007e06:	429d      	cmp	r5, r3
 8007e08:	d91f      	bls.n	8007e4a <_dtoa_r+0x2aa>
 8007e0a:	6041      	str	r1, [r0, #4]
 8007e0c:	4658      	mov	r0, fp
 8007e0e:	f000 fd8d 	bl	800892c <_Balloc>
 8007e12:	4682      	mov	sl, r0
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d139      	bne.n	8007e8c <_dtoa_r+0x2ec>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007e88 <_dtoa_r+0x2e8>)
 8007e20:	e6d2      	b.n	8007bc8 <_dtoa_r+0x28>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e7e0      	b.n	8007de8 <_dtoa_r+0x248>
 8007e26:	2401      	movs	r4, #1
 8007e28:	2300      	movs	r3, #0
 8007e2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e2c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e32:	2200      	movs	r2, #0
 8007e34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007e38:	2312      	movs	r3, #18
 8007e3a:	e7d0      	b.n	8007dde <_dtoa_r+0x23e>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e40:	e7f5      	b.n	8007e2e <_dtoa_r+0x28e>
 8007e42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e44:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007e48:	e7d7      	b.n	8007dfa <_dtoa_r+0x25a>
 8007e4a:	3101      	adds	r1, #1
 8007e4c:	0052      	lsls	r2, r2, #1
 8007e4e:	e7d8      	b.n	8007e02 <_dtoa_r+0x262>
 8007e50:	636f4361 	.word	0x636f4361
 8007e54:	3fd287a7 	.word	0x3fd287a7
 8007e58:	8b60c8b3 	.word	0x8b60c8b3
 8007e5c:	3fc68a28 	.word	0x3fc68a28
 8007e60:	509f79fb 	.word	0x509f79fb
 8007e64:	3fd34413 	.word	0x3fd34413
 8007e68:	0800c632 	.word	0x0800c632
 8007e6c:	0800c649 	.word	0x0800c649
 8007e70:	7ff00000 	.word	0x7ff00000
 8007e74:	0800c62e 	.word	0x0800c62e
 8007e78:	0800c989 	.word	0x0800c989
 8007e7c:	0800c988 	.word	0x0800c988
 8007e80:	3ff80000 	.word	0x3ff80000
 8007e84:	0800c740 	.word	0x0800c740
 8007e88:	0800c6a1 	.word	0x0800c6a1
 8007e8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e90:	6018      	str	r0, [r3, #0]
 8007e92:	9b07      	ldr	r3, [sp, #28]
 8007e94:	2b0e      	cmp	r3, #14
 8007e96:	f200 80a4 	bhi.w	8007fe2 <_dtoa_r+0x442>
 8007e9a:	2c00      	cmp	r4, #0
 8007e9c:	f000 80a1 	beq.w	8007fe2 <_dtoa_r+0x442>
 8007ea0:	2f00      	cmp	r7, #0
 8007ea2:	dd33      	ble.n	8007f0c <_dtoa_r+0x36c>
 8007ea4:	4b86      	ldr	r3, [pc, #536]	@ (80080c0 <_dtoa_r+0x520>)
 8007ea6:	f007 020f 	and.w	r2, r7, #15
 8007eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eae:	05f8      	lsls	r0, r7, #23
 8007eb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007eb4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007eb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ebc:	d516      	bpl.n	8007eec <_dtoa_r+0x34c>
 8007ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ec2:	4b80      	ldr	r3, [pc, #512]	@ (80080c4 <_dtoa_r+0x524>)
 8007ec4:	2603      	movs	r6, #3
 8007ec6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007eca:	f7f8 fc9b 	bl	8000804 <__aeabi_ddiv>
 8007ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed2:	f004 040f 	and.w	r4, r4, #15
 8007ed6:	4d7b      	ldr	r5, [pc, #492]	@ (80080c4 <_dtoa_r+0x524>)
 8007ed8:	b954      	cbnz	r4, 8007ef0 <_dtoa_r+0x350>
 8007eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee2:	f7f8 fc8f 	bl	8000804 <__aeabi_ddiv>
 8007ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eea:	e028      	b.n	8007f3e <_dtoa_r+0x39e>
 8007eec:	2602      	movs	r6, #2
 8007eee:	e7f2      	b.n	8007ed6 <_dtoa_r+0x336>
 8007ef0:	07e1      	lsls	r1, r4, #31
 8007ef2:	d508      	bpl.n	8007f06 <_dtoa_r+0x366>
 8007ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007efc:	f7f8 fb58 	bl	80005b0 <__aeabi_dmul>
 8007f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f04:	3601      	adds	r6, #1
 8007f06:	1064      	asrs	r4, r4, #1
 8007f08:	3508      	adds	r5, #8
 8007f0a:	e7e5      	b.n	8007ed8 <_dtoa_r+0x338>
 8007f0c:	f000 80d2 	beq.w	80080b4 <_dtoa_r+0x514>
 8007f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f14:	427c      	negs	r4, r7
 8007f16:	4b6a      	ldr	r3, [pc, #424]	@ (80080c0 <_dtoa_r+0x520>)
 8007f18:	f004 020f 	and.w	r2, r4, #15
 8007f1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f7f8 fb44 	bl	80005b0 <__aeabi_dmul>
 8007f28:	2602      	movs	r6, #2
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f30:	4d64      	ldr	r5, [pc, #400]	@ (80080c4 <_dtoa_r+0x524>)
 8007f32:	1124      	asrs	r4, r4, #4
 8007f34:	2c00      	cmp	r4, #0
 8007f36:	f040 80b2 	bne.w	800809e <_dtoa_r+0x4fe>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1d3      	bne.n	8007ee6 <_dtoa_r+0x346>
 8007f3e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 80b7 	beq.w	80080b8 <_dtoa_r+0x518>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	4629      	mov	r1, r5
 8007f50:	4b5d      	ldr	r3, [pc, #372]	@ (80080c8 <_dtoa_r+0x528>)
 8007f52:	f7f8 fd9f 	bl	8000a94 <__aeabi_dcmplt>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f000 80ae 	beq.w	80080b8 <_dtoa_r+0x518>
 8007f5c:	9b07      	ldr	r3, [sp, #28]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 80aa 	beq.w	80080b8 <_dtoa_r+0x518>
 8007f64:	9b08      	ldr	r3, [sp, #32]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dd37      	ble.n	8007fda <_dtoa_r+0x43a>
 8007f6a:	1e7b      	subs	r3, r7, #1
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	9304      	str	r3, [sp, #16]
 8007f70:	2200      	movs	r2, #0
 8007f72:	4629      	mov	r1, r5
 8007f74:	4b55      	ldr	r3, [pc, #340]	@ (80080cc <_dtoa_r+0x52c>)
 8007f76:	f7f8 fb1b 	bl	80005b0 <__aeabi_dmul>
 8007f7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f7e:	9c08      	ldr	r4, [sp, #32]
 8007f80:	3601      	adds	r6, #1
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7f8 faaa 	bl	80004dc <__aeabi_i2d>
 8007f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f8c:	f7f8 fb10 	bl	80005b0 <__aeabi_dmul>
 8007f90:	2200      	movs	r2, #0
 8007f92:	4b4f      	ldr	r3, [pc, #316]	@ (80080d0 <_dtoa_r+0x530>)
 8007f94:	f7f8 f956 	bl	8000244 <__adddf3>
 8007f98:	4605      	mov	r5, r0
 8007f9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	f040 809a 	bne.w	80080d8 <_dtoa_r+0x538>
 8007fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	4b4a      	ldr	r3, [pc, #296]	@ (80080d4 <_dtoa_r+0x534>)
 8007fac:	f7f8 f948 	bl	8000240 <__aeabi_dsub>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fb8:	462a      	mov	r2, r5
 8007fba:	4633      	mov	r3, r6
 8007fbc:	f7f8 fd88 	bl	8000ad0 <__aeabi_dcmpgt>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	f040 828e 	bne.w	80084e2 <_dtoa_r+0x942>
 8007fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fca:	462a      	mov	r2, r5
 8007fcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fd0:	f7f8 fd60 	bl	8000a94 <__aeabi_dcmplt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f040 8127 	bne.w	8008228 <_dtoa_r+0x688>
 8007fda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007fde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007fe2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f2c0 8163 	blt.w	80082b0 <_dtoa_r+0x710>
 8007fea:	2f0e      	cmp	r7, #14
 8007fec:	f300 8160 	bgt.w	80082b0 <_dtoa_r+0x710>
 8007ff0:	4b33      	ldr	r3, [pc, #204]	@ (80080c0 <_dtoa_r+0x520>)
 8007ff2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ff6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ffa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ffe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008000:	2b00      	cmp	r3, #0
 8008002:	da03      	bge.n	800800c <_dtoa_r+0x46c>
 8008004:	9b07      	ldr	r3, [sp, #28]
 8008006:	2b00      	cmp	r3, #0
 8008008:	f340 8100 	ble.w	800820c <_dtoa_r+0x66c>
 800800c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008010:	4656      	mov	r6, sl
 8008012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008016:	4620      	mov	r0, r4
 8008018:	4629      	mov	r1, r5
 800801a:	f7f8 fbf3 	bl	8000804 <__aeabi_ddiv>
 800801e:	f7f8 fd77 	bl	8000b10 <__aeabi_d2iz>
 8008022:	4680      	mov	r8, r0
 8008024:	f7f8 fa5a 	bl	80004dc <__aeabi_i2d>
 8008028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800802c:	f7f8 fac0 	bl	80005b0 <__aeabi_dmul>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 f902 	bl	8000240 <__aeabi_dsub>
 800803c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008040:	9d07      	ldr	r5, [sp, #28]
 8008042:	f806 4b01 	strb.w	r4, [r6], #1
 8008046:	eba6 040a 	sub.w	r4, r6, sl
 800804a:	42a5      	cmp	r5, r4
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	f040 8116 	bne.w	8008280 <_dtoa_r+0x6e0>
 8008054:	f7f8 f8f6 	bl	8000244 <__adddf3>
 8008058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800805c:	4604      	mov	r4, r0
 800805e:	460d      	mov	r5, r1
 8008060:	f7f8 fd36 	bl	8000ad0 <__aeabi_dcmpgt>
 8008064:	2800      	cmp	r0, #0
 8008066:	f040 80f8 	bne.w	800825a <_dtoa_r+0x6ba>
 800806a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800806e:	4620      	mov	r0, r4
 8008070:	4629      	mov	r1, r5
 8008072:	f7f8 fd05 	bl	8000a80 <__aeabi_dcmpeq>
 8008076:	b118      	cbz	r0, 8008080 <_dtoa_r+0x4e0>
 8008078:	f018 0f01 	tst.w	r8, #1
 800807c:	f040 80ed 	bne.w	800825a <_dtoa_r+0x6ba>
 8008080:	4649      	mov	r1, r9
 8008082:	4658      	mov	r0, fp
 8008084:	f000 fc92 	bl	80089ac <_Bfree>
 8008088:	2300      	movs	r3, #0
 800808a:	7033      	strb	r3, [r6, #0]
 800808c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800808e:	3701      	adds	r7, #1
 8008090:	601f      	str	r7, [r3, #0]
 8008092:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 8320 	beq.w	80086da <_dtoa_r+0xb3a>
 800809a:	601e      	str	r6, [r3, #0]
 800809c:	e31d      	b.n	80086da <_dtoa_r+0xb3a>
 800809e:	07e2      	lsls	r2, r4, #31
 80080a0:	d505      	bpl.n	80080ae <_dtoa_r+0x50e>
 80080a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080a6:	f7f8 fa83 	bl	80005b0 <__aeabi_dmul>
 80080aa:	2301      	movs	r3, #1
 80080ac:	3601      	adds	r6, #1
 80080ae:	1064      	asrs	r4, r4, #1
 80080b0:	3508      	adds	r5, #8
 80080b2:	e73f      	b.n	8007f34 <_dtoa_r+0x394>
 80080b4:	2602      	movs	r6, #2
 80080b6:	e742      	b.n	8007f3e <_dtoa_r+0x39e>
 80080b8:	9c07      	ldr	r4, [sp, #28]
 80080ba:	9704      	str	r7, [sp, #16]
 80080bc:	e761      	b.n	8007f82 <_dtoa_r+0x3e2>
 80080be:	bf00      	nop
 80080c0:	0800c740 	.word	0x0800c740
 80080c4:	0800c718 	.word	0x0800c718
 80080c8:	3ff00000 	.word	0x3ff00000
 80080cc:	40240000 	.word	0x40240000
 80080d0:	401c0000 	.word	0x401c0000
 80080d4:	40140000 	.word	0x40140000
 80080d8:	4b70      	ldr	r3, [pc, #448]	@ (800829c <_dtoa_r+0x6fc>)
 80080da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080e4:	4454      	add	r4, sl
 80080e6:	2900      	cmp	r1, #0
 80080e8:	d045      	beq.n	8008176 <_dtoa_r+0x5d6>
 80080ea:	2000      	movs	r0, #0
 80080ec:	496c      	ldr	r1, [pc, #432]	@ (80082a0 <_dtoa_r+0x700>)
 80080ee:	f7f8 fb89 	bl	8000804 <__aeabi_ddiv>
 80080f2:	4633      	mov	r3, r6
 80080f4:	462a      	mov	r2, r5
 80080f6:	f7f8 f8a3 	bl	8000240 <__aeabi_dsub>
 80080fa:	4656      	mov	r6, sl
 80080fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008104:	f7f8 fd04 	bl	8000b10 <__aeabi_d2iz>
 8008108:	4605      	mov	r5, r0
 800810a:	f7f8 f9e7 	bl	80004dc <__aeabi_i2d>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008116:	f7f8 f893 	bl	8000240 <__aeabi_dsub>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	3530      	adds	r5, #48	@ 0x30
 8008120:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008124:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008128:	f806 5b01 	strb.w	r5, [r6], #1
 800812c:	f7f8 fcb2 	bl	8000a94 <__aeabi_dcmplt>
 8008130:	2800      	cmp	r0, #0
 8008132:	d163      	bne.n	80081fc <_dtoa_r+0x65c>
 8008134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008138:	2000      	movs	r0, #0
 800813a:	495a      	ldr	r1, [pc, #360]	@ (80082a4 <_dtoa_r+0x704>)
 800813c:	f7f8 f880 	bl	8000240 <__aeabi_dsub>
 8008140:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008144:	f7f8 fca6 	bl	8000a94 <__aeabi_dcmplt>
 8008148:	2800      	cmp	r0, #0
 800814a:	f040 8087 	bne.w	800825c <_dtoa_r+0x6bc>
 800814e:	42a6      	cmp	r6, r4
 8008150:	f43f af43 	beq.w	8007fda <_dtoa_r+0x43a>
 8008154:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008158:	2200      	movs	r2, #0
 800815a:	4b53      	ldr	r3, [pc, #332]	@ (80082a8 <_dtoa_r+0x708>)
 800815c:	f7f8 fa28 	bl	80005b0 <__aeabi_dmul>
 8008160:	2200      	movs	r2, #0
 8008162:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800816a:	4b4f      	ldr	r3, [pc, #316]	@ (80082a8 <_dtoa_r+0x708>)
 800816c:	f7f8 fa20 	bl	80005b0 <__aeabi_dmul>
 8008170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008174:	e7c4      	b.n	8008100 <_dtoa_r+0x560>
 8008176:	4631      	mov	r1, r6
 8008178:	4628      	mov	r0, r5
 800817a:	f7f8 fa19 	bl	80005b0 <__aeabi_dmul>
 800817e:	4656      	mov	r6, sl
 8008180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008184:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800818a:	f7f8 fcc1 	bl	8000b10 <__aeabi_d2iz>
 800818e:	4605      	mov	r5, r0
 8008190:	f7f8 f9a4 	bl	80004dc <__aeabi_i2d>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800819c:	f7f8 f850 	bl	8000240 <__aeabi_dsub>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	3530      	adds	r5, #48	@ 0x30
 80081a6:	f806 5b01 	strb.w	r5, [r6], #1
 80081aa:	42a6      	cmp	r6, r4
 80081ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081b0:	f04f 0200 	mov.w	r2, #0
 80081b4:	d124      	bne.n	8008200 <_dtoa_r+0x660>
 80081b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081ba:	4b39      	ldr	r3, [pc, #228]	@ (80082a0 <_dtoa_r+0x700>)
 80081bc:	f7f8 f842 	bl	8000244 <__adddf3>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081c8:	f7f8 fc82 	bl	8000ad0 <__aeabi_dcmpgt>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d145      	bne.n	800825c <_dtoa_r+0x6bc>
 80081d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081d4:	2000      	movs	r0, #0
 80081d6:	4932      	ldr	r1, [pc, #200]	@ (80082a0 <_dtoa_r+0x700>)
 80081d8:	f7f8 f832 	bl	8000240 <__aeabi_dsub>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081e4:	f7f8 fc56 	bl	8000a94 <__aeabi_dcmplt>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f43f aef6 	beq.w	8007fda <_dtoa_r+0x43a>
 80081ee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80081f0:	1e73      	subs	r3, r6, #1
 80081f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081f8:	2b30      	cmp	r3, #48	@ 0x30
 80081fa:	d0f8      	beq.n	80081ee <_dtoa_r+0x64e>
 80081fc:	9f04      	ldr	r7, [sp, #16]
 80081fe:	e73f      	b.n	8008080 <_dtoa_r+0x4e0>
 8008200:	4b29      	ldr	r3, [pc, #164]	@ (80082a8 <_dtoa_r+0x708>)
 8008202:	f7f8 f9d5 	bl	80005b0 <__aeabi_dmul>
 8008206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800820a:	e7bc      	b.n	8008186 <_dtoa_r+0x5e6>
 800820c:	d10c      	bne.n	8008228 <_dtoa_r+0x688>
 800820e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008212:	2200      	movs	r2, #0
 8008214:	4b25      	ldr	r3, [pc, #148]	@ (80082ac <_dtoa_r+0x70c>)
 8008216:	f7f8 f9cb 	bl	80005b0 <__aeabi_dmul>
 800821a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800821e:	f7f8 fc4d 	bl	8000abc <__aeabi_dcmpge>
 8008222:	2800      	cmp	r0, #0
 8008224:	f000 815b 	beq.w	80084de <_dtoa_r+0x93e>
 8008228:	2400      	movs	r4, #0
 800822a:	4625      	mov	r5, r4
 800822c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800822e:	4656      	mov	r6, sl
 8008230:	43db      	mvns	r3, r3
 8008232:	9304      	str	r3, [sp, #16]
 8008234:	2700      	movs	r7, #0
 8008236:	4621      	mov	r1, r4
 8008238:	4658      	mov	r0, fp
 800823a:	f000 fbb7 	bl	80089ac <_Bfree>
 800823e:	2d00      	cmp	r5, #0
 8008240:	d0dc      	beq.n	80081fc <_dtoa_r+0x65c>
 8008242:	b12f      	cbz	r7, 8008250 <_dtoa_r+0x6b0>
 8008244:	42af      	cmp	r7, r5
 8008246:	d003      	beq.n	8008250 <_dtoa_r+0x6b0>
 8008248:	4639      	mov	r1, r7
 800824a:	4658      	mov	r0, fp
 800824c:	f000 fbae 	bl	80089ac <_Bfree>
 8008250:	4629      	mov	r1, r5
 8008252:	4658      	mov	r0, fp
 8008254:	f000 fbaa 	bl	80089ac <_Bfree>
 8008258:	e7d0      	b.n	80081fc <_dtoa_r+0x65c>
 800825a:	9704      	str	r7, [sp, #16]
 800825c:	4633      	mov	r3, r6
 800825e:	461e      	mov	r6, r3
 8008260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008264:	2a39      	cmp	r2, #57	@ 0x39
 8008266:	d107      	bne.n	8008278 <_dtoa_r+0x6d8>
 8008268:	459a      	cmp	sl, r3
 800826a:	d1f8      	bne.n	800825e <_dtoa_r+0x6be>
 800826c:	9a04      	ldr	r2, [sp, #16]
 800826e:	3201      	adds	r2, #1
 8008270:	9204      	str	r2, [sp, #16]
 8008272:	2230      	movs	r2, #48	@ 0x30
 8008274:	f88a 2000 	strb.w	r2, [sl]
 8008278:	781a      	ldrb	r2, [r3, #0]
 800827a:	3201      	adds	r2, #1
 800827c:	701a      	strb	r2, [r3, #0]
 800827e:	e7bd      	b.n	80081fc <_dtoa_r+0x65c>
 8008280:	2200      	movs	r2, #0
 8008282:	4b09      	ldr	r3, [pc, #36]	@ (80082a8 <_dtoa_r+0x708>)
 8008284:	f7f8 f994 	bl	80005b0 <__aeabi_dmul>
 8008288:	2200      	movs	r2, #0
 800828a:	2300      	movs	r3, #0
 800828c:	4604      	mov	r4, r0
 800828e:	460d      	mov	r5, r1
 8008290:	f7f8 fbf6 	bl	8000a80 <__aeabi_dcmpeq>
 8008294:	2800      	cmp	r0, #0
 8008296:	f43f aebc 	beq.w	8008012 <_dtoa_r+0x472>
 800829a:	e6f1      	b.n	8008080 <_dtoa_r+0x4e0>
 800829c:	0800c740 	.word	0x0800c740
 80082a0:	3fe00000 	.word	0x3fe00000
 80082a4:	3ff00000 	.word	0x3ff00000
 80082a8:	40240000 	.word	0x40240000
 80082ac:	40140000 	.word	0x40140000
 80082b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80082b2:	2a00      	cmp	r2, #0
 80082b4:	f000 80db 	beq.w	800846e <_dtoa_r+0x8ce>
 80082b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80082ba:	2a01      	cmp	r2, #1
 80082bc:	f300 80bf 	bgt.w	800843e <_dtoa_r+0x89e>
 80082c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	f000 80b7 	beq.w	8008436 <_dtoa_r+0x896>
 80082c8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082cc:	4646      	mov	r6, r8
 80082ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082d2:	2101      	movs	r1, #1
 80082d4:	441a      	add	r2, r3
 80082d6:	4658      	mov	r0, fp
 80082d8:	4498      	add	r8, r3
 80082da:	9209      	str	r2, [sp, #36]	@ 0x24
 80082dc:	f000 fc64 	bl	8008ba8 <__i2b>
 80082e0:	4605      	mov	r5, r0
 80082e2:	b15e      	cbz	r6, 80082fc <_dtoa_r+0x75c>
 80082e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dd08      	ble.n	80082fc <_dtoa_r+0x75c>
 80082ea:	42b3      	cmp	r3, r6
 80082ec:	bfa8      	it	ge
 80082ee:	4633      	movge	r3, r6
 80082f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082f2:	eba8 0803 	sub.w	r8, r8, r3
 80082f6:	1af6      	subs	r6, r6, r3
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082fe:	b1f3      	cbz	r3, 800833e <_dtoa_r+0x79e>
 8008300:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 80b7 	beq.w	8008476 <_dtoa_r+0x8d6>
 8008308:	b18c      	cbz	r4, 800832e <_dtoa_r+0x78e>
 800830a:	4629      	mov	r1, r5
 800830c:	4622      	mov	r2, r4
 800830e:	4658      	mov	r0, fp
 8008310:	f000 fd08 	bl	8008d24 <__pow5mult>
 8008314:	464a      	mov	r2, r9
 8008316:	4601      	mov	r1, r0
 8008318:	4605      	mov	r5, r0
 800831a:	4658      	mov	r0, fp
 800831c:	f000 fc5a 	bl	8008bd4 <__multiply>
 8008320:	4649      	mov	r1, r9
 8008322:	9004      	str	r0, [sp, #16]
 8008324:	4658      	mov	r0, fp
 8008326:	f000 fb41 	bl	80089ac <_Bfree>
 800832a:	9b04      	ldr	r3, [sp, #16]
 800832c:	4699      	mov	r9, r3
 800832e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008330:	1b1a      	subs	r2, r3, r4
 8008332:	d004      	beq.n	800833e <_dtoa_r+0x79e>
 8008334:	4649      	mov	r1, r9
 8008336:	4658      	mov	r0, fp
 8008338:	f000 fcf4 	bl	8008d24 <__pow5mult>
 800833c:	4681      	mov	r9, r0
 800833e:	2101      	movs	r1, #1
 8008340:	4658      	mov	r0, fp
 8008342:	f000 fc31 	bl	8008ba8 <__i2b>
 8008346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008348:	4604      	mov	r4, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 81c9 	beq.w	80086e2 <_dtoa_r+0xb42>
 8008350:	461a      	mov	r2, r3
 8008352:	4601      	mov	r1, r0
 8008354:	4658      	mov	r0, fp
 8008356:	f000 fce5 	bl	8008d24 <__pow5mult>
 800835a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800835c:	4604      	mov	r4, r0
 800835e:	2b01      	cmp	r3, #1
 8008360:	f300 808f 	bgt.w	8008482 <_dtoa_r+0x8e2>
 8008364:	9b02      	ldr	r3, [sp, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f040 8087 	bne.w	800847a <_dtoa_r+0x8da>
 800836c:	9b03      	ldr	r3, [sp, #12]
 800836e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008372:	2b00      	cmp	r3, #0
 8008374:	f040 8083 	bne.w	800847e <_dtoa_r+0x8de>
 8008378:	9b03      	ldr	r3, [sp, #12]
 800837a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800837e:	0d1b      	lsrs	r3, r3, #20
 8008380:	051b      	lsls	r3, r3, #20
 8008382:	b12b      	cbz	r3, 8008390 <_dtoa_r+0x7f0>
 8008384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008386:	f108 0801 	add.w	r8, r8, #1
 800838a:	3301      	adds	r3, #1
 800838c:	9309      	str	r3, [sp, #36]	@ 0x24
 800838e:	2301      	movs	r3, #1
 8008390:	930a      	str	r3, [sp, #40]	@ 0x28
 8008392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 81aa 	beq.w	80086ee <_dtoa_r+0xb4e>
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083a0:	6918      	ldr	r0, [r3, #16]
 80083a2:	f000 fbb5 	bl	8008b10 <__hi0bits>
 80083a6:	f1c0 0020 	rsb	r0, r0, #32
 80083aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ac:	4418      	add	r0, r3
 80083ae:	f010 001f 	ands.w	r0, r0, #31
 80083b2:	d071      	beq.n	8008498 <_dtoa_r+0x8f8>
 80083b4:	f1c0 0320 	rsb	r3, r0, #32
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	dd65      	ble.n	8008488 <_dtoa_r+0x8e8>
 80083bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083be:	f1c0 001c 	rsb	r0, r0, #28
 80083c2:	4403      	add	r3, r0
 80083c4:	4480      	add	r8, r0
 80083c6:	4406      	add	r6, r0
 80083c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ca:	f1b8 0f00 	cmp.w	r8, #0
 80083ce:	dd05      	ble.n	80083dc <_dtoa_r+0x83c>
 80083d0:	4649      	mov	r1, r9
 80083d2:	4642      	mov	r2, r8
 80083d4:	4658      	mov	r0, fp
 80083d6:	f000 fcff 	bl	8008dd8 <__lshift>
 80083da:	4681      	mov	r9, r0
 80083dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dd05      	ble.n	80083ee <_dtoa_r+0x84e>
 80083e2:	4621      	mov	r1, r4
 80083e4:	461a      	mov	r2, r3
 80083e6:	4658      	mov	r0, fp
 80083e8:	f000 fcf6 	bl	8008dd8 <__lshift>
 80083ec:	4604      	mov	r4, r0
 80083ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d053      	beq.n	800849c <_dtoa_r+0x8fc>
 80083f4:	4621      	mov	r1, r4
 80083f6:	4648      	mov	r0, r9
 80083f8:	f000 fd5a 	bl	8008eb0 <__mcmp>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	da4d      	bge.n	800849c <_dtoa_r+0x8fc>
 8008400:	1e7b      	subs	r3, r7, #1
 8008402:	4649      	mov	r1, r9
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	220a      	movs	r2, #10
 8008408:	2300      	movs	r3, #0
 800840a:	4658      	mov	r0, fp
 800840c:	f000 faf0 	bl	80089f0 <__multadd>
 8008410:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008412:	4681      	mov	r9, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 816c 	beq.w	80086f2 <_dtoa_r+0xb52>
 800841a:	2300      	movs	r3, #0
 800841c:	4629      	mov	r1, r5
 800841e:	220a      	movs	r2, #10
 8008420:	4658      	mov	r0, fp
 8008422:	f000 fae5 	bl	80089f0 <__multadd>
 8008426:	9b08      	ldr	r3, [sp, #32]
 8008428:	4605      	mov	r5, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	dc61      	bgt.n	80084f2 <_dtoa_r+0x952>
 800842e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008430:	2b02      	cmp	r3, #2
 8008432:	dc3b      	bgt.n	80084ac <_dtoa_r+0x90c>
 8008434:	e05d      	b.n	80084f2 <_dtoa_r+0x952>
 8008436:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008438:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800843c:	e746      	b.n	80082cc <_dtoa_r+0x72c>
 800843e:	9b07      	ldr	r3, [sp, #28]
 8008440:	1e5c      	subs	r4, r3, #1
 8008442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008444:	42a3      	cmp	r3, r4
 8008446:	bfbf      	itttt	lt
 8008448:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800844a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800844c:	1ae3      	sublt	r3, r4, r3
 800844e:	18d2      	addlt	r2, r2, r3
 8008450:	bfa8      	it	ge
 8008452:	1b1c      	subge	r4, r3, r4
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	bfbe      	ittt	lt
 8008458:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800845a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800845c:	2400      	movlt	r4, #0
 800845e:	2b00      	cmp	r3, #0
 8008460:	bfb5      	itete	lt
 8008462:	eba8 0603 	sublt.w	r6, r8, r3
 8008466:	4646      	movge	r6, r8
 8008468:	2300      	movlt	r3, #0
 800846a:	9b07      	ldrge	r3, [sp, #28]
 800846c:	e730      	b.n	80082d0 <_dtoa_r+0x730>
 800846e:	4646      	mov	r6, r8
 8008470:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008472:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008474:	e735      	b.n	80082e2 <_dtoa_r+0x742>
 8008476:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008478:	e75c      	b.n	8008334 <_dtoa_r+0x794>
 800847a:	2300      	movs	r3, #0
 800847c:	e788      	b.n	8008390 <_dtoa_r+0x7f0>
 800847e:	9b02      	ldr	r3, [sp, #8]
 8008480:	e786      	b.n	8008390 <_dtoa_r+0x7f0>
 8008482:	2300      	movs	r3, #0
 8008484:	930a      	str	r3, [sp, #40]	@ 0x28
 8008486:	e788      	b.n	800839a <_dtoa_r+0x7fa>
 8008488:	d09f      	beq.n	80083ca <_dtoa_r+0x82a>
 800848a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800848c:	331c      	adds	r3, #28
 800848e:	441a      	add	r2, r3
 8008490:	4498      	add	r8, r3
 8008492:	441e      	add	r6, r3
 8008494:	9209      	str	r2, [sp, #36]	@ 0x24
 8008496:	e798      	b.n	80083ca <_dtoa_r+0x82a>
 8008498:	4603      	mov	r3, r0
 800849a:	e7f6      	b.n	800848a <_dtoa_r+0x8ea>
 800849c:	9b07      	ldr	r3, [sp, #28]
 800849e:	9704      	str	r7, [sp, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	dc20      	bgt.n	80084e6 <_dtoa_r+0x946>
 80084a4:	9308      	str	r3, [sp, #32]
 80084a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	dd1e      	ble.n	80084ea <_dtoa_r+0x94a>
 80084ac:	9b08      	ldr	r3, [sp, #32]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f47f aebc 	bne.w	800822c <_dtoa_r+0x68c>
 80084b4:	4621      	mov	r1, r4
 80084b6:	2205      	movs	r2, #5
 80084b8:	4658      	mov	r0, fp
 80084ba:	f000 fa99 	bl	80089f0 <__multadd>
 80084be:	4601      	mov	r1, r0
 80084c0:	4604      	mov	r4, r0
 80084c2:	4648      	mov	r0, r9
 80084c4:	f000 fcf4 	bl	8008eb0 <__mcmp>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	f77f aeaf 	ble.w	800822c <_dtoa_r+0x68c>
 80084ce:	2331      	movs	r3, #49	@ 0x31
 80084d0:	4656      	mov	r6, sl
 80084d2:	f806 3b01 	strb.w	r3, [r6], #1
 80084d6:	9b04      	ldr	r3, [sp, #16]
 80084d8:	3301      	adds	r3, #1
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	e6aa      	b.n	8008234 <_dtoa_r+0x694>
 80084de:	9c07      	ldr	r4, [sp, #28]
 80084e0:	9704      	str	r7, [sp, #16]
 80084e2:	4625      	mov	r5, r4
 80084e4:	e7f3      	b.n	80084ce <_dtoa_r+0x92e>
 80084e6:	9b07      	ldr	r3, [sp, #28]
 80084e8:	9308      	str	r3, [sp, #32]
 80084ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 8104 	beq.w	80086fa <_dtoa_r+0xb5a>
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	dd05      	ble.n	8008502 <_dtoa_r+0x962>
 80084f6:	4629      	mov	r1, r5
 80084f8:	4632      	mov	r2, r6
 80084fa:	4658      	mov	r0, fp
 80084fc:	f000 fc6c 	bl	8008dd8 <__lshift>
 8008500:	4605      	mov	r5, r0
 8008502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008504:	2b00      	cmp	r3, #0
 8008506:	d05a      	beq.n	80085be <_dtoa_r+0xa1e>
 8008508:	4658      	mov	r0, fp
 800850a:	6869      	ldr	r1, [r5, #4]
 800850c:	f000 fa0e 	bl	800892c <_Balloc>
 8008510:	4606      	mov	r6, r0
 8008512:	b928      	cbnz	r0, 8008520 <_dtoa_r+0x980>
 8008514:	4602      	mov	r2, r0
 8008516:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800851a:	4b83      	ldr	r3, [pc, #524]	@ (8008728 <_dtoa_r+0xb88>)
 800851c:	f7ff bb54 	b.w	8007bc8 <_dtoa_r+0x28>
 8008520:	692a      	ldr	r2, [r5, #16]
 8008522:	f105 010c 	add.w	r1, r5, #12
 8008526:	3202      	adds	r2, #2
 8008528:	0092      	lsls	r2, r2, #2
 800852a:	300c      	adds	r0, #12
 800852c:	f002 fad4 	bl	800aad8 <memcpy>
 8008530:	2201      	movs	r2, #1
 8008532:	4631      	mov	r1, r6
 8008534:	4658      	mov	r0, fp
 8008536:	f000 fc4f 	bl	8008dd8 <__lshift>
 800853a:	462f      	mov	r7, r5
 800853c:	4605      	mov	r5, r0
 800853e:	f10a 0301 	add.w	r3, sl, #1
 8008542:	9307      	str	r3, [sp, #28]
 8008544:	9b08      	ldr	r3, [sp, #32]
 8008546:	4453      	add	r3, sl
 8008548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800854a:	9b02      	ldr	r3, [sp, #8]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	930a      	str	r3, [sp, #40]	@ 0x28
 8008552:	9b07      	ldr	r3, [sp, #28]
 8008554:	4621      	mov	r1, r4
 8008556:	3b01      	subs	r3, #1
 8008558:	4648      	mov	r0, r9
 800855a:	9302      	str	r3, [sp, #8]
 800855c:	f7ff fa98 	bl	8007a90 <quorem>
 8008560:	4639      	mov	r1, r7
 8008562:	9008      	str	r0, [sp, #32]
 8008564:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008568:	4648      	mov	r0, r9
 800856a:	f000 fca1 	bl	8008eb0 <__mcmp>
 800856e:	462a      	mov	r2, r5
 8008570:	9009      	str	r0, [sp, #36]	@ 0x24
 8008572:	4621      	mov	r1, r4
 8008574:	4658      	mov	r0, fp
 8008576:	f000 fcb7 	bl	8008ee8 <__mdiff>
 800857a:	68c2      	ldr	r2, [r0, #12]
 800857c:	4606      	mov	r6, r0
 800857e:	bb02      	cbnz	r2, 80085c2 <_dtoa_r+0xa22>
 8008580:	4601      	mov	r1, r0
 8008582:	4648      	mov	r0, r9
 8008584:	f000 fc94 	bl	8008eb0 <__mcmp>
 8008588:	4602      	mov	r2, r0
 800858a:	4631      	mov	r1, r6
 800858c:	4658      	mov	r0, fp
 800858e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008590:	f000 fa0c 	bl	80089ac <_Bfree>
 8008594:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008596:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008598:	9e07      	ldr	r6, [sp, #28]
 800859a:	ea43 0102 	orr.w	r1, r3, r2
 800859e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085a0:	4319      	orrs	r1, r3
 80085a2:	d110      	bne.n	80085c6 <_dtoa_r+0xa26>
 80085a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085a8:	d029      	beq.n	80085fe <_dtoa_r+0xa5e>
 80085aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	dd02      	ble.n	80085b6 <_dtoa_r+0xa16>
 80085b0:	9b08      	ldr	r3, [sp, #32]
 80085b2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80085b6:	9b02      	ldr	r3, [sp, #8]
 80085b8:	f883 8000 	strb.w	r8, [r3]
 80085bc:	e63b      	b.n	8008236 <_dtoa_r+0x696>
 80085be:	4628      	mov	r0, r5
 80085c0:	e7bb      	b.n	800853a <_dtoa_r+0x99a>
 80085c2:	2201      	movs	r2, #1
 80085c4:	e7e1      	b.n	800858a <_dtoa_r+0x9ea>
 80085c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	db04      	blt.n	80085d6 <_dtoa_r+0xa36>
 80085cc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80085ce:	430b      	orrs	r3, r1
 80085d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085d2:	430b      	orrs	r3, r1
 80085d4:	d120      	bne.n	8008618 <_dtoa_r+0xa78>
 80085d6:	2a00      	cmp	r2, #0
 80085d8:	dded      	ble.n	80085b6 <_dtoa_r+0xa16>
 80085da:	4649      	mov	r1, r9
 80085dc:	2201      	movs	r2, #1
 80085de:	4658      	mov	r0, fp
 80085e0:	f000 fbfa 	bl	8008dd8 <__lshift>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4681      	mov	r9, r0
 80085e8:	f000 fc62 	bl	8008eb0 <__mcmp>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	dc03      	bgt.n	80085f8 <_dtoa_r+0xa58>
 80085f0:	d1e1      	bne.n	80085b6 <_dtoa_r+0xa16>
 80085f2:	f018 0f01 	tst.w	r8, #1
 80085f6:	d0de      	beq.n	80085b6 <_dtoa_r+0xa16>
 80085f8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085fc:	d1d8      	bne.n	80085b0 <_dtoa_r+0xa10>
 80085fe:	2339      	movs	r3, #57	@ 0x39
 8008600:	9a02      	ldr	r2, [sp, #8]
 8008602:	7013      	strb	r3, [r2, #0]
 8008604:	4633      	mov	r3, r6
 8008606:	461e      	mov	r6, r3
 8008608:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800860c:	3b01      	subs	r3, #1
 800860e:	2a39      	cmp	r2, #57	@ 0x39
 8008610:	d052      	beq.n	80086b8 <_dtoa_r+0xb18>
 8008612:	3201      	adds	r2, #1
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	e60e      	b.n	8008236 <_dtoa_r+0x696>
 8008618:	2a00      	cmp	r2, #0
 800861a:	dd07      	ble.n	800862c <_dtoa_r+0xa8c>
 800861c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008620:	d0ed      	beq.n	80085fe <_dtoa_r+0xa5e>
 8008622:	9a02      	ldr	r2, [sp, #8]
 8008624:	f108 0301 	add.w	r3, r8, #1
 8008628:	7013      	strb	r3, [r2, #0]
 800862a:	e604      	b.n	8008236 <_dtoa_r+0x696>
 800862c:	9b07      	ldr	r3, [sp, #28]
 800862e:	9a07      	ldr	r2, [sp, #28]
 8008630:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008636:	4293      	cmp	r3, r2
 8008638:	d028      	beq.n	800868c <_dtoa_r+0xaec>
 800863a:	4649      	mov	r1, r9
 800863c:	2300      	movs	r3, #0
 800863e:	220a      	movs	r2, #10
 8008640:	4658      	mov	r0, fp
 8008642:	f000 f9d5 	bl	80089f0 <__multadd>
 8008646:	42af      	cmp	r7, r5
 8008648:	4681      	mov	r9, r0
 800864a:	f04f 0300 	mov.w	r3, #0
 800864e:	f04f 020a 	mov.w	r2, #10
 8008652:	4639      	mov	r1, r7
 8008654:	4658      	mov	r0, fp
 8008656:	d107      	bne.n	8008668 <_dtoa_r+0xac8>
 8008658:	f000 f9ca 	bl	80089f0 <__multadd>
 800865c:	4607      	mov	r7, r0
 800865e:	4605      	mov	r5, r0
 8008660:	9b07      	ldr	r3, [sp, #28]
 8008662:	3301      	adds	r3, #1
 8008664:	9307      	str	r3, [sp, #28]
 8008666:	e774      	b.n	8008552 <_dtoa_r+0x9b2>
 8008668:	f000 f9c2 	bl	80089f0 <__multadd>
 800866c:	4629      	mov	r1, r5
 800866e:	4607      	mov	r7, r0
 8008670:	2300      	movs	r3, #0
 8008672:	220a      	movs	r2, #10
 8008674:	4658      	mov	r0, fp
 8008676:	f000 f9bb 	bl	80089f0 <__multadd>
 800867a:	4605      	mov	r5, r0
 800867c:	e7f0      	b.n	8008660 <_dtoa_r+0xac0>
 800867e:	9b08      	ldr	r3, [sp, #32]
 8008680:	2700      	movs	r7, #0
 8008682:	2b00      	cmp	r3, #0
 8008684:	bfcc      	ite	gt
 8008686:	461e      	movgt	r6, r3
 8008688:	2601      	movle	r6, #1
 800868a:	4456      	add	r6, sl
 800868c:	4649      	mov	r1, r9
 800868e:	2201      	movs	r2, #1
 8008690:	4658      	mov	r0, fp
 8008692:	f000 fba1 	bl	8008dd8 <__lshift>
 8008696:	4621      	mov	r1, r4
 8008698:	4681      	mov	r9, r0
 800869a:	f000 fc09 	bl	8008eb0 <__mcmp>
 800869e:	2800      	cmp	r0, #0
 80086a0:	dcb0      	bgt.n	8008604 <_dtoa_r+0xa64>
 80086a2:	d102      	bne.n	80086aa <_dtoa_r+0xb0a>
 80086a4:	f018 0f01 	tst.w	r8, #1
 80086a8:	d1ac      	bne.n	8008604 <_dtoa_r+0xa64>
 80086aa:	4633      	mov	r3, r6
 80086ac:	461e      	mov	r6, r3
 80086ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086b2:	2a30      	cmp	r2, #48	@ 0x30
 80086b4:	d0fa      	beq.n	80086ac <_dtoa_r+0xb0c>
 80086b6:	e5be      	b.n	8008236 <_dtoa_r+0x696>
 80086b8:	459a      	cmp	sl, r3
 80086ba:	d1a4      	bne.n	8008606 <_dtoa_r+0xa66>
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	3301      	adds	r3, #1
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	2331      	movs	r3, #49	@ 0x31
 80086c4:	f88a 3000 	strb.w	r3, [sl]
 80086c8:	e5b5      	b.n	8008236 <_dtoa_r+0x696>
 80086ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80086cc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800872c <_dtoa_r+0xb8c>
 80086d0:	b11b      	cbz	r3, 80086da <_dtoa_r+0xb3a>
 80086d2:	f10a 0308 	add.w	r3, sl, #8
 80086d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	4650      	mov	r0, sl
 80086dc:	b017      	add	sp, #92	@ 0x5c
 80086de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	f77f ae3d 	ble.w	8008364 <_dtoa_r+0x7c4>
 80086ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80086ee:	2001      	movs	r0, #1
 80086f0:	e65b      	b.n	80083aa <_dtoa_r+0x80a>
 80086f2:	9b08      	ldr	r3, [sp, #32]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f77f aed6 	ble.w	80084a6 <_dtoa_r+0x906>
 80086fa:	4656      	mov	r6, sl
 80086fc:	4621      	mov	r1, r4
 80086fe:	4648      	mov	r0, r9
 8008700:	f7ff f9c6 	bl	8007a90 <quorem>
 8008704:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008708:	9b08      	ldr	r3, [sp, #32]
 800870a:	f806 8b01 	strb.w	r8, [r6], #1
 800870e:	eba6 020a 	sub.w	r2, r6, sl
 8008712:	4293      	cmp	r3, r2
 8008714:	ddb3      	ble.n	800867e <_dtoa_r+0xade>
 8008716:	4649      	mov	r1, r9
 8008718:	2300      	movs	r3, #0
 800871a:	220a      	movs	r2, #10
 800871c:	4658      	mov	r0, fp
 800871e:	f000 f967 	bl	80089f0 <__multadd>
 8008722:	4681      	mov	r9, r0
 8008724:	e7ea      	b.n	80086fc <_dtoa_r+0xb5c>
 8008726:	bf00      	nop
 8008728:	0800c6a1 	.word	0x0800c6a1
 800872c:	0800c625 	.word	0x0800c625

08008730 <_free_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4605      	mov	r5, r0
 8008734:	2900      	cmp	r1, #0
 8008736:	d040      	beq.n	80087ba <_free_r+0x8a>
 8008738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800873c:	1f0c      	subs	r4, r1, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	bfb8      	it	lt
 8008742:	18e4      	addlt	r4, r4, r3
 8008744:	f000 f8e6 	bl	8008914 <__malloc_lock>
 8008748:	4a1c      	ldr	r2, [pc, #112]	@ (80087bc <_free_r+0x8c>)
 800874a:	6813      	ldr	r3, [r2, #0]
 800874c:	b933      	cbnz	r3, 800875c <_free_r+0x2c>
 800874e:	6063      	str	r3, [r4, #4]
 8008750:	6014      	str	r4, [r2, #0]
 8008752:	4628      	mov	r0, r5
 8008754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008758:	f000 b8e2 	b.w	8008920 <__malloc_unlock>
 800875c:	42a3      	cmp	r3, r4
 800875e:	d908      	bls.n	8008772 <_free_r+0x42>
 8008760:	6820      	ldr	r0, [r4, #0]
 8008762:	1821      	adds	r1, r4, r0
 8008764:	428b      	cmp	r3, r1
 8008766:	bf01      	itttt	eq
 8008768:	6819      	ldreq	r1, [r3, #0]
 800876a:	685b      	ldreq	r3, [r3, #4]
 800876c:	1809      	addeq	r1, r1, r0
 800876e:	6021      	streq	r1, [r4, #0]
 8008770:	e7ed      	b.n	800874e <_free_r+0x1e>
 8008772:	461a      	mov	r2, r3
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	b10b      	cbz	r3, 800877c <_free_r+0x4c>
 8008778:	42a3      	cmp	r3, r4
 800877a:	d9fa      	bls.n	8008772 <_free_r+0x42>
 800877c:	6811      	ldr	r1, [r2, #0]
 800877e:	1850      	adds	r0, r2, r1
 8008780:	42a0      	cmp	r0, r4
 8008782:	d10b      	bne.n	800879c <_free_r+0x6c>
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	4401      	add	r1, r0
 8008788:	1850      	adds	r0, r2, r1
 800878a:	4283      	cmp	r3, r0
 800878c:	6011      	str	r1, [r2, #0]
 800878e:	d1e0      	bne.n	8008752 <_free_r+0x22>
 8008790:	6818      	ldr	r0, [r3, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	4408      	add	r0, r1
 8008796:	6010      	str	r0, [r2, #0]
 8008798:	6053      	str	r3, [r2, #4]
 800879a:	e7da      	b.n	8008752 <_free_r+0x22>
 800879c:	d902      	bls.n	80087a4 <_free_r+0x74>
 800879e:	230c      	movs	r3, #12
 80087a0:	602b      	str	r3, [r5, #0]
 80087a2:	e7d6      	b.n	8008752 <_free_r+0x22>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	1821      	adds	r1, r4, r0
 80087a8:	428b      	cmp	r3, r1
 80087aa:	bf01      	itttt	eq
 80087ac:	6819      	ldreq	r1, [r3, #0]
 80087ae:	685b      	ldreq	r3, [r3, #4]
 80087b0:	1809      	addeq	r1, r1, r0
 80087b2:	6021      	streq	r1, [r4, #0]
 80087b4:	6063      	str	r3, [r4, #4]
 80087b6:	6054      	str	r4, [r2, #4]
 80087b8:	e7cb      	b.n	8008752 <_free_r+0x22>
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	20000a90 	.word	0x20000a90

080087c0 <malloc>:
 80087c0:	4b02      	ldr	r3, [pc, #8]	@ (80087cc <malloc+0xc>)
 80087c2:	4601      	mov	r1, r0
 80087c4:	6818      	ldr	r0, [r3, #0]
 80087c6:	f000 b825 	b.w	8008814 <_malloc_r>
 80087ca:	bf00      	nop
 80087cc:	20000020 	.word	0x20000020

080087d0 <sbrk_aligned>:
 80087d0:	b570      	push	{r4, r5, r6, lr}
 80087d2:	4e0f      	ldr	r6, [pc, #60]	@ (8008810 <sbrk_aligned+0x40>)
 80087d4:	460c      	mov	r4, r1
 80087d6:	6831      	ldr	r1, [r6, #0]
 80087d8:	4605      	mov	r5, r0
 80087da:	b911      	cbnz	r1, 80087e2 <sbrk_aligned+0x12>
 80087dc:	f002 f96c 	bl	800aab8 <_sbrk_r>
 80087e0:	6030      	str	r0, [r6, #0]
 80087e2:	4621      	mov	r1, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	f002 f967 	bl	800aab8 <_sbrk_r>
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	d103      	bne.n	80087f6 <sbrk_aligned+0x26>
 80087ee:	f04f 34ff 	mov.w	r4, #4294967295
 80087f2:	4620      	mov	r0, r4
 80087f4:	bd70      	pop	{r4, r5, r6, pc}
 80087f6:	1cc4      	adds	r4, r0, #3
 80087f8:	f024 0403 	bic.w	r4, r4, #3
 80087fc:	42a0      	cmp	r0, r4
 80087fe:	d0f8      	beq.n	80087f2 <sbrk_aligned+0x22>
 8008800:	1a21      	subs	r1, r4, r0
 8008802:	4628      	mov	r0, r5
 8008804:	f002 f958 	bl	800aab8 <_sbrk_r>
 8008808:	3001      	adds	r0, #1
 800880a:	d1f2      	bne.n	80087f2 <sbrk_aligned+0x22>
 800880c:	e7ef      	b.n	80087ee <sbrk_aligned+0x1e>
 800880e:	bf00      	nop
 8008810:	20000a8c 	.word	0x20000a8c

08008814 <_malloc_r>:
 8008814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008818:	1ccd      	adds	r5, r1, #3
 800881a:	f025 0503 	bic.w	r5, r5, #3
 800881e:	3508      	adds	r5, #8
 8008820:	2d0c      	cmp	r5, #12
 8008822:	bf38      	it	cc
 8008824:	250c      	movcc	r5, #12
 8008826:	2d00      	cmp	r5, #0
 8008828:	4606      	mov	r6, r0
 800882a:	db01      	blt.n	8008830 <_malloc_r+0x1c>
 800882c:	42a9      	cmp	r1, r5
 800882e:	d904      	bls.n	800883a <_malloc_r+0x26>
 8008830:	230c      	movs	r3, #12
 8008832:	6033      	str	r3, [r6, #0]
 8008834:	2000      	movs	r0, #0
 8008836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008910 <_malloc_r+0xfc>
 800883e:	f000 f869 	bl	8008914 <__malloc_lock>
 8008842:	f8d8 3000 	ldr.w	r3, [r8]
 8008846:	461c      	mov	r4, r3
 8008848:	bb44      	cbnz	r4, 800889c <_malloc_r+0x88>
 800884a:	4629      	mov	r1, r5
 800884c:	4630      	mov	r0, r6
 800884e:	f7ff ffbf 	bl	80087d0 <sbrk_aligned>
 8008852:	1c43      	adds	r3, r0, #1
 8008854:	4604      	mov	r4, r0
 8008856:	d158      	bne.n	800890a <_malloc_r+0xf6>
 8008858:	f8d8 4000 	ldr.w	r4, [r8]
 800885c:	4627      	mov	r7, r4
 800885e:	2f00      	cmp	r7, #0
 8008860:	d143      	bne.n	80088ea <_malloc_r+0xd6>
 8008862:	2c00      	cmp	r4, #0
 8008864:	d04b      	beq.n	80088fe <_malloc_r+0xea>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	4639      	mov	r1, r7
 800886a:	4630      	mov	r0, r6
 800886c:	eb04 0903 	add.w	r9, r4, r3
 8008870:	f002 f922 	bl	800aab8 <_sbrk_r>
 8008874:	4581      	cmp	r9, r0
 8008876:	d142      	bne.n	80088fe <_malloc_r+0xea>
 8008878:	6821      	ldr	r1, [r4, #0]
 800887a:	4630      	mov	r0, r6
 800887c:	1a6d      	subs	r5, r5, r1
 800887e:	4629      	mov	r1, r5
 8008880:	f7ff ffa6 	bl	80087d0 <sbrk_aligned>
 8008884:	3001      	adds	r0, #1
 8008886:	d03a      	beq.n	80088fe <_malloc_r+0xea>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	442b      	add	r3, r5
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	f8d8 3000 	ldr.w	r3, [r8]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	bb62      	cbnz	r2, 80088f0 <_malloc_r+0xdc>
 8008896:	f8c8 7000 	str.w	r7, [r8]
 800889a:	e00f      	b.n	80088bc <_malloc_r+0xa8>
 800889c:	6822      	ldr	r2, [r4, #0]
 800889e:	1b52      	subs	r2, r2, r5
 80088a0:	d420      	bmi.n	80088e4 <_malloc_r+0xd0>
 80088a2:	2a0b      	cmp	r2, #11
 80088a4:	d917      	bls.n	80088d6 <_malloc_r+0xc2>
 80088a6:	1961      	adds	r1, r4, r5
 80088a8:	42a3      	cmp	r3, r4
 80088aa:	6025      	str	r5, [r4, #0]
 80088ac:	bf18      	it	ne
 80088ae:	6059      	strne	r1, [r3, #4]
 80088b0:	6863      	ldr	r3, [r4, #4]
 80088b2:	bf08      	it	eq
 80088b4:	f8c8 1000 	streq.w	r1, [r8]
 80088b8:	5162      	str	r2, [r4, r5]
 80088ba:	604b      	str	r3, [r1, #4]
 80088bc:	4630      	mov	r0, r6
 80088be:	f000 f82f 	bl	8008920 <__malloc_unlock>
 80088c2:	f104 000b 	add.w	r0, r4, #11
 80088c6:	1d23      	adds	r3, r4, #4
 80088c8:	f020 0007 	bic.w	r0, r0, #7
 80088cc:	1ac2      	subs	r2, r0, r3
 80088ce:	bf1c      	itt	ne
 80088d0:	1a1b      	subne	r3, r3, r0
 80088d2:	50a3      	strne	r3, [r4, r2]
 80088d4:	e7af      	b.n	8008836 <_malloc_r+0x22>
 80088d6:	6862      	ldr	r2, [r4, #4]
 80088d8:	42a3      	cmp	r3, r4
 80088da:	bf0c      	ite	eq
 80088dc:	f8c8 2000 	streq.w	r2, [r8]
 80088e0:	605a      	strne	r2, [r3, #4]
 80088e2:	e7eb      	b.n	80088bc <_malloc_r+0xa8>
 80088e4:	4623      	mov	r3, r4
 80088e6:	6864      	ldr	r4, [r4, #4]
 80088e8:	e7ae      	b.n	8008848 <_malloc_r+0x34>
 80088ea:	463c      	mov	r4, r7
 80088ec:	687f      	ldr	r7, [r7, #4]
 80088ee:	e7b6      	b.n	800885e <_malloc_r+0x4a>
 80088f0:	461a      	mov	r2, r3
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	42a3      	cmp	r3, r4
 80088f6:	d1fb      	bne.n	80088f0 <_malloc_r+0xdc>
 80088f8:	2300      	movs	r3, #0
 80088fa:	6053      	str	r3, [r2, #4]
 80088fc:	e7de      	b.n	80088bc <_malloc_r+0xa8>
 80088fe:	230c      	movs	r3, #12
 8008900:	4630      	mov	r0, r6
 8008902:	6033      	str	r3, [r6, #0]
 8008904:	f000 f80c 	bl	8008920 <__malloc_unlock>
 8008908:	e794      	b.n	8008834 <_malloc_r+0x20>
 800890a:	6005      	str	r5, [r0, #0]
 800890c:	e7d6      	b.n	80088bc <_malloc_r+0xa8>
 800890e:	bf00      	nop
 8008910:	20000a90 	.word	0x20000a90

08008914 <__malloc_lock>:
 8008914:	4801      	ldr	r0, [pc, #4]	@ (800891c <__malloc_lock+0x8>)
 8008916:	f7ff b8a6 	b.w	8007a66 <__retarget_lock_acquire_recursive>
 800891a:	bf00      	nop
 800891c:	20000a88 	.word	0x20000a88

08008920 <__malloc_unlock>:
 8008920:	4801      	ldr	r0, [pc, #4]	@ (8008928 <__malloc_unlock+0x8>)
 8008922:	f7ff b8a1 	b.w	8007a68 <__retarget_lock_release_recursive>
 8008926:	bf00      	nop
 8008928:	20000a88 	.word	0x20000a88

0800892c <_Balloc>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	69c6      	ldr	r6, [r0, #28]
 8008930:	4604      	mov	r4, r0
 8008932:	460d      	mov	r5, r1
 8008934:	b976      	cbnz	r6, 8008954 <_Balloc+0x28>
 8008936:	2010      	movs	r0, #16
 8008938:	f7ff ff42 	bl	80087c0 <malloc>
 800893c:	4602      	mov	r2, r0
 800893e:	61e0      	str	r0, [r4, #28]
 8008940:	b920      	cbnz	r0, 800894c <_Balloc+0x20>
 8008942:	216b      	movs	r1, #107	@ 0x6b
 8008944:	4b17      	ldr	r3, [pc, #92]	@ (80089a4 <_Balloc+0x78>)
 8008946:	4818      	ldr	r0, [pc, #96]	@ (80089a8 <_Balloc+0x7c>)
 8008948:	f002 f8da 	bl	800ab00 <__assert_func>
 800894c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008950:	6006      	str	r6, [r0, #0]
 8008952:	60c6      	str	r6, [r0, #12]
 8008954:	69e6      	ldr	r6, [r4, #28]
 8008956:	68f3      	ldr	r3, [r6, #12]
 8008958:	b183      	cbz	r3, 800897c <_Balloc+0x50>
 800895a:	69e3      	ldr	r3, [r4, #28]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008962:	b9b8      	cbnz	r0, 8008994 <_Balloc+0x68>
 8008964:	2101      	movs	r1, #1
 8008966:	fa01 f605 	lsl.w	r6, r1, r5
 800896a:	1d72      	adds	r2, r6, #5
 800896c:	4620      	mov	r0, r4
 800896e:	0092      	lsls	r2, r2, #2
 8008970:	f002 f8e4 	bl	800ab3c <_calloc_r>
 8008974:	b160      	cbz	r0, 8008990 <_Balloc+0x64>
 8008976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800897a:	e00e      	b.n	800899a <_Balloc+0x6e>
 800897c:	2221      	movs	r2, #33	@ 0x21
 800897e:	2104      	movs	r1, #4
 8008980:	4620      	mov	r0, r4
 8008982:	f002 f8db 	bl	800ab3c <_calloc_r>
 8008986:	69e3      	ldr	r3, [r4, #28]
 8008988:	60f0      	str	r0, [r6, #12]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e4      	bne.n	800895a <_Balloc+0x2e>
 8008990:	2000      	movs	r0, #0
 8008992:	bd70      	pop	{r4, r5, r6, pc}
 8008994:	6802      	ldr	r2, [r0, #0]
 8008996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800899a:	2300      	movs	r3, #0
 800899c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089a0:	e7f7      	b.n	8008992 <_Balloc+0x66>
 80089a2:	bf00      	nop
 80089a4:	0800c632 	.word	0x0800c632
 80089a8:	0800c6b2 	.word	0x0800c6b2

080089ac <_Bfree>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	69c6      	ldr	r6, [r0, #28]
 80089b0:	4605      	mov	r5, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	b976      	cbnz	r6, 80089d4 <_Bfree+0x28>
 80089b6:	2010      	movs	r0, #16
 80089b8:	f7ff ff02 	bl	80087c0 <malloc>
 80089bc:	4602      	mov	r2, r0
 80089be:	61e8      	str	r0, [r5, #28]
 80089c0:	b920      	cbnz	r0, 80089cc <_Bfree+0x20>
 80089c2:	218f      	movs	r1, #143	@ 0x8f
 80089c4:	4b08      	ldr	r3, [pc, #32]	@ (80089e8 <_Bfree+0x3c>)
 80089c6:	4809      	ldr	r0, [pc, #36]	@ (80089ec <_Bfree+0x40>)
 80089c8:	f002 f89a 	bl	800ab00 <__assert_func>
 80089cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089d0:	6006      	str	r6, [r0, #0]
 80089d2:	60c6      	str	r6, [r0, #12]
 80089d4:	b13c      	cbz	r4, 80089e6 <_Bfree+0x3a>
 80089d6:	69eb      	ldr	r3, [r5, #28]
 80089d8:	6862      	ldr	r2, [r4, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089e0:	6021      	str	r1, [r4, #0]
 80089e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
 80089e8:	0800c632 	.word	0x0800c632
 80089ec:	0800c6b2 	.word	0x0800c6b2

080089f0 <__multadd>:
 80089f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f4:	4607      	mov	r7, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	461e      	mov	r6, r3
 80089fa:	2000      	movs	r0, #0
 80089fc:	690d      	ldr	r5, [r1, #16]
 80089fe:	f101 0c14 	add.w	ip, r1, #20
 8008a02:	f8dc 3000 	ldr.w	r3, [ip]
 8008a06:	3001      	adds	r0, #1
 8008a08:	b299      	uxth	r1, r3
 8008a0a:	fb02 6101 	mla	r1, r2, r1, r6
 8008a0e:	0c1e      	lsrs	r6, r3, #16
 8008a10:	0c0b      	lsrs	r3, r1, #16
 8008a12:	fb02 3306 	mla	r3, r2, r6, r3
 8008a16:	b289      	uxth	r1, r1
 8008a18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a1c:	4285      	cmp	r5, r0
 8008a1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a22:	f84c 1b04 	str.w	r1, [ip], #4
 8008a26:	dcec      	bgt.n	8008a02 <__multadd+0x12>
 8008a28:	b30e      	cbz	r6, 8008a6e <__multadd+0x7e>
 8008a2a:	68a3      	ldr	r3, [r4, #8]
 8008a2c:	42ab      	cmp	r3, r5
 8008a2e:	dc19      	bgt.n	8008a64 <__multadd+0x74>
 8008a30:	6861      	ldr	r1, [r4, #4]
 8008a32:	4638      	mov	r0, r7
 8008a34:	3101      	adds	r1, #1
 8008a36:	f7ff ff79 	bl	800892c <_Balloc>
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	b928      	cbnz	r0, 8008a4a <__multadd+0x5a>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	21ba      	movs	r1, #186	@ 0xba
 8008a42:	4b0c      	ldr	r3, [pc, #48]	@ (8008a74 <__multadd+0x84>)
 8008a44:	480c      	ldr	r0, [pc, #48]	@ (8008a78 <__multadd+0x88>)
 8008a46:	f002 f85b 	bl	800ab00 <__assert_func>
 8008a4a:	6922      	ldr	r2, [r4, #16]
 8008a4c:	f104 010c 	add.w	r1, r4, #12
 8008a50:	3202      	adds	r2, #2
 8008a52:	0092      	lsls	r2, r2, #2
 8008a54:	300c      	adds	r0, #12
 8008a56:	f002 f83f 	bl	800aad8 <memcpy>
 8008a5a:	4621      	mov	r1, r4
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f7ff ffa5 	bl	80089ac <_Bfree>
 8008a62:	4644      	mov	r4, r8
 8008a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a68:	3501      	adds	r5, #1
 8008a6a:	615e      	str	r6, [r3, #20]
 8008a6c:	6125      	str	r5, [r4, #16]
 8008a6e:	4620      	mov	r0, r4
 8008a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a74:	0800c6a1 	.word	0x0800c6a1
 8008a78:	0800c6b2 	.word	0x0800c6b2

08008a7c <__s2b>:
 8008a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a80:	4615      	mov	r5, r2
 8008a82:	2209      	movs	r2, #9
 8008a84:	461f      	mov	r7, r3
 8008a86:	3308      	adds	r3, #8
 8008a88:	460c      	mov	r4, r1
 8008a8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a8e:	4606      	mov	r6, r0
 8008a90:	2201      	movs	r2, #1
 8008a92:	2100      	movs	r1, #0
 8008a94:	429a      	cmp	r2, r3
 8008a96:	db09      	blt.n	8008aac <__s2b+0x30>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7ff ff47 	bl	800892c <_Balloc>
 8008a9e:	b940      	cbnz	r0, 8008ab2 <__s2b+0x36>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	21d3      	movs	r1, #211	@ 0xd3
 8008aa4:	4b18      	ldr	r3, [pc, #96]	@ (8008b08 <__s2b+0x8c>)
 8008aa6:	4819      	ldr	r0, [pc, #100]	@ (8008b0c <__s2b+0x90>)
 8008aa8:	f002 f82a 	bl	800ab00 <__assert_func>
 8008aac:	0052      	lsls	r2, r2, #1
 8008aae:	3101      	adds	r1, #1
 8008ab0:	e7f0      	b.n	8008a94 <__s2b+0x18>
 8008ab2:	9b08      	ldr	r3, [sp, #32]
 8008ab4:	2d09      	cmp	r5, #9
 8008ab6:	6143      	str	r3, [r0, #20]
 8008ab8:	f04f 0301 	mov.w	r3, #1
 8008abc:	6103      	str	r3, [r0, #16]
 8008abe:	dd16      	ble.n	8008aee <__s2b+0x72>
 8008ac0:	f104 0909 	add.w	r9, r4, #9
 8008ac4:	46c8      	mov	r8, r9
 8008ac6:	442c      	add	r4, r5
 8008ac8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008acc:	4601      	mov	r1, r0
 8008ace:	220a      	movs	r2, #10
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	3b30      	subs	r3, #48	@ 0x30
 8008ad4:	f7ff ff8c 	bl	80089f0 <__multadd>
 8008ad8:	45a0      	cmp	r8, r4
 8008ada:	d1f5      	bne.n	8008ac8 <__s2b+0x4c>
 8008adc:	f1a5 0408 	sub.w	r4, r5, #8
 8008ae0:	444c      	add	r4, r9
 8008ae2:	1b2d      	subs	r5, r5, r4
 8008ae4:	1963      	adds	r3, r4, r5
 8008ae6:	42bb      	cmp	r3, r7
 8008ae8:	db04      	blt.n	8008af4 <__s2b+0x78>
 8008aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aee:	2509      	movs	r5, #9
 8008af0:	340a      	adds	r4, #10
 8008af2:	e7f6      	b.n	8008ae2 <__s2b+0x66>
 8008af4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008af8:	4601      	mov	r1, r0
 8008afa:	220a      	movs	r2, #10
 8008afc:	4630      	mov	r0, r6
 8008afe:	3b30      	subs	r3, #48	@ 0x30
 8008b00:	f7ff ff76 	bl	80089f0 <__multadd>
 8008b04:	e7ee      	b.n	8008ae4 <__s2b+0x68>
 8008b06:	bf00      	nop
 8008b08:	0800c6a1 	.word	0x0800c6a1
 8008b0c:	0800c6b2 	.word	0x0800c6b2

08008b10 <__hi0bits>:
 8008b10:	4603      	mov	r3, r0
 8008b12:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b16:	bf3a      	itte	cc
 8008b18:	0403      	lslcc	r3, r0, #16
 8008b1a:	2010      	movcc	r0, #16
 8008b1c:	2000      	movcs	r0, #0
 8008b1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b22:	bf3c      	itt	cc
 8008b24:	021b      	lslcc	r3, r3, #8
 8008b26:	3008      	addcc	r0, #8
 8008b28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b2c:	bf3c      	itt	cc
 8008b2e:	011b      	lslcc	r3, r3, #4
 8008b30:	3004      	addcc	r0, #4
 8008b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b36:	bf3c      	itt	cc
 8008b38:	009b      	lslcc	r3, r3, #2
 8008b3a:	3002      	addcc	r0, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	db05      	blt.n	8008b4c <__hi0bits+0x3c>
 8008b40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b44:	f100 0001 	add.w	r0, r0, #1
 8008b48:	bf08      	it	eq
 8008b4a:	2020      	moveq	r0, #32
 8008b4c:	4770      	bx	lr

08008b4e <__lo0bits>:
 8008b4e:	6803      	ldr	r3, [r0, #0]
 8008b50:	4602      	mov	r2, r0
 8008b52:	f013 0007 	ands.w	r0, r3, #7
 8008b56:	d00b      	beq.n	8008b70 <__lo0bits+0x22>
 8008b58:	07d9      	lsls	r1, r3, #31
 8008b5a:	d421      	bmi.n	8008ba0 <__lo0bits+0x52>
 8008b5c:	0798      	lsls	r0, r3, #30
 8008b5e:	bf49      	itett	mi
 8008b60:	085b      	lsrmi	r3, r3, #1
 8008b62:	089b      	lsrpl	r3, r3, #2
 8008b64:	2001      	movmi	r0, #1
 8008b66:	6013      	strmi	r3, [r2, #0]
 8008b68:	bf5c      	itt	pl
 8008b6a:	2002      	movpl	r0, #2
 8008b6c:	6013      	strpl	r3, [r2, #0]
 8008b6e:	4770      	bx	lr
 8008b70:	b299      	uxth	r1, r3
 8008b72:	b909      	cbnz	r1, 8008b78 <__lo0bits+0x2a>
 8008b74:	2010      	movs	r0, #16
 8008b76:	0c1b      	lsrs	r3, r3, #16
 8008b78:	b2d9      	uxtb	r1, r3
 8008b7a:	b909      	cbnz	r1, 8008b80 <__lo0bits+0x32>
 8008b7c:	3008      	adds	r0, #8
 8008b7e:	0a1b      	lsrs	r3, r3, #8
 8008b80:	0719      	lsls	r1, r3, #28
 8008b82:	bf04      	itt	eq
 8008b84:	091b      	lsreq	r3, r3, #4
 8008b86:	3004      	addeq	r0, #4
 8008b88:	0799      	lsls	r1, r3, #30
 8008b8a:	bf04      	itt	eq
 8008b8c:	089b      	lsreq	r3, r3, #2
 8008b8e:	3002      	addeq	r0, #2
 8008b90:	07d9      	lsls	r1, r3, #31
 8008b92:	d403      	bmi.n	8008b9c <__lo0bits+0x4e>
 8008b94:	085b      	lsrs	r3, r3, #1
 8008b96:	f100 0001 	add.w	r0, r0, #1
 8008b9a:	d003      	beq.n	8008ba4 <__lo0bits+0x56>
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	4770      	bx	lr
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	4770      	bx	lr
 8008ba4:	2020      	movs	r0, #32
 8008ba6:	4770      	bx	lr

08008ba8 <__i2b>:
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	460c      	mov	r4, r1
 8008bac:	2101      	movs	r1, #1
 8008bae:	f7ff febd 	bl	800892c <_Balloc>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	b928      	cbnz	r0, 8008bc2 <__i2b+0x1a>
 8008bb6:	f240 1145 	movw	r1, #325	@ 0x145
 8008bba:	4b04      	ldr	r3, [pc, #16]	@ (8008bcc <__i2b+0x24>)
 8008bbc:	4804      	ldr	r0, [pc, #16]	@ (8008bd0 <__i2b+0x28>)
 8008bbe:	f001 ff9f 	bl	800ab00 <__assert_func>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	6144      	str	r4, [r0, #20]
 8008bc6:	6103      	str	r3, [r0, #16]
 8008bc8:	bd10      	pop	{r4, pc}
 8008bca:	bf00      	nop
 8008bcc:	0800c6a1 	.word	0x0800c6a1
 8008bd0:	0800c6b2 	.word	0x0800c6b2

08008bd4 <__multiply>:
 8008bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd8:	4614      	mov	r4, r2
 8008bda:	690a      	ldr	r2, [r1, #16]
 8008bdc:	6923      	ldr	r3, [r4, #16]
 8008bde:	460f      	mov	r7, r1
 8008be0:	429a      	cmp	r2, r3
 8008be2:	bfa2      	ittt	ge
 8008be4:	4623      	movge	r3, r4
 8008be6:	460c      	movge	r4, r1
 8008be8:	461f      	movge	r7, r3
 8008bea:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008bee:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	6861      	ldr	r1, [r4, #4]
 8008bf6:	eb0a 0609 	add.w	r6, sl, r9
 8008bfa:	42b3      	cmp	r3, r6
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	bfb8      	it	lt
 8008c00:	3101      	addlt	r1, #1
 8008c02:	f7ff fe93 	bl	800892c <_Balloc>
 8008c06:	b930      	cbnz	r0, 8008c16 <__multiply+0x42>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c0e:	4b43      	ldr	r3, [pc, #268]	@ (8008d1c <__multiply+0x148>)
 8008c10:	4843      	ldr	r0, [pc, #268]	@ (8008d20 <__multiply+0x14c>)
 8008c12:	f001 ff75 	bl	800ab00 <__assert_func>
 8008c16:	f100 0514 	add.w	r5, r0, #20
 8008c1a:	462b      	mov	r3, r5
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c22:	4543      	cmp	r3, r8
 8008c24:	d321      	bcc.n	8008c6a <__multiply+0x96>
 8008c26:	f107 0114 	add.w	r1, r7, #20
 8008c2a:	f104 0214 	add.w	r2, r4, #20
 8008c2e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c32:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c36:	9302      	str	r3, [sp, #8]
 8008c38:	1b13      	subs	r3, r2, r4
 8008c3a:	3b15      	subs	r3, #21
 8008c3c:	f023 0303 	bic.w	r3, r3, #3
 8008c40:	3304      	adds	r3, #4
 8008c42:	f104 0715 	add.w	r7, r4, #21
 8008c46:	42ba      	cmp	r2, r7
 8008c48:	bf38      	it	cc
 8008c4a:	2304      	movcc	r3, #4
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	9b02      	ldr	r3, [sp, #8]
 8008c50:	9103      	str	r1, [sp, #12]
 8008c52:	428b      	cmp	r3, r1
 8008c54:	d80c      	bhi.n	8008c70 <__multiply+0x9c>
 8008c56:	2e00      	cmp	r6, #0
 8008c58:	dd03      	ble.n	8008c62 <__multiply+0x8e>
 8008c5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d05a      	beq.n	8008d18 <__multiply+0x144>
 8008c62:	6106      	str	r6, [r0, #16]
 8008c64:	b005      	add	sp, #20
 8008c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6a:	f843 2b04 	str.w	r2, [r3], #4
 8008c6e:	e7d8      	b.n	8008c22 <__multiply+0x4e>
 8008c70:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c74:	f1ba 0f00 	cmp.w	sl, #0
 8008c78:	d023      	beq.n	8008cc2 <__multiply+0xee>
 8008c7a:	46a9      	mov	r9, r5
 8008c7c:	f04f 0c00 	mov.w	ip, #0
 8008c80:	f104 0e14 	add.w	lr, r4, #20
 8008c84:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c88:	f8d9 3000 	ldr.w	r3, [r9]
 8008c8c:	fa1f fb87 	uxth.w	fp, r7
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c96:	4463      	add	r3, ip
 8008c98:	f8d9 c000 	ldr.w	ip, [r9]
 8008c9c:	0c3f      	lsrs	r7, r7, #16
 8008c9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008ca2:	fb0a c707 	mla	r7, sl, r7, ip
 8008ca6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cb0:	4572      	cmp	r2, lr
 8008cb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cb6:	f849 3b04 	str.w	r3, [r9], #4
 8008cba:	d8e3      	bhi.n	8008c84 <__multiply+0xb0>
 8008cbc:	9b01      	ldr	r3, [sp, #4]
 8008cbe:	f845 c003 	str.w	ip, [r5, r3]
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	3104      	adds	r1, #4
 8008cc6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008cca:	f1b9 0f00 	cmp.w	r9, #0
 8008cce:	d021      	beq.n	8008d14 <__multiply+0x140>
 8008cd0:	46ae      	mov	lr, r5
 8008cd2:	f04f 0a00 	mov.w	sl, #0
 8008cd6:	682b      	ldr	r3, [r5, #0]
 8008cd8:	f104 0c14 	add.w	ip, r4, #20
 8008cdc:	f8bc b000 	ldrh.w	fp, [ip]
 8008ce0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	fb09 770b 	mla	r7, r9, fp, r7
 8008cea:	4457      	add	r7, sl
 8008cec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cf0:	f84e 3b04 	str.w	r3, [lr], #4
 8008cf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008cf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cfc:	f8be 3000 	ldrh.w	r3, [lr]
 8008d00:	4562      	cmp	r2, ip
 8008d02:	fb09 330a 	mla	r3, r9, sl, r3
 8008d06:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d0e:	d8e5      	bhi.n	8008cdc <__multiply+0x108>
 8008d10:	9f01      	ldr	r7, [sp, #4]
 8008d12:	51eb      	str	r3, [r5, r7]
 8008d14:	3504      	adds	r5, #4
 8008d16:	e79a      	b.n	8008c4e <__multiply+0x7a>
 8008d18:	3e01      	subs	r6, #1
 8008d1a:	e79c      	b.n	8008c56 <__multiply+0x82>
 8008d1c:	0800c6a1 	.word	0x0800c6a1
 8008d20:	0800c6b2 	.word	0x0800c6b2

08008d24 <__pow5mult>:
 8008d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d28:	4615      	mov	r5, r2
 8008d2a:	f012 0203 	ands.w	r2, r2, #3
 8008d2e:	4607      	mov	r7, r0
 8008d30:	460e      	mov	r6, r1
 8008d32:	d007      	beq.n	8008d44 <__pow5mult+0x20>
 8008d34:	4c25      	ldr	r4, [pc, #148]	@ (8008dcc <__pow5mult+0xa8>)
 8008d36:	3a01      	subs	r2, #1
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d3e:	f7ff fe57 	bl	80089f0 <__multadd>
 8008d42:	4606      	mov	r6, r0
 8008d44:	10ad      	asrs	r5, r5, #2
 8008d46:	d03d      	beq.n	8008dc4 <__pow5mult+0xa0>
 8008d48:	69fc      	ldr	r4, [r7, #28]
 8008d4a:	b97c      	cbnz	r4, 8008d6c <__pow5mult+0x48>
 8008d4c:	2010      	movs	r0, #16
 8008d4e:	f7ff fd37 	bl	80087c0 <malloc>
 8008d52:	4602      	mov	r2, r0
 8008d54:	61f8      	str	r0, [r7, #28]
 8008d56:	b928      	cbnz	r0, 8008d64 <__pow5mult+0x40>
 8008d58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8008dd0 <__pow5mult+0xac>)
 8008d5e:	481d      	ldr	r0, [pc, #116]	@ (8008dd4 <__pow5mult+0xb0>)
 8008d60:	f001 fece 	bl	800ab00 <__assert_func>
 8008d64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d68:	6004      	str	r4, [r0, #0]
 8008d6a:	60c4      	str	r4, [r0, #12]
 8008d6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d74:	b94c      	cbnz	r4, 8008d8a <__pow5mult+0x66>
 8008d76:	f240 2171 	movw	r1, #625	@ 0x271
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	f7ff ff14 	bl	8008ba8 <__i2b>
 8008d80:	2300      	movs	r3, #0
 8008d82:	4604      	mov	r4, r0
 8008d84:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d88:	6003      	str	r3, [r0, #0]
 8008d8a:	f04f 0900 	mov.w	r9, #0
 8008d8e:	07eb      	lsls	r3, r5, #31
 8008d90:	d50a      	bpl.n	8008da8 <__pow5mult+0x84>
 8008d92:	4631      	mov	r1, r6
 8008d94:	4622      	mov	r2, r4
 8008d96:	4638      	mov	r0, r7
 8008d98:	f7ff ff1c 	bl	8008bd4 <__multiply>
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	4631      	mov	r1, r6
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff fe03 	bl	80089ac <_Bfree>
 8008da6:	4646      	mov	r6, r8
 8008da8:	106d      	asrs	r5, r5, #1
 8008daa:	d00b      	beq.n	8008dc4 <__pow5mult+0xa0>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	b938      	cbnz	r0, 8008dc0 <__pow5mult+0x9c>
 8008db0:	4622      	mov	r2, r4
 8008db2:	4621      	mov	r1, r4
 8008db4:	4638      	mov	r0, r7
 8008db6:	f7ff ff0d 	bl	8008bd4 <__multiply>
 8008dba:	6020      	str	r0, [r4, #0]
 8008dbc:	f8c0 9000 	str.w	r9, [r0]
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	e7e4      	b.n	8008d8e <__pow5mult+0x6a>
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dca:	bf00      	nop
 8008dcc:	0800c70c 	.word	0x0800c70c
 8008dd0:	0800c632 	.word	0x0800c632
 8008dd4:	0800c6b2 	.word	0x0800c6b2

08008dd8 <__lshift>:
 8008dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ddc:	460c      	mov	r4, r1
 8008dde:	4607      	mov	r7, r0
 8008de0:	4691      	mov	r9, r2
 8008de2:	6923      	ldr	r3, [r4, #16]
 8008de4:	6849      	ldr	r1, [r1, #4]
 8008de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dea:	68a3      	ldr	r3, [r4, #8]
 8008dec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008df0:	f108 0601 	add.w	r6, r8, #1
 8008df4:	42b3      	cmp	r3, r6
 8008df6:	db0b      	blt.n	8008e10 <__lshift+0x38>
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f7ff fd97 	bl	800892c <_Balloc>
 8008dfe:	4605      	mov	r5, r0
 8008e00:	b948      	cbnz	r0, 8008e16 <__lshift+0x3e>
 8008e02:	4602      	mov	r2, r0
 8008e04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e08:	4b27      	ldr	r3, [pc, #156]	@ (8008ea8 <__lshift+0xd0>)
 8008e0a:	4828      	ldr	r0, [pc, #160]	@ (8008eac <__lshift+0xd4>)
 8008e0c:	f001 fe78 	bl	800ab00 <__assert_func>
 8008e10:	3101      	adds	r1, #1
 8008e12:	005b      	lsls	r3, r3, #1
 8008e14:	e7ee      	b.n	8008df4 <__lshift+0x1c>
 8008e16:	2300      	movs	r3, #0
 8008e18:	f100 0114 	add.w	r1, r0, #20
 8008e1c:	f100 0210 	add.w	r2, r0, #16
 8008e20:	4618      	mov	r0, r3
 8008e22:	4553      	cmp	r3, sl
 8008e24:	db33      	blt.n	8008e8e <__lshift+0xb6>
 8008e26:	6920      	ldr	r0, [r4, #16]
 8008e28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e2c:	f104 0314 	add.w	r3, r4, #20
 8008e30:	f019 091f 	ands.w	r9, r9, #31
 8008e34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e3c:	d02b      	beq.n	8008e96 <__lshift+0xbe>
 8008e3e:	468a      	mov	sl, r1
 8008e40:	2200      	movs	r2, #0
 8008e42:	f1c9 0e20 	rsb	lr, r9, #32
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	fa00 f009 	lsl.w	r0, r0, r9
 8008e4c:	4310      	orrs	r0, r2
 8008e4e:	f84a 0b04 	str.w	r0, [sl], #4
 8008e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e56:	459c      	cmp	ip, r3
 8008e58:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e5c:	d8f3      	bhi.n	8008e46 <__lshift+0x6e>
 8008e5e:	ebac 0304 	sub.w	r3, ip, r4
 8008e62:	3b15      	subs	r3, #21
 8008e64:	f023 0303 	bic.w	r3, r3, #3
 8008e68:	3304      	adds	r3, #4
 8008e6a:	f104 0015 	add.w	r0, r4, #21
 8008e6e:	4584      	cmp	ip, r0
 8008e70:	bf38      	it	cc
 8008e72:	2304      	movcc	r3, #4
 8008e74:	50ca      	str	r2, [r1, r3]
 8008e76:	b10a      	cbz	r2, 8008e7c <__lshift+0xa4>
 8008e78:	f108 0602 	add.w	r6, r8, #2
 8008e7c:	3e01      	subs	r6, #1
 8008e7e:	4638      	mov	r0, r7
 8008e80:	4621      	mov	r1, r4
 8008e82:	612e      	str	r6, [r5, #16]
 8008e84:	f7ff fd92 	bl	80089ac <_Bfree>
 8008e88:	4628      	mov	r0, r5
 8008e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e92:	3301      	adds	r3, #1
 8008e94:	e7c5      	b.n	8008e22 <__lshift+0x4a>
 8008e96:	3904      	subs	r1, #4
 8008e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9c:	459c      	cmp	ip, r3
 8008e9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ea2:	d8f9      	bhi.n	8008e98 <__lshift+0xc0>
 8008ea4:	e7ea      	b.n	8008e7c <__lshift+0xa4>
 8008ea6:	bf00      	nop
 8008ea8:	0800c6a1 	.word	0x0800c6a1
 8008eac:	0800c6b2 	.word	0x0800c6b2

08008eb0 <__mcmp>:
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	690a      	ldr	r2, [r1, #16]
 8008eb4:	6900      	ldr	r0, [r0, #16]
 8008eb6:	b530      	push	{r4, r5, lr}
 8008eb8:	1a80      	subs	r0, r0, r2
 8008eba:	d10e      	bne.n	8008eda <__mcmp+0x2a>
 8008ebc:	3314      	adds	r3, #20
 8008ebe:	3114      	adds	r1, #20
 8008ec0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ec4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ec8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ecc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ed0:	4295      	cmp	r5, r2
 8008ed2:	d003      	beq.n	8008edc <__mcmp+0x2c>
 8008ed4:	d205      	bcs.n	8008ee2 <__mcmp+0x32>
 8008ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eda:	bd30      	pop	{r4, r5, pc}
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	d3f3      	bcc.n	8008ec8 <__mcmp+0x18>
 8008ee0:	e7fb      	b.n	8008eda <__mcmp+0x2a>
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	e7f9      	b.n	8008eda <__mcmp+0x2a>
	...

08008ee8 <__mdiff>:
 8008ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	4689      	mov	r9, r1
 8008eee:	4606      	mov	r6, r0
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	4648      	mov	r0, r9
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	f7ff ffdb 	bl	8008eb0 <__mcmp>
 8008efa:	1e05      	subs	r5, r0, #0
 8008efc:	d112      	bne.n	8008f24 <__mdiff+0x3c>
 8008efe:	4629      	mov	r1, r5
 8008f00:	4630      	mov	r0, r6
 8008f02:	f7ff fd13 	bl	800892c <_Balloc>
 8008f06:	4602      	mov	r2, r0
 8008f08:	b928      	cbnz	r0, 8008f16 <__mdiff+0x2e>
 8008f0a:	f240 2137 	movw	r1, #567	@ 0x237
 8008f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8009008 <__mdiff+0x120>)
 8008f10:	483e      	ldr	r0, [pc, #248]	@ (800900c <__mdiff+0x124>)
 8008f12:	f001 fdf5 	bl	800ab00 <__assert_func>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	b003      	add	sp, #12
 8008f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f24:	bfbc      	itt	lt
 8008f26:	464b      	movlt	r3, r9
 8008f28:	46a1      	movlt	r9, r4
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f30:	bfba      	itte	lt
 8008f32:	461c      	movlt	r4, r3
 8008f34:	2501      	movlt	r5, #1
 8008f36:	2500      	movge	r5, #0
 8008f38:	f7ff fcf8 	bl	800892c <_Balloc>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	b918      	cbnz	r0, 8008f48 <__mdiff+0x60>
 8008f40:	f240 2145 	movw	r1, #581	@ 0x245
 8008f44:	4b30      	ldr	r3, [pc, #192]	@ (8009008 <__mdiff+0x120>)
 8008f46:	e7e3      	b.n	8008f10 <__mdiff+0x28>
 8008f48:	f100 0b14 	add.w	fp, r0, #20
 8008f4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f50:	f109 0310 	add.w	r3, r9, #16
 8008f54:	60c5      	str	r5, [r0, #12]
 8008f56:	f04f 0c00 	mov.w	ip, #0
 8008f5a:	f109 0514 	add.w	r5, r9, #20
 8008f5e:	46d9      	mov	r9, fp
 8008f60:	6926      	ldr	r6, [r4, #16]
 8008f62:	f104 0e14 	add.w	lr, r4, #20
 8008f66:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f6a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	9b01      	ldr	r3, [sp, #4]
 8008f72:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f76:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f7a:	b281      	uxth	r1, r0
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	fa1f f38a 	uxth.w	r3, sl
 8008f82:	1a5b      	subs	r3, r3, r1
 8008f84:	0c00      	lsrs	r0, r0, #16
 8008f86:	4463      	add	r3, ip
 8008f88:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f8c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f96:	4576      	cmp	r6, lr
 8008f98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f9c:	f849 3b04 	str.w	r3, [r9], #4
 8008fa0:	d8e6      	bhi.n	8008f70 <__mdiff+0x88>
 8008fa2:	1b33      	subs	r3, r6, r4
 8008fa4:	3b15      	subs	r3, #21
 8008fa6:	f023 0303 	bic.w	r3, r3, #3
 8008faa:	3415      	adds	r4, #21
 8008fac:	3304      	adds	r3, #4
 8008fae:	42a6      	cmp	r6, r4
 8008fb0:	bf38      	it	cc
 8008fb2:	2304      	movcc	r3, #4
 8008fb4:	441d      	add	r5, r3
 8008fb6:	445b      	add	r3, fp
 8008fb8:	461e      	mov	r6, r3
 8008fba:	462c      	mov	r4, r5
 8008fbc:	4544      	cmp	r4, r8
 8008fbe:	d30e      	bcc.n	8008fde <__mdiff+0xf6>
 8008fc0:	f108 0103 	add.w	r1, r8, #3
 8008fc4:	1b49      	subs	r1, r1, r5
 8008fc6:	f021 0103 	bic.w	r1, r1, #3
 8008fca:	3d03      	subs	r5, #3
 8008fcc:	45a8      	cmp	r8, r5
 8008fce:	bf38      	it	cc
 8008fd0:	2100      	movcc	r1, #0
 8008fd2:	440b      	add	r3, r1
 8008fd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fd8:	b199      	cbz	r1, 8009002 <__mdiff+0x11a>
 8008fda:	6117      	str	r7, [r2, #16]
 8008fdc:	e79e      	b.n	8008f1c <__mdiff+0x34>
 8008fde:	46e6      	mov	lr, ip
 8008fe0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008fe4:	fa1f fc81 	uxth.w	ip, r1
 8008fe8:	44f4      	add	ip, lr
 8008fea:	0c08      	lsrs	r0, r1, #16
 8008fec:	4471      	add	r1, lr
 8008fee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ff2:	b289      	uxth	r1, r1
 8008ff4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ff8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ffc:	f846 1b04 	str.w	r1, [r6], #4
 8009000:	e7dc      	b.n	8008fbc <__mdiff+0xd4>
 8009002:	3f01      	subs	r7, #1
 8009004:	e7e6      	b.n	8008fd4 <__mdiff+0xec>
 8009006:	bf00      	nop
 8009008:	0800c6a1 	.word	0x0800c6a1
 800900c:	0800c6b2 	.word	0x0800c6b2

08009010 <__ulp>:
 8009010:	4b0e      	ldr	r3, [pc, #56]	@ (800904c <__ulp+0x3c>)
 8009012:	400b      	ands	r3, r1
 8009014:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009018:	2b00      	cmp	r3, #0
 800901a:	dc08      	bgt.n	800902e <__ulp+0x1e>
 800901c:	425b      	negs	r3, r3
 800901e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009022:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009026:	da04      	bge.n	8009032 <__ulp+0x22>
 8009028:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800902c:	4113      	asrs	r3, r2
 800902e:	2200      	movs	r2, #0
 8009030:	e008      	b.n	8009044 <__ulp+0x34>
 8009032:	f1a2 0314 	sub.w	r3, r2, #20
 8009036:	2b1e      	cmp	r3, #30
 8009038:	bfd6      	itet	le
 800903a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800903e:	2201      	movgt	r2, #1
 8009040:	40da      	lsrle	r2, r3
 8009042:	2300      	movs	r3, #0
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	7ff00000 	.word	0x7ff00000

08009050 <__b2d>:
 8009050:	6902      	ldr	r2, [r0, #16]
 8009052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009054:	f100 0614 	add.w	r6, r0, #20
 8009058:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800905c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009060:	4f1e      	ldr	r7, [pc, #120]	@ (80090dc <__b2d+0x8c>)
 8009062:	4620      	mov	r0, r4
 8009064:	f7ff fd54 	bl	8008b10 <__hi0bits>
 8009068:	4603      	mov	r3, r0
 800906a:	f1c0 0020 	rsb	r0, r0, #32
 800906e:	2b0a      	cmp	r3, #10
 8009070:	f1a2 0504 	sub.w	r5, r2, #4
 8009074:	6008      	str	r0, [r1, #0]
 8009076:	dc12      	bgt.n	800909e <__b2d+0x4e>
 8009078:	42ae      	cmp	r6, r5
 800907a:	bf2c      	ite	cs
 800907c:	2200      	movcs	r2, #0
 800907e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009082:	f1c3 0c0b 	rsb	ip, r3, #11
 8009086:	3315      	adds	r3, #21
 8009088:	fa24 fe0c 	lsr.w	lr, r4, ip
 800908c:	fa04 f303 	lsl.w	r3, r4, r3
 8009090:	fa22 f20c 	lsr.w	r2, r2, ip
 8009094:	ea4e 0107 	orr.w	r1, lr, r7
 8009098:	431a      	orrs	r2, r3
 800909a:	4610      	mov	r0, r2
 800909c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800909e:	42ae      	cmp	r6, r5
 80090a0:	bf36      	itet	cc
 80090a2:	f1a2 0508 	subcc.w	r5, r2, #8
 80090a6:	2200      	movcs	r2, #0
 80090a8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80090ac:	3b0b      	subs	r3, #11
 80090ae:	d012      	beq.n	80090d6 <__b2d+0x86>
 80090b0:	f1c3 0720 	rsb	r7, r3, #32
 80090b4:	fa22 f107 	lsr.w	r1, r2, r7
 80090b8:	409c      	lsls	r4, r3
 80090ba:	430c      	orrs	r4, r1
 80090bc:	42b5      	cmp	r5, r6
 80090be:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80090c2:	bf94      	ite	ls
 80090c4:	2400      	movls	r4, #0
 80090c6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80090ca:	409a      	lsls	r2, r3
 80090cc:	40fc      	lsrs	r4, r7
 80090ce:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80090d2:	4322      	orrs	r2, r4
 80090d4:	e7e1      	b.n	800909a <__b2d+0x4a>
 80090d6:	ea44 0107 	orr.w	r1, r4, r7
 80090da:	e7de      	b.n	800909a <__b2d+0x4a>
 80090dc:	3ff00000 	.word	0x3ff00000

080090e0 <__d2b>:
 80090e0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80090e4:	2101      	movs	r1, #1
 80090e6:	4690      	mov	r8, r2
 80090e8:	4699      	mov	r9, r3
 80090ea:	9e08      	ldr	r6, [sp, #32]
 80090ec:	f7ff fc1e 	bl	800892c <_Balloc>
 80090f0:	4604      	mov	r4, r0
 80090f2:	b930      	cbnz	r0, 8009102 <__d2b+0x22>
 80090f4:	4602      	mov	r2, r0
 80090f6:	f240 310f 	movw	r1, #783	@ 0x30f
 80090fa:	4b23      	ldr	r3, [pc, #140]	@ (8009188 <__d2b+0xa8>)
 80090fc:	4823      	ldr	r0, [pc, #140]	@ (800918c <__d2b+0xac>)
 80090fe:	f001 fcff 	bl	800ab00 <__assert_func>
 8009102:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009106:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800910a:	b10d      	cbz	r5, 8009110 <__d2b+0x30>
 800910c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	f1b8 0300 	subs.w	r3, r8, #0
 8009116:	d024      	beq.n	8009162 <__d2b+0x82>
 8009118:	4668      	mov	r0, sp
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	f7ff fd17 	bl	8008b4e <__lo0bits>
 8009120:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009124:	b1d8      	cbz	r0, 800915e <__d2b+0x7e>
 8009126:	f1c0 0320 	rsb	r3, r0, #32
 800912a:	fa02 f303 	lsl.w	r3, r2, r3
 800912e:	430b      	orrs	r3, r1
 8009130:	40c2      	lsrs	r2, r0
 8009132:	6163      	str	r3, [r4, #20]
 8009134:	9201      	str	r2, [sp, #4]
 8009136:	9b01      	ldr	r3, [sp, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	bf0c      	ite	eq
 800913c:	2201      	moveq	r2, #1
 800913e:	2202      	movne	r2, #2
 8009140:	61a3      	str	r3, [r4, #24]
 8009142:	6122      	str	r2, [r4, #16]
 8009144:	b1ad      	cbz	r5, 8009172 <__d2b+0x92>
 8009146:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800914a:	4405      	add	r5, r0
 800914c:	6035      	str	r5, [r6, #0]
 800914e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009154:	6018      	str	r0, [r3, #0]
 8009156:	4620      	mov	r0, r4
 8009158:	b002      	add	sp, #8
 800915a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800915e:	6161      	str	r1, [r4, #20]
 8009160:	e7e9      	b.n	8009136 <__d2b+0x56>
 8009162:	a801      	add	r0, sp, #4
 8009164:	f7ff fcf3 	bl	8008b4e <__lo0bits>
 8009168:	9b01      	ldr	r3, [sp, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	6163      	str	r3, [r4, #20]
 800916e:	3020      	adds	r0, #32
 8009170:	e7e7      	b.n	8009142 <__d2b+0x62>
 8009172:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009176:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800917a:	6030      	str	r0, [r6, #0]
 800917c:	6918      	ldr	r0, [r3, #16]
 800917e:	f7ff fcc7 	bl	8008b10 <__hi0bits>
 8009182:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009186:	e7e4      	b.n	8009152 <__d2b+0x72>
 8009188:	0800c6a1 	.word	0x0800c6a1
 800918c:	0800c6b2 	.word	0x0800c6b2

08009190 <__ratio>:
 8009190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	b085      	sub	sp, #20
 8009196:	e9cd 1000 	strd	r1, r0, [sp]
 800919a:	a902      	add	r1, sp, #8
 800919c:	f7ff ff58 	bl	8009050 <__b2d>
 80091a0:	468b      	mov	fp, r1
 80091a2:	4606      	mov	r6, r0
 80091a4:	460f      	mov	r7, r1
 80091a6:	9800      	ldr	r0, [sp, #0]
 80091a8:	a903      	add	r1, sp, #12
 80091aa:	f7ff ff51 	bl	8009050 <__b2d>
 80091ae:	460d      	mov	r5, r1
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	4689      	mov	r9, r1
 80091b4:	6919      	ldr	r1, [r3, #16]
 80091b6:	9b00      	ldr	r3, [sp, #0]
 80091b8:	4604      	mov	r4, r0
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	4630      	mov	r0, r6
 80091be:	1ac9      	subs	r1, r1, r3
 80091c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80091c4:	1a9b      	subs	r3, r3, r2
 80091c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	bfcd      	iteet	gt
 80091ce:	463a      	movgt	r2, r7
 80091d0:	462a      	movle	r2, r5
 80091d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091d6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80091da:	bfd8      	it	le
 80091dc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80091e0:	464b      	mov	r3, r9
 80091e2:	4622      	mov	r2, r4
 80091e4:	4659      	mov	r1, fp
 80091e6:	f7f7 fb0d 	bl	8000804 <__aeabi_ddiv>
 80091ea:	b005      	add	sp, #20
 80091ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091f0 <__copybits>:
 80091f0:	3901      	subs	r1, #1
 80091f2:	b570      	push	{r4, r5, r6, lr}
 80091f4:	1149      	asrs	r1, r1, #5
 80091f6:	6914      	ldr	r4, [r2, #16]
 80091f8:	3101      	adds	r1, #1
 80091fa:	f102 0314 	add.w	r3, r2, #20
 80091fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009202:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009206:	1f05      	subs	r5, r0, #4
 8009208:	42a3      	cmp	r3, r4
 800920a:	d30c      	bcc.n	8009226 <__copybits+0x36>
 800920c:	1aa3      	subs	r3, r4, r2
 800920e:	3b11      	subs	r3, #17
 8009210:	f023 0303 	bic.w	r3, r3, #3
 8009214:	3211      	adds	r2, #17
 8009216:	42a2      	cmp	r2, r4
 8009218:	bf88      	it	hi
 800921a:	2300      	movhi	r3, #0
 800921c:	4418      	add	r0, r3
 800921e:	2300      	movs	r3, #0
 8009220:	4288      	cmp	r0, r1
 8009222:	d305      	bcc.n	8009230 <__copybits+0x40>
 8009224:	bd70      	pop	{r4, r5, r6, pc}
 8009226:	f853 6b04 	ldr.w	r6, [r3], #4
 800922a:	f845 6f04 	str.w	r6, [r5, #4]!
 800922e:	e7eb      	b.n	8009208 <__copybits+0x18>
 8009230:	f840 3b04 	str.w	r3, [r0], #4
 8009234:	e7f4      	b.n	8009220 <__copybits+0x30>

08009236 <__any_on>:
 8009236:	f100 0214 	add.w	r2, r0, #20
 800923a:	6900      	ldr	r0, [r0, #16]
 800923c:	114b      	asrs	r3, r1, #5
 800923e:	4298      	cmp	r0, r3
 8009240:	b510      	push	{r4, lr}
 8009242:	db11      	blt.n	8009268 <__any_on+0x32>
 8009244:	dd0a      	ble.n	800925c <__any_on+0x26>
 8009246:	f011 011f 	ands.w	r1, r1, #31
 800924a:	d007      	beq.n	800925c <__any_on+0x26>
 800924c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009250:	fa24 f001 	lsr.w	r0, r4, r1
 8009254:	fa00 f101 	lsl.w	r1, r0, r1
 8009258:	428c      	cmp	r4, r1
 800925a:	d10b      	bne.n	8009274 <__any_on+0x3e>
 800925c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009260:	4293      	cmp	r3, r2
 8009262:	d803      	bhi.n	800926c <__any_on+0x36>
 8009264:	2000      	movs	r0, #0
 8009266:	bd10      	pop	{r4, pc}
 8009268:	4603      	mov	r3, r0
 800926a:	e7f7      	b.n	800925c <__any_on+0x26>
 800926c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009270:	2900      	cmp	r1, #0
 8009272:	d0f5      	beq.n	8009260 <__any_on+0x2a>
 8009274:	2001      	movs	r0, #1
 8009276:	e7f6      	b.n	8009266 <__any_on+0x30>

08009278 <sulp>:
 8009278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927c:	460f      	mov	r7, r1
 800927e:	4690      	mov	r8, r2
 8009280:	f7ff fec6 	bl	8009010 <__ulp>
 8009284:	4604      	mov	r4, r0
 8009286:	460d      	mov	r5, r1
 8009288:	f1b8 0f00 	cmp.w	r8, #0
 800928c:	d011      	beq.n	80092b2 <sulp+0x3a>
 800928e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009292:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009296:	2b00      	cmp	r3, #0
 8009298:	dd0b      	ble.n	80092b2 <sulp+0x3a>
 800929a:	2400      	movs	r4, #0
 800929c:	051b      	lsls	r3, r3, #20
 800929e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80092a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80092a6:	4622      	mov	r2, r4
 80092a8:	462b      	mov	r3, r5
 80092aa:	f7f7 f981 	bl	80005b0 <__aeabi_dmul>
 80092ae:	4604      	mov	r4, r0
 80092b0:	460d      	mov	r5, r1
 80092b2:	4620      	mov	r0, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ba:	0000      	movs	r0, r0
 80092bc:	0000      	movs	r0, r0
	...

080092c0 <_strtod_l>:
 80092c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	b09f      	sub	sp, #124	@ 0x7c
 80092c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80092c8:	2200      	movs	r2, #0
 80092ca:	460c      	mov	r4, r1
 80092cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80092ce:	f04f 0a00 	mov.w	sl, #0
 80092d2:	f04f 0b00 	mov.w	fp, #0
 80092d6:	460a      	mov	r2, r1
 80092d8:	9005      	str	r0, [sp, #20]
 80092da:	9219      	str	r2, [sp, #100]	@ 0x64
 80092dc:	7811      	ldrb	r1, [r2, #0]
 80092de:	292b      	cmp	r1, #43	@ 0x2b
 80092e0:	d048      	beq.n	8009374 <_strtod_l+0xb4>
 80092e2:	d836      	bhi.n	8009352 <_strtod_l+0x92>
 80092e4:	290d      	cmp	r1, #13
 80092e6:	d830      	bhi.n	800934a <_strtod_l+0x8a>
 80092e8:	2908      	cmp	r1, #8
 80092ea:	d830      	bhi.n	800934e <_strtod_l+0x8e>
 80092ec:	2900      	cmp	r1, #0
 80092ee:	d039      	beq.n	8009364 <_strtod_l+0xa4>
 80092f0:	2200      	movs	r2, #0
 80092f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80092f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80092f6:	782a      	ldrb	r2, [r5, #0]
 80092f8:	2a30      	cmp	r2, #48	@ 0x30
 80092fa:	f040 80b1 	bne.w	8009460 <_strtod_l+0x1a0>
 80092fe:	786a      	ldrb	r2, [r5, #1]
 8009300:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009304:	2a58      	cmp	r2, #88	@ 0x58
 8009306:	d16c      	bne.n	80093e2 <_strtod_l+0x122>
 8009308:	9302      	str	r3, [sp, #8]
 800930a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800930c:	4a8e      	ldr	r2, [pc, #568]	@ (8009548 <_strtod_l+0x288>)
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	ab1a      	add	r3, sp, #104	@ 0x68
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	9805      	ldr	r0, [sp, #20]
 8009316:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009318:	a919      	add	r1, sp, #100	@ 0x64
 800931a:	f001 fc8b 	bl	800ac34 <__gethex>
 800931e:	f010 060f 	ands.w	r6, r0, #15
 8009322:	4604      	mov	r4, r0
 8009324:	d005      	beq.n	8009332 <_strtod_l+0x72>
 8009326:	2e06      	cmp	r6, #6
 8009328:	d126      	bne.n	8009378 <_strtod_l+0xb8>
 800932a:	2300      	movs	r3, #0
 800932c:	3501      	adds	r5, #1
 800932e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009330:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009332:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009334:	2b00      	cmp	r3, #0
 8009336:	f040 8584 	bne.w	8009e42 <_strtod_l+0xb82>
 800933a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800933c:	b1bb      	cbz	r3, 800936e <_strtod_l+0xae>
 800933e:	4650      	mov	r0, sl
 8009340:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009344:	b01f      	add	sp, #124	@ 0x7c
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	2920      	cmp	r1, #32
 800934c:	d1d0      	bne.n	80092f0 <_strtod_l+0x30>
 800934e:	3201      	adds	r2, #1
 8009350:	e7c3      	b.n	80092da <_strtod_l+0x1a>
 8009352:	292d      	cmp	r1, #45	@ 0x2d
 8009354:	d1cc      	bne.n	80092f0 <_strtod_l+0x30>
 8009356:	2101      	movs	r1, #1
 8009358:	910b      	str	r1, [sp, #44]	@ 0x2c
 800935a:	1c51      	adds	r1, r2, #1
 800935c:	9119      	str	r1, [sp, #100]	@ 0x64
 800935e:	7852      	ldrb	r2, [r2, #1]
 8009360:	2a00      	cmp	r2, #0
 8009362:	d1c7      	bne.n	80092f4 <_strtod_l+0x34>
 8009364:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009366:	9419      	str	r4, [sp, #100]	@ 0x64
 8009368:	2b00      	cmp	r3, #0
 800936a:	f040 8568 	bne.w	8009e3e <_strtod_l+0xb7e>
 800936e:	4650      	mov	r0, sl
 8009370:	4659      	mov	r1, fp
 8009372:	e7e7      	b.n	8009344 <_strtod_l+0x84>
 8009374:	2100      	movs	r1, #0
 8009376:	e7ef      	b.n	8009358 <_strtod_l+0x98>
 8009378:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800937a:	b13a      	cbz	r2, 800938c <_strtod_l+0xcc>
 800937c:	2135      	movs	r1, #53	@ 0x35
 800937e:	a81c      	add	r0, sp, #112	@ 0x70
 8009380:	f7ff ff36 	bl	80091f0 <__copybits>
 8009384:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009386:	9805      	ldr	r0, [sp, #20]
 8009388:	f7ff fb10 	bl	80089ac <_Bfree>
 800938c:	3e01      	subs	r6, #1
 800938e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009390:	2e04      	cmp	r6, #4
 8009392:	d806      	bhi.n	80093a2 <_strtod_l+0xe2>
 8009394:	e8df f006 	tbb	[pc, r6]
 8009398:	201d0314 	.word	0x201d0314
 800939c:	14          	.byte	0x14
 800939d:	00          	.byte	0x00
 800939e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80093a2:	05e1      	lsls	r1, r4, #23
 80093a4:	bf48      	it	mi
 80093a6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80093aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093ae:	0d1b      	lsrs	r3, r3, #20
 80093b0:	051b      	lsls	r3, r3, #20
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1bd      	bne.n	8009332 <_strtod_l+0x72>
 80093b6:	f7fe fb2b 	bl	8007a10 <__errno>
 80093ba:	2322      	movs	r3, #34	@ 0x22
 80093bc:	6003      	str	r3, [r0, #0]
 80093be:	e7b8      	b.n	8009332 <_strtod_l+0x72>
 80093c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80093c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80093c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80093cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093d0:	e7e7      	b.n	80093a2 <_strtod_l+0xe2>
 80093d2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800954c <_strtod_l+0x28c>
 80093d6:	e7e4      	b.n	80093a2 <_strtod_l+0xe2>
 80093d8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80093dc:	f04f 3aff 	mov.w	sl, #4294967295
 80093e0:	e7df      	b.n	80093a2 <_strtod_l+0xe2>
 80093e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093e4:	1c5a      	adds	r2, r3, #1
 80093e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80093e8:	785b      	ldrb	r3, [r3, #1]
 80093ea:	2b30      	cmp	r3, #48	@ 0x30
 80093ec:	d0f9      	beq.n	80093e2 <_strtod_l+0x122>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d09f      	beq.n	8009332 <_strtod_l+0x72>
 80093f2:	2301      	movs	r3, #1
 80093f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093f8:	220a      	movs	r2, #10
 80093fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80093fc:	2300      	movs	r3, #0
 80093fe:	461f      	mov	r7, r3
 8009400:	9308      	str	r3, [sp, #32]
 8009402:	930a      	str	r3, [sp, #40]	@ 0x28
 8009404:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009406:	7805      	ldrb	r5, [r0, #0]
 8009408:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800940c:	b2d9      	uxtb	r1, r3
 800940e:	2909      	cmp	r1, #9
 8009410:	d928      	bls.n	8009464 <_strtod_l+0x1a4>
 8009412:	2201      	movs	r2, #1
 8009414:	494e      	ldr	r1, [pc, #312]	@ (8009550 <_strtod_l+0x290>)
 8009416:	f7fe fa9e 	bl	8007956 <strncmp>
 800941a:	2800      	cmp	r0, #0
 800941c:	d032      	beq.n	8009484 <_strtod_l+0x1c4>
 800941e:	2000      	movs	r0, #0
 8009420:	462a      	mov	r2, r5
 8009422:	4681      	mov	r9, r0
 8009424:	463d      	mov	r5, r7
 8009426:	4603      	mov	r3, r0
 8009428:	2a65      	cmp	r2, #101	@ 0x65
 800942a:	d001      	beq.n	8009430 <_strtod_l+0x170>
 800942c:	2a45      	cmp	r2, #69	@ 0x45
 800942e:	d114      	bne.n	800945a <_strtod_l+0x19a>
 8009430:	b91d      	cbnz	r5, 800943a <_strtod_l+0x17a>
 8009432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009434:	4302      	orrs	r2, r0
 8009436:	d095      	beq.n	8009364 <_strtod_l+0xa4>
 8009438:	2500      	movs	r5, #0
 800943a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800943c:	1c62      	adds	r2, r4, #1
 800943e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009440:	7862      	ldrb	r2, [r4, #1]
 8009442:	2a2b      	cmp	r2, #43	@ 0x2b
 8009444:	d077      	beq.n	8009536 <_strtod_l+0x276>
 8009446:	2a2d      	cmp	r2, #45	@ 0x2d
 8009448:	d07b      	beq.n	8009542 <_strtod_l+0x282>
 800944a:	f04f 0c00 	mov.w	ip, #0
 800944e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009452:	2909      	cmp	r1, #9
 8009454:	f240 8082 	bls.w	800955c <_strtod_l+0x29c>
 8009458:	9419      	str	r4, [sp, #100]	@ 0x64
 800945a:	f04f 0800 	mov.w	r8, #0
 800945e:	e0a2      	b.n	80095a6 <_strtod_l+0x2e6>
 8009460:	2300      	movs	r3, #0
 8009462:	e7c7      	b.n	80093f4 <_strtod_l+0x134>
 8009464:	2f08      	cmp	r7, #8
 8009466:	bfd5      	itete	le
 8009468:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800946a:	9908      	ldrgt	r1, [sp, #32]
 800946c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009470:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009474:	f100 0001 	add.w	r0, r0, #1
 8009478:	bfd4      	ite	le
 800947a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800947c:	9308      	strgt	r3, [sp, #32]
 800947e:	3701      	adds	r7, #1
 8009480:	9019      	str	r0, [sp, #100]	@ 0x64
 8009482:	e7bf      	b.n	8009404 <_strtod_l+0x144>
 8009484:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	9219      	str	r2, [sp, #100]	@ 0x64
 800948a:	785a      	ldrb	r2, [r3, #1]
 800948c:	b37f      	cbz	r7, 80094ee <_strtod_l+0x22e>
 800948e:	4681      	mov	r9, r0
 8009490:	463d      	mov	r5, r7
 8009492:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009496:	2b09      	cmp	r3, #9
 8009498:	d912      	bls.n	80094c0 <_strtod_l+0x200>
 800949a:	2301      	movs	r3, #1
 800949c:	e7c4      	b.n	8009428 <_strtod_l+0x168>
 800949e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094a0:	3001      	adds	r0, #1
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80094a6:	785a      	ldrb	r2, [r3, #1]
 80094a8:	2a30      	cmp	r2, #48	@ 0x30
 80094aa:	d0f8      	beq.n	800949e <_strtod_l+0x1de>
 80094ac:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	f200 84cb 	bhi.w	8009e4c <_strtod_l+0xb8c>
 80094b6:	4681      	mov	r9, r0
 80094b8:	2000      	movs	r0, #0
 80094ba:	4605      	mov	r5, r0
 80094bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094be:	930c      	str	r3, [sp, #48]	@ 0x30
 80094c0:	3a30      	subs	r2, #48	@ 0x30
 80094c2:	f100 0301 	add.w	r3, r0, #1
 80094c6:	d02a      	beq.n	800951e <_strtod_l+0x25e>
 80094c8:	4499      	add	r9, r3
 80094ca:	210a      	movs	r1, #10
 80094cc:	462b      	mov	r3, r5
 80094ce:	eb00 0c05 	add.w	ip, r0, r5
 80094d2:	4563      	cmp	r3, ip
 80094d4:	d10d      	bne.n	80094f2 <_strtod_l+0x232>
 80094d6:	1c69      	adds	r1, r5, #1
 80094d8:	4401      	add	r1, r0
 80094da:	4428      	add	r0, r5
 80094dc:	2808      	cmp	r0, #8
 80094de:	dc16      	bgt.n	800950e <_strtod_l+0x24e>
 80094e0:	230a      	movs	r3, #10
 80094e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094e4:	fb03 2300 	mla	r3, r3, r0, r2
 80094e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80094ea:	2300      	movs	r3, #0
 80094ec:	e018      	b.n	8009520 <_strtod_l+0x260>
 80094ee:	4638      	mov	r0, r7
 80094f0:	e7da      	b.n	80094a8 <_strtod_l+0x1e8>
 80094f2:	2b08      	cmp	r3, #8
 80094f4:	f103 0301 	add.w	r3, r3, #1
 80094f8:	dc03      	bgt.n	8009502 <_strtod_l+0x242>
 80094fa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80094fc:	434e      	muls	r6, r1
 80094fe:	960a      	str	r6, [sp, #40]	@ 0x28
 8009500:	e7e7      	b.n	80094d2 <_strtod_l+0x212>
 8009502:	2b10      	cmp	r3, #16
 8009504:	bfde      	ittt	le
 8009506:	9e08      	ldrle	r6, [sp, #32]
 8009508:	434e      	mulle	r6, r1
 800950a:	9608      	strle	r6, [sp, #32]
 800950c:	e7e1      	b.n	80094d2 <_strtod_l+0x212>
 800950e:	280f      	cmp	r0, #15
 8009510:	dceb      	bgt.n	80094ea <_strtod_l+0x22a>
 8009512:	230a      	movs	r3, #10
 8009514:	9808      	ldr	r0, [sp, #32]
 8009516:	fb03 2300 	mla	r3, r3, r0, r2
 800951a:	9308      	str	r3, [sp, #32]
 800951c:	e7e5      	b.n	80094ea <_strtod_l+0x22a>
 800951e:	4629      	mov	r1, r5
 8009520:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009522:	460d      	mov	r5, r1
 8009524:	1c50      	adds	r0, r2, #1
 8009526:	9019      	str	r0, [sp, #100]	@ 0x64
 8009528:	7852      	ldrb	r2, [r2, #1]
 800952a:	4618      	mov	r0, r3
 800952c:	e7b1      	b.n	8009492 <_strtod_l+0x1d2>
 800952e:	f04f 0900 	mov.w	r9, #0
 8009532:	2301      	movs	r3, #1
 8009534:	e77d      	b.n	8009432 <_strtod_l+0x172>
 8009536:	f04f 0c00 	mov.w	ip, #0
 800953a:	1ca2      	adds	r2, r4, #2
 800953c:	9219      	str	r2, [sp, #100]	@ 0x64
 800953e:	78a2      	ldrb	r2, [r4, #2]
 8009540:	e785      	b.n	800944e <_strtod_l+0x18e>
 8009542:	f04f 0c01 	mov.w	ip, #1
 8009546:	e7f8      	b.n	800953a <_strtod_l+0x27a>
 8009548:	0800c820 	.word	0x0800c820
 800954c:	7ff00000 	.word	0x7ff00000
 8009550:	0800c808 	.word	0x0800c808
 8009554:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009556:	1c51      	adds	r1, r2, #1
 8009558:	9119      	str	r1, [sp, #100]	@ 0x64
 800955a:	7852      	ldrb	r2, [r2, #1]
 800955c:	2a30      	cmp	r2, #48	@ 0x30
 800955e:	d0f9      	beq.n	8009554 <_strtod_l+0x294>
 8009560:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009564:	2908      	cmp	r1, #8
 8009566:	f63f af78 	bhi.w	800945a <_strtod_l+0x19a>
 800956a:	f04f 080a 	mov.w	r8, #10
 800956e:	3a30      	subs	r2, #48	@ 0x30
 8009570:	920e      	str	r2, [sp, #56]	@ 0x38
 8009572:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009574:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009576:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009578:	1c56      	adds	r6, r2, #1
 800957a:	9619      	str	r6, [sp, #100]	@ 0x64
 800957c:	7852      	ldrb	r2, [r2, #1]
 800957e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009582:	f1be 0f09 	cmp.w	lr, #9
 8009586:	d939      	bls.n	80095fc <_strtod_l+0x33c>
 8009588:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800958a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800958e:	1a76      	subs	r6, r6, r1
 8009590:	2e08      	cmp	r6, #8
 8009592:	dc03      	bgt.n	800959c <_strtod_l+0x2dc>
 8009594:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009596:	4588      	cmp	r8, r1
 8009598:	bfa8      	it	ge
 800959a:	4688      	movge	r8, r1
 800959c:	f1bc 0f00 	cmp.w	ip, #0
 80095a0:	d001      	beq.n	80095a6 <_strtod_l+0x2e6>
 80095a2:	f1c8 0800 	rsb	r8, r8, #0
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	d14e      	bne.n	8009648 <_strtod_l+0x388>
 80095aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095ac:	4308      	orrs	r0, r1
 80095ae:	f47f aec0 	bne.w	8009332 <_strtod_l+0x72>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f47f aed6 	bne.w	8009364 <_strtod_l+0xa4>
 80095b8:	2a69      	cmp	r2, #105	@ 0x69
 80095ba:	d028      	beq.n	800960e <_strtod_l+0x34e>
 80095bc:	dc25      	bgt.n	800960a <_strtod_l+0x34a>
 80095be:	2a49      	cmp	r2, #73	@ 0x49
 80095c0:	d025      	beq.n	800960e <_strtod_l+0x34e>
 80095c2:	2a4e      	cmp	r2, #78	@ 0x4e
 80095c4:	f47f aece 	bne.w	8009364 <_strtod_l+0xa4>
 80095c8:	499a      	ldr	r1, [pc, #616]	@ (8009834 <_strtod_l+0x574>)
 80095ca:	a819      	add	r0, sp, #100	@ 0x64
 80095cc:	f001 fd54 	bl	800b078 <__match>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	f43f aec7 	beq.w	8009364 <_strtod_l+0xa4>
 80095d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	2b28      	cmp	r3, #40	@ 0x28
 80095dc:	d12e      	bne.n	800963c <_strtod_l+0x37c>
 80095de:	4996      	ldr	r1, [pc, #600]	@ (8009838 <_strtod_l+0x578>)
 80095e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80095e2:	a819      	add	r0, sp, #100	@ 0x64
 80095e4:	f001 fd5c 	bl	800b0a0 <__hexnan>
 80095e8:	2805      	cmp	r0, #5
 80095ea:	d127      	bne.n	800963c <_strtod_l+0x37c>
 80095ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80095ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80095f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80095f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80095fa:	e69a      	b.n	8009332 <_strtod_l+0x72>
 80095fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80095fe:	fb08 2101 	mla	r1, r8, r1, r2
 8009602:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009606:	920e      	str	r2, [sp, #56]	@ 0x38
 8009608:	e7b5      	b.n	8009576 <_strtod_l+0x2b6>
 800960a:	2a6e      	cmp	r2, #110	@ 0x6e
 800960c:	e7da      	b.n	80095c4 <_strtod_l+0x304>
 800960e:	498b      	ldr	r1, [pc, #556]	@ (800983c <_strtod_l+0x57c>)
 8009610:	a819      	add	r0, sp, #100	@ 0x64
 8009612:	f001 fd31 	bl	800b078 <__match>
 8009616:	2800      	cmp	r0, #0
 8009618:	f43f aea4 	beq.w	8009364 <_strtod_l+0xa4>
 800961c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800961e:	4988      	ldr	r1, [pc, #544]	@ (8009840 <_strtod_l+0x580>)
 8009620:	3b01      	subs	r3, #1
 8009622:	a819      	add	r0, sp, #100	@ 0x64
 8009624:	9319      	str	r3, [sp, #100]	@ 0x64
 8009626:	f001 fd27 	bl	800b078 <__match>
 800962a:	b910      	cbnz	r0, 8009632 <_strtod_l+0x372>
 800962c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800962e:	3301      	adds	r3, #1
 8009630:	9319      	str	r3, [sp, #100]	@ 0x64
 8009632:	f04f 0a00 	mov.w	sl, #0
 8009636:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009844 <_strtod_l+0x584>
 800963a:	e67a      	b.n	8009332 <_strtod_l+0x72>
 800963c:	4882      	ldr	r0, [pc, #520]	@ (8009848 <_strtod_l+0x588>)
 800963e:	f001 fa59 	bl	800aaf4 <nan>
 8009642:	4682      	mov	sl, r0
 8009644:	468b      	mov	fp, r1
 8009646:	e674      	b.n	8009332 <_strtod_l+0x72>
 8009648:	eba8 0309 	sub.w	r3, r8, r9
 800964c:	2f00      	cmp	r7, #0
 800964e:	bf08      	it	eq
 8009650:	462f      	moveq	r7, r5
 8009652:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009654:	2d10      	cmp	r5, #16
 8009656:	462c      	mov	r4, r5
 8009658:	9309      	str	r3, [sp, #36]	@ 0x24
 800965a:	bfa8      	it	ge
 800965c:	2410      	movge	r4, #16
 800965e:	f7f6 ff2d 	bl	80004bc <__aeabi_ui2d>
 8009662:	2d09      	cmp	r5, #9
 8009664:	4682      	mov	sl, r0
 8009666:	468b      	mov	fp, r1
 8009668:	dc11      	bgt.n	800968e <_strtod_l+0x3ce>
 800966a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800966c:	2b00      	cmp	r3, #0
 800966e:	f43f ae60 	beq.w	8009332 <_strtod_l+0x72>
 8009672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009674:	dd76      	ble.n	8009764 <_strtod_l+0x4a4>
 8009676:	2b16      	cmp	r3, #22
 8009678:	dc5d      	bgt.n	8009736 <_strtod_l+0x476>
 800967a:	4974      	ldr	r1, [pc, #464]	@ (800984c <_strtod_l+0x58c>)
 800967c:	4652      	mov	r2, sl
 800967e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009682:	465b      	mov	r3, fp
 8009684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009688:	f7f6 ff92 	bl	80005b0 <__aeabi_dmul>
 800968c:	e7d9      	b.n	8009642 <_strtod_l+0x382>
 800968e:	4b6f      	ldr	r3, [pc, #444]	@ (800984c <_strtod_l+0x58c>)
 8009690:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009694:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009698:	f7f6 ff8a 	bl	80005b0 <__aeabi_dmul>
 800969c:	4682      	mov	sl, r0
 800969e:	9808      	ldr	r0, [sp, #32]
 80096a0:	468b      	mov	fp, r1
 80096a2:	f7f6 ff0b 	bl	80004bc <__aeabi_ui2d>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4650      	mov	r0, sl
 80096ac:	4659      	mov	r1, fp
 80096ae:	f7f6 fdc9 	bl	8000244 <__adddf3>
 80096b2:	2d0f      	cmp	r5, #15
 80096b4:	4682      	mov	sl, r0
 80096b6:	468b      	mov	fp, r1
 80096b8:	ddd7      	ble.n	800966a <_strtod_l+0x3aa>
 80096ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096bc:	1b2c      	subs	r4, r5, r4
 80096be:	441c      	add	r4, r3
 80096c0:	2c00      	cmp	r4, #0
 80096c2:	f340 8096 	ble.w	80097f2 <_strtod_l+0x532>
 80096c6:	f014 030f 	ands.w	r3, r4, #15
 80096ca:	d00a      	beq.n	80096e2 <_strtod_l+0x422>
 80096cc:	495f      	ldr	r1, [pc, #380]	@ (800984c <_strtod_l+0x58c>)
 80096ce:	4652      	mov	r2, sl
 80096d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096d8:	465b      	mov	r3, fp
 80096da:	f7f6 ff69 	bl	80005b0 <__aeabi_dmul>
 80096de:	4682      	mov	sl, r0
 80096e0:	468b      	mov	fp, r1
 80096e2:	f034 040f 	bics.w	r4, r4, #15
 80096e6:	d073      	beq.n	80097d0 <_strtod_l+0x510>
 80096e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80096ec:	dd48      	ble.n	8009780 <_strtod_l+0x4c0>
 80096ee:	2400      	movs	r4, #0
 80096f0:	46a0      	mov	r8, r4
 80096f2:	46a1      	mov	r9, r4
 80096f4:	940a      	str	r4, [sp, #40]	@ 0x28
 80096f6:	2322      	movs	r3, #34	@ 0x22
 80096f8:	f04f 0a00 	mov.w	sl, #0
 80096fc:	9a05      	ldr	r2, [sp, #20]
 80096fe:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009844 <_strtod_l+0x584>
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009706:	2b00      	cmp	r3, #0
 8009708:	f43f ae13 	beq.w	8009332 <_strtod_l+0x72>
 800970c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800970e:	9805      	ldr	r0, [sp, #20]
 8009710:	f7ff f94c 	bl	80089ac <_Bfree>
 8009714:	4649      	mov	r1, r9
 8009716:	9805      	ldr	r0, [sp, #20]
 8009718:	f7ff f948 	bl	80089ac <_Bfree>
 800971c:	4641      	mov	r1, r8
 800971e:	9805      	ldr	r0, [sp, #20]
 8009720:	f7ff f944 	bl	80089ac <_Bfree>
 8009724:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009726:	9805      	ldr	r0, [sp, #20]
 8009728:	f7ff f940 	bl	80089ac <_Bfree>
 800972c:	4621      	mov	r1, r4
 800972e:	9805      	ldr	r0, [sp, #20]
 8009730:	f7ff f93c 	bl	80089ac <_Bfree>
 8009734:	e5fd      	b.n	8009332 <_strtod_l+0x72>
 8009736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009738:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800973c:	4293      	cmp	r3, r2
 800973e:	dbbc      	blt.n	80096ba <_strtod_l+0x3fa>
 8009740:	4c42      	ldr	r4, [pc, #264]	@ (800984c <_strtod_l+0x58c>)
 8009742:	f1c5 050f 	rsb	r5, r5, #15
 8009746:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800974a:	4652      	mov	r2, sl
 800974c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009750:	465b      	mov	r3, fp
 8009752:	f7f6 ff2d 	bl	80005b0 <__aeabi_dmul>
 8009756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009758:	1b5d      	subs	r5, r3, r5
 800975a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800975e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009762:	e791      	b.n	8009688 <_strtod_l+0x3c8>
 8009764:	3316      	adds	r3, #22
 8009766:	dba8      	blt.n	80096ba <_strtod_l+0x3fa>
 8009768:	4b38      	ldr	r3, [pc, #224]	@ (800984c <_strtod_l+0x58c>)
 800976a:	eba9 0808 	sub.w	r8, r9, r8
 800976e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009772:	4650      	mov	r0, sl
 8009774:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009778:	4659      	mov	r1, fp
 800977a:	f7f7 f843 	bl	8000804 <__aeabi_ddiv>
 800977e:	e760      	b.n	8009642 <_strtod_l+0x382>
 8009780:	4b33      	ldr	r3, [pc, #204]	@ (8009850 <_strtod_l+0x590>)
 8009782:	4650      	mov	r0, sl
 8009784:	9308      	str	r3, [sp, #32]
 8009786:	2300      	movs	r3, #0
 8009788:	4659      	mov	r1, fp
 800978a:	461e      	mov	r6, r3
 800978c:	1124      	asrs	r4, r4, #4
 800978e:	2c01      	cmp	r4, #1
 8009790:	dc21      	bgt.n	80097d6 <_strtod_l+0x516>
 8009792:	b10b      	cbz	r3, 8009798 <_strtod_l+0x4d8>
 8009794:	4682      	mov	sl, r0
 8009796:	468b      	mov	fp, r1
 8009798:	492d      	ldr	r1, [pc, #180]	@ (8009850 <_strtod_l+0x590>)
 800979a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800979e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80097a2:	4652      	mov	r2, sl
 80097a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a8:	465b      	mov	r3, fp
 80097aa:	f7f6 ff01 	bl	80005b0 <__aeabi_dmul>
 80097ae:	4b25      	ldr	r3, [pc, #148]	@ (8009844 <_strtod_l+0x584>)
 80097b0:	460a      	mov	r2, r1
 80097b2:	400b      	ands	r3, r1
 80097b4:	4927      	ldr	r1, [pc, #156]	@ (8009854 <_strtod_l+0x594>)
 80097b6:	4682      	mov	sl, r0
 80097b8:	428b      	cmp	r3, r1
 80097ba:	d898      	bhi.n	80096ee <_strtod_l+0x42e>
 80097bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80097c0:	428b      	cmp	r3, r1
 80097c2:	bf86      	itte	hi
 80097c4:	f04f 3aff 	movhi.w	sl, #4294967295
 80097c8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009858 <_strtod_l+0x598>
 80097cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80097d0:	2300      	movs	r3, #0
 80097d2:	9308      	str	r3, [sp, #32]
 80097d4:	e07a      	b.n	80098cc <_strtod_l+0x60c>
 80097d6:	07e2      	lsls	r2, r4, #31
 80097d8:	d505      	bpl.n	80097e6 <_strtod_l+0x526>
 80097da:	9b08      	ldr	r3, [sp, #32]
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	f7f6 fee6 	bl	80005b0 <__aeabi_dmul>
 80097e4:	2301      	movs	r3, #1
 80097e6:	9a08      	ldr	r2, [sp, #32]
 80097e8:	3601      	adds	r6, #1
 80097ea:	3208      	adds	r2, #8
 80097ec:	1064      	asrs	r4, r4, #1
 80097ee:	9208      	str	r2, [sp, #32]
 80097f0:	e7cd      	b.n	800978e <_strtod_l+0x4ce>
 80097f2:	d0ed      	beq.n	80097d0 <_strtod_l+0x510>
 80097f4:	4264      	negs	r4, r4
 80097f6:	f014 020f 	ands.w	r2, r4, #15
 80097fa:	d00a      	beq.n	8009812 <_strtod_l+0x552>
 80097fc:	4b13      	ldr	r3, [pc, #76]	@ (800984c <_strtod_l+0x58c>)
 80097fe:	4650      	mov	r0, sl
 8009800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009804:	4659      	mov	r1, fp
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	f7f6 fffb 	bl	8000804 <__aeabi_ddiv>
 800980e:	4682      	mov	sl, r0
 8009810:	468b      	mov	fp, r1
 8009812:	1124      	asrs	r4, r4, #4
 8009814:	d0dc      	beq.n	80097d0 <_strtod_l+0x510>
 8009816:	2c1f      	cmp	r4, #31
 8009818:	dd20      	ble.n	800985c <_strtod_l+0x59c>
 800981a:	2400      	movs	r4, #0
 800981c:	46a0      	mov	r8, r4
 800981e:	46a1      	mov	r9, r4
 8009820:	940a      	str	r4, [sp, #40]	@ 0x28
 8009822:	2322      	movs	r3, #34	@ 0x22
 8009824:	9a05      	ldr	r2, [sp, #20]
 8009826:	f04f 0a00 	mov.w	sl, #0
 800982a:	f04f 0b00 	mov.w	fp, #0
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	e768      	b.n	8009704 <_strtod_l+0x444>
 8009832:	bf00      	nop
 8009834:	0800c5fb 	.word	0x0800c5fb
 8009838:	0800c80c 	.word	0x0800c80c
 800983c:	0800c5f3 	.word	0x0800c5f3
 8009840:	0800c628 	.word	0x0800c628
 8009844:	7ff00000 	.word	0x7ff00000
 8009848:	0800c9d0 	.word	0x0800c9d0
 800984c:	0800c740 	.word	0x0800c740
 8009850:	0800c718 	.word	0x0800c718
 8009854:	7ca00000 	.word	0x7ca00000
 8009858:	7fefffff 	.word	0x7fefffff
 800985c:	f014 0310 	ands.w	r3, r4, #16
 8009860:	bf18      	it	ne
 8009862:	236a      	movne	r3, #106	@ 0x6a
 8009864:	4650      	mov	r0, sl
 8009866:	9308      	str	r3, [sp, #32]
 8009868:	4659      	mov	r1, fp
 800986a:	2300      	movs	r3, #0
 800986c:	4ea9      	ldr	r6, [pc, #676]	@ (8009b14 <_strtod_l+0x854>)
 800986e:	07e2      	lsls	r2, r4, #31
 8009870:	d504      	bpl.n	800987c <_strtod_l+0x5bc>
 8009872:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009876:	f7f6 fe9b 	bl	80005b0 <__aeabi_dmul>
 800987a:	2301      	movs	r3, #1
 800987c:	1064      	asrs	r4, r4, #1
 800987e:	f106 0608 	add.w	r6, r6, #8
 8009882:	d1f4      	bne.n	800986e <_strtod_l+0x5ae>
 8009884:	b10b      	cbz	r3, 800988a <_strtod_l+0x5ca>
 8009886:	4682      	mov	sl, r0
 8009888:	468b      	mov	fp, r1
 800988a:	9b08      	ldr	r3, [sp, #32]
 800988c:	b1b3      	cbz	r3, 80098bc <_strtod_l+0x5fc>
 800988e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009892:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009896:	2b00      	cmp	r3, #0
 8009898:	4659      	mov	r1, fp
 800989a:	dd0f      	ble.n	80098bc <_strtod_l+0x5fc>
 800989c:	2b1f      	cmp	r3, #31
 800989e:	dd57      	ble.n	8009950 <_strtod_l+0x690>
 80098a0:	2b34      	cmp	r3, #52	@ 0x34
 80098a2:	bfd8      	it	le
 80098a4:	f04f 33ff 	movle.w	r3, #4294967295
 80098a8:	f04f 0a00 	mov.w	sl, #0
 80098ac:	bfcf      	iteee	gt
 80098ae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80098b2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80098b6:	4093      	lslle	r3, r2
 80098b8:	ea03 0b01 	andle.w	fp, r3, r1
 80098bc:	2200      	movs	r2, #0
 80098be:	2300      	movs	r3, #0
 80098c0:	4650      	mov	r0, sl
 80098c2:	4659      	mov	r1, fp
 80098c4:	f7f7 f8dc 	bl	8000a80 <__aeabi_dcmpeq>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d1a6      	bne.n	800981a <_strtod_l+0x55a>
 80098cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ce:	463a      	mov	r2, r7
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80098d4:	462b      	mov	r3, r5
 80098d6:	9805      	ldr	r0, [sp, #20]
 80098d8:	f7ff f8d0 	bl	8008a7c <__s2b>
 80098dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80098de:	2800      	cmp	r0, #0
 80098e0:	f43f af05 	beq.w	80096ee <_strtod_l+0x42e>
 80098e4:	2400      	movs	r4, #0
 80098e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098e8:	eba9 0308 	sub.w	r3, r9, r8
 80098ec:	2a00      	cmp	r2, #0
 80098ee:	bfa8      	it	ge
 80098f0:	2300      	movge	r3, #0
 80098f2:	46a0      	mov	r8, r4
 80098f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80098f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80098fa:	9316      	str	r3, [sp, #88]	@ 0x58
 80098fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098fe:	9805      	ldr	r0, [sp, #20]
 8009900:	6859      	ldr	r1, [r3, #4]
 8009902:	f7ff f813 	bl	800892c <_Balloc>
 8009906:	4681      	mov	r9, r0
 8009908:	2800      	cmp	r0, #0
 800990a:	f43f aef4 	beq.w	80096f6 <_strtod_l+0x436>
 800990e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009910:	300c      	adds	r0, #12
 8009912:	691a      	ldr	r2, [r3, #16]
 8009914:	f103 010c 	add.w	r1, r3, #12
 8009918:	3202      	adds	r2, #2
 800991a:	0092      	lsls	r2, r2, #2
 800991c:	f001 f8dc 	bl	800aad8 <memcpy>
 8009920:	ab1c      	add	r3, sp, #112	@ 0x70
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	4652      	mov	r2, sl
 800992a:	465b      	mov	r3, fp
 800992c:	9805      	ldr	r0, [sp, #20]
 800992e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009932:	f7ff fbd5 	bl	80090e0 <__d2b>
 8009936:	901a      	str	r0, [sp, #104]	@ 0x68
 8009938:	2800      	cmp	r0, #0
 800993a:	f43f aedc 	beq.w	80096f6 <_strtod_l+0x436>
 800993e:	2101      	movs	r1, #1
 8009940:	9805      	ldr	r0, [sp, #20]
 8009942:	f7ff f931 	bl	8008ba8 <__i2b>
 8009946:	4680      	mov	r8, r0
 8009948:	b948      	cbnz	r0, 800995e <_strtod_l+0x69e>
 800994a:	f04f 0800 	mov.w	r8, #0
 800994e:	e6d2      	b.n	80096f6 <_strtod_l+0x436>
 8009950:	f04f 32ff 	mov.w	r2, #4294967295
 8009954:	fa02 f303 	lsl.w	r3, r2, r3
 8009958:	ea03 0a0a 	and.w	sl, r3, sl
 800995c:	e7ae      	b.n	80098bc <_strtod_l+0x5fc>
 800995e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009960:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009962:	2d00      	cmp	r5, #0
 8009964:	bfab      	itete	ge
 8009966:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009968:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800996a:	18ef      	addge	r7, r5, r3
 800996c:	1b5e      	sublt	r6, r3, r5
 800996e:	9b08      	ldr	r3, [sp, #32]
 8009970:	bfa8      	it	ge
 8009972:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009974:	eba5 0503 	sub.w	r5, r5, r3
 8009978:	4415      	add	r5, r2
 800997a:	4b67      	ldr	r3, [pc, #412]	@ (8009b18 <_strtod_l+0x858>)
 800997c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009980:	bfb8      	it	lt
 8009982:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009984:	429d      	cmp	r5, r3
 8009986:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800998a:	da50      	bge.n	8009a2e <_strtod_l+0x76e>
 800998c:	1b5b      	subs	r3, r3, r5
 800998e:	2b1f      	cmp	r3, #31
 8009990:	f04f 0101 	mov.w	r1, #1
 8009994:	eba2 0203 	sub.w	r2, r2, r3
 8009998:	dc3d      	bgt.n	8009a16 <_strtod_l+0x756>
 800999a:	fa01 f303 	lsl.w	r3, r1, r3
 800999e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099a0:	2300      	movs	r3, #0
 80099a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80099a4:	18bd      	adds	r5, r7, r2
 80099a6:	9b08      	ldr	r3, [sp, #32]
 80099a8:	42af      	cmp	r7, r5
 80099aa:	4416      	add	r6, r2
 80099ac:	441e      	add	r6, r3
 80099ae:	463b      	mov	r3, r7
 80099b0:	bfa8      	it	ge
 80099b2:	462b      	movge	r3, r5
 80099b4:	42b3      	cmp	r3, r6
 80099b6:	bfa8      	it	ge
 80099b8:	4633      	movge	r3, r6
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bfc2      	ittt	gt
 80099be:	1aed      	subgt	r5, r5, r3
 80099c0:	1af6      	subgt	r6, r6, r3
 80099c2:	1aff      	subgt	r7, r7, r3
 80099c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	dd16      	ble.n	80099f8 <_strtod_l+0x738>
 80099ca:	4641      	mov	r1, r8
 80099cc:	461a      	mov	r2, r3
 80099ce:	9805      	ldr	r0, [sp, #20]
 80099d0:	f7ff f9a8 	bl	8008d24 <__pow5mult>
 80099d4:	4680      	mov	r8, r0
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d0b7      	beq.n	800994a <_strtod_l+0x68a>
 80099da:	4601      	mov	r1, r0
 80099dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80099de:	9805      	ldr	r0, [sp, #20]
 80099e0:	f7ff f8f8 	bl	8008bd4 <__multiply>
 80099e4:	900e      	str	r0, [sp, #56]	@ 0x38
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f43f ae85 	beq.w	80096f6 <_strtod_l+0x436>
 80099ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099ee:	9805      	ldr	r0, [sp, #20]
 80099f0:	f7fe ffdc 	bl	80089ac <_Bfree>
 80099f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80099f8:	2d00      	cmp	r5, #0
 80099fa:	dc1d      	bgt.n	8009a38 <_strtod_l+0x778>
 80099fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	dd23      	ble.n	8009a4a <_strtod_l+0x78a>
 8009a02:	4649      	mov	r1, r9
 8009a04:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009a06:	9805      	ldr	r0, [sp, #20]
 8009a08:	f7ff f98c 	bl	8008d24 <__pow5mult>
 8009a0c:	4681      	mov	r9, r0
 8009a0e:	b9e0      	cbnz	r0, 8009a4a <_strtod_l+0x78a>
 8009a10:	f04f 0900 	mov.w	r9, #0
 8009a14:	e66f      	b.n	80096f6 <_strtod_l+0x436>
 8009a16:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009a1a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009a1e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009a22:	35e2      	adds	r5, #226	@ 0xe2
 8009a24:	fa01 f305 	lsl.w	r3, r1, r5
 8009a28:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a2a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009a2c:	e7ba      	b.n	80099a4 <_strtod_l+0x6e4>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a32:	2301      	movs	r3, #1
 8009a34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a36:	e7b5      	b.n	80099a4 <_strtod_l+0x6e4>
 8009a38:	462a      	mov	r2, r5
 8009a3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a3c:	9805      	ldr	r0, [sp, #20]
 8009a3e:	f7ff f9cb 	bl	8008dd8 <__lshift>
 8009a42:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d1d9      	bne.n	80099fc <_strtod_l+0x73c>
 8009a48:	e655      	b.n	80096f6 <_strtod_l+0x436>
 8009a4a:	2e00      	cmp	r6, #0
 8009a4c:	dd07      	ble.n	8009a5e <_strtod_l+0x79e>
 8009a4e:	4649      	mov	r1, r9
 8009a50:	4632      	mov	r2, r6
 8009a52:	9805      	ldr	r0, [sp, #20]
 8009a54:	f7ff f9c0 	bl	8008dd8 <__lshift>
 8009a58:	4681      	mov	r9, r0
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d0d8      	beq.n	8009a10 <_strtod_l+0x750>
 8009a5e:	2f00      	cmp	r7, #0
 8009a60:	dd08      	ble.n	8009a74 <_strtod_l+0x7b4>
 8009a62:	4641      	mov	r1, r8
 8009a64:	463a      	mov	r2, r7
 8009a66:	9805      	ldr	r0, [sp, #20]
 8009a68:	f7ff f9b6 	bl	8008dd8 <__lshift>
 8009a6c:	4680      	mov	r8, r0
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f43f ae41 	beq.w	80096f6 <_strtod_l+0x436>
 8009a74:	464a      	mov	r2, r9
 8009a76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a78:	9805      	ldr	r0, [sp, #20]
 8009a7a:	f7ff fa35 	bl	8008ee8 <__mdiff>
 8009a7e:	4604      	mov	r4, r0
 8009a80:	2800      	cmp	r0, #0
 8009a82:	f43f ae38 	beq.w	80096f6 <_strtod_l+0x436>
 8009a86:	68c3      	ldr	r3, [r0, #12]
 8009a88:	4641      	mov	r1, r8
 8009a8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60c3      	str	r3, [r0, #12]
 8009a90:	f7ff fa0e 	bl	8008eb0 <__mcmp>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	da45      	bge.n	8009b24 <_strtod_l+0x864>
 8009a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a9a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a9e:	d16b      	bne.n	8009b78 <_strtod_l+0x8b8>
 8009aa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d167      	bne.n	8009b78 <_strtod_l+0x8b8>
 8009aa8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009aac:	0d1b      	lsrs	r3, r3, #20
 8009aae:	051b      	lsls	r3, r3, #20
 8009ab0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ab4:	d960      	bls.n	8009b78 <_strtod_l+0x8b8>
 8009ab6:	6963      	ldr	r3, [r4, #20]
 8009ab8:	b913      	cbnz	r3, 8009ac0 <_strtod_l+0x800>
 8009aba:	6923      	ldr	r3, [r4, #16]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	dd5b      	ble.n	8009b78 <_strtod_l+0x8b8>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	9805      	ldr	r0, [sp, #20]
 8009ac6:	f7ff f987 	bl	8008dd8 <__lshift>
 8009aca:	4641      	mov	r1, r8
 8009acc:	4604      	mov	r4, r0
 8009ace:	f7ff f9ef 	bl	8008eb0 <__mcmp>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	dd50      	ble.n	8009b78 <_strtod_l+0x8b8>
 8009ad6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ada:	9a08      	ldr	r2, [sp, #32]
 8009adc:	0d1b      	lsrs	r3, r3, #20
 8009ade:	051b      	lsls	r3, r3, #20
 8009ae0:	2a00      	cmp	r2, #0
 8009ae2:	d06a      	beq.n	8009bba <_strtod_l+0x8fa>
 8009ae4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ae8:	d867      	bhi.n	8009bba <_strtod_l+0x8fa>
 8009aea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009aee:	f67f ae98 	bls.w	8009822 <_strtod_l+0x562>
 8009af2:	4650      	mov	r0, sl
 8009af4:	4659      	mov	r1, fp
 8009af6:	4b09      	ldr	r3, [pc, #36]	@ (8009b1c <_strtod_l+0x85c>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	f7f6 fd59 	bl	80005b0 <__aeabi_dmul>
 8009afe:	4b08      	ldr	r3, [pc, #32]	@ (8009b20 <_strtod_l+0x860>)
 8009b00:	4682      	mov	sl, r0
 8009b02:	400b      	ands	r3, r1
 8009b04:	468b      	mov	fp, r1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f47f ae00 	bne.w	800970c <_strtod_l+0x44c>
 8009b0c:	2322      	movs	r3, #34	@ 0x22
 8009b0e:	9a05      	ldr	r2, [sp, #20]
 8009b10:	6013      	str	r3, [r2, #0]
 8009b12:	e5fb      	b.n	800970c <_strtod_l+0x44c>
 8009b14:	0800c838 	.word	0x0800c838
 8009b18:	fffffc02 	.word	0xfffffc02
 8009b1c:	39500000 	.word	0x39500000
 8009b20:	7ff00000 	.word	0x7ff00000
 8009b24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b28:	d165      	bne.n	8009bf6 <_strtod_l+0x936>
 8009b2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009b2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b30:	b35a      	cbz	r2, 8009b8a <_strtod_l+0x8ca>
 8009b32:	4a99      	ldr	r2, [pc, #612]	@ (8009d98 <_strtod_l+0xad8>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d12b      	bne.n	8009b90 <_strtod_l+0x8d0>
 8009b38:	9b08      	ldr	r3, [sp, #32]
 8009b3a:	4651      	mov	r1, sl
 8009b3c:	b303      	cbz	r3, 8009b80 <_strtod_l+0x8c0>
 8009b3e:	465a      	mov	r2, fp
 8009b40:	4b96      	ldr	r3, [pc, #600]	@ (8009d9c <_strtod_l+0xadc>)
 8009b42:	4013      	ands	r3, r2
 8009b44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009b48:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4c:	d81b      	bhi.n	8009b86 <_strtod_l+0x8c6>
 8009b4e:	0d1b      	lsrs	r3, r3, #20
 8009b50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009b54:	fa02 f303 	lsl.w	r3, r2, r3
 8009b58:	4299      	cmp	r1, r3
 8009b5a:	d119      	bne.n	8009b90 <_strtod_l+0x8d0>
 8009b5c:	4b90      	ldr	r3, [pc, #576]	@ (8009da0 <_strtod_l+0xae0>)
 8009b5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d102      	bne.n	8009b6a <_strtod_l+0x8aa>
 8009b64:	3101      	adds	r1, #1
 8009b66:	f43f adc6 	beq.w	80096f6 <_strtod_l+0x436>
 8009b6a:	f04f 0a00 	mov.w	sl, #0
 8009b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8009d9c <_strtod_l+0xadc>)
 8009b70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b72:	401a      	ands	r2, r3
 8009b74:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009b78:	9b08      	ldr	r3, [sp, #32]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1b9      	bne.n	8009af2 <_strtod_l+0x832>
 8009b7e:	e5c5      	b.n	800970c <_strtod_l+0x44c>
 8009b80:	f04f 33ff 	mov.w	r3, #4294967295
 8009b84:	e7e8      	b.n	8009b58 <_strtod_l+0x898>
 8009b86:	4613      	mov	r3, r2
 8009b88:	e7e6      	b.n	8009b58 <_strtod_l+0x898>
 8009b8a:	ea53 030a 	orrs.w	r3, r3, sl
 8009b8e:	d0a2      	beq.n	8009ad6 <_strtod_l+0x816>
 8009b90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b92:	b1db      	cbz	r3, 8009bcc <_strtod_l+0x90c>
 8009b94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b96:	4213      	tst	r3, r2
 8009b98:	d0ee      	beq.n	8009b78 <_strtod_l+0x8b8>
 8009b9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b9c:	4650      	mov	r0, sl
 8009b9e:	4659      	mov	r1, fp
 8009ba0:	9a08      	ldr	r2, [sp, #32]
 8009ba2:	b1bb      	cbz	r3, 8009bd4 <_strtod_l+0x914>
 8009ba4:	f7ff fb68 	bl	8009278 <sulp>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bb0:	f7f6 fb48 	bl	8000244 <__adddf3>
 8009bb4:	4682      	mov	sl, r0
 8009bb6:	468b      	mov	fp, r1
 8009bb8:	e7de      	b.n	8009b78 <_strtod_l+0x8b8>
 8009bba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009bbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009bc2:	f04f 3aff 	mov.w	sl, #4294967295
 8009bc6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009bca:	e7d5      	b.n	8009b78 <_strtod_l+0x8b8>
 8009bcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009bce:	ea13 0f0a 	tst.w	r3, sl
 8009bd2:	e7e1      	b.n	8009b98 <_strtod_l+0x8d8>
 8009bd4:	f7ff fb50 	bl	8009278 <sulp>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009be0:	f7f6 fb2e 	bl	8000240 <__aeabi_dsub>
 8009be4:	2200      	movs	r2, #0
 8009be6:	2300      	movs	r3, #0
 8009be8:	4682      	mov	sl, r0
 8009bea:	468b      	mov	fp, r1
 8009bec:	f7f6 ff48 	bl	8000a80 <__aeabi_dcmpeq>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d0c1      	beq.n	8009b78 <_strtod_l+0x8b8>
 8009bf4:	e615      	b.n	8009822 <_strtod_l+0x562>
 8009bf6:	4641      	mov	r1, r8
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7ff fac9 	bl	8009190 <__ratio>
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009c04:	4606      	mov	r6, r0
 8009c06:	460f      	mov	r7, r1
 8009c08:	f7f6 ff4e 	bl	8000aa8 <__aeabi_dcmple>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d06d      	beq.n	8009cec <_strtod_l+0xa2c>
 8009c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d178      	bne.n	8009d08 <_strtod_l+0xa48>
 8009c16:	f1ba 0f00 	cmp.w	sl, #0
 8009c1a:	d156      	bne.n	8009cca <_strtod_l+0xa0a>
 8009c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d158      	bne.n	8009cd8 <_strtod_l+0xa18>
 8009c26:	2200      	movs	r2, #0
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	4b5d      	ldr	r3, [pc, #372]	@ (8009da4 <_strtod_l+0xae4>)
 8009c2e:	f7f6 ff31 	bl	8000a94 <__aeabi_dcmplt>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d157      	bne.n	8009ce6 <_strtod_l+0xa26>
 8009c36:	4630      	mov	r0, r6
 8009c38:	4639      	mov	r1, r7
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	4b5a      	ldr	r3, [pc, #360]	@ (8009da8 <_strtod_l+0xae8>)
 8009c3e:	f7f6 fcb7 	bl	80005b0 <__aeabi_dmul>
 8009c42:	4606      	mov	r6, r0
 8009c44:	460f      	mov	r7, r1
 8009c46:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009c4a:	9606      	str	r6, [sp, #24]
 8009c4c:	9307      	str	r3, [sp, #28]
 8009c4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c52:	4d52      	ldr	r5, [pc, #328]	@ (8009d9c <_strtod_l+0xadc>)
 8009c54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c5a:	401d      	ands	r5, r3
 8009c5c:	4b53      	ldr	r3, [pc, #332]	@ (8009dac <_strtod_l+0xaec>)
 8009c5e:	429d      	cmp	r5, r3
 8009c60:	f040 80aa 	bne.w	8009db8 <_strtod_l+0xaf8>
 8009c64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c66:	4650      	mov	r0, sl
 8009c68:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009c6c:	4659      	mov	r1, fp
 8009c6e:	f7ff f9cf 	bl	8009010 <__ulp>
 8009c72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c76:	f7f6 fc9b 	bl	80005b0 <__aeabi_dmul>
 8009c7a:	4652      	mov	r2, sl
 8009c7c:	465b      	mov	r3, fp
 8009c7e:	f7f6 fae1 	bl	8000244 <__adddf3>
 8009c82:	460b      	mov	r3, r1
 8009c84:	4945      	ldr	r1, [pc, #276]	@ (8009d9c <_strtod_l+0xadc>)
 8009c86:	4a4a      	ldr	r2, [pc, #296]	@ (8009db0 <_strtod_l+0xaf0>)
 8009c88:	4019      	ands	r1, r3
 8009c8a:	4291      	cmp	r1, r2
 8009c8c:	4682      	mov	sl, r0
 8009c8e:	d942      	bls.n	8009d16 <_strtod_l+0xa56>
 8009c90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c92:	4b43      	ldr	r3, [pc, #268]	@ (8009da0 <_strtod_l+0xae0>)
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d103      	bne.n	8009ca0 <_strtod_l+0x9e0>
 8009c98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	f43f ad2b 	beq.w	80096f6 <_strtod_l+0x436>
 8009ca0:	f04f 3aff 	mov.w	sl, #4294967295
 8009ca4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009da0 <_strtod_l+0xae0>
 8009ca8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009caa:	9805      	ldr	r0, [sp, #20]
 8009cac:	f7fe fe7e 	bl	80089ac <_Bfree>
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	9805      	ldr	r0, [sp, #20]
 8009cb4:	f7fe fe7a 	bl	80089ac <_Bfree>
 8009cb8:	4641      	mov	r1, r8
 8009cba:	9805      	ldr	r0, [sp, #20]
 8009cbc:	f7fe fe76 	bl	80089ac <_Bfree>
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	9805      	ldr	r0, [sp, #20]
 8009cc4:	f7fe fe72 	bl	80089ac <_Bfree>
 8009cc8:	e618      	b.n	80098fc <_strtod_l+0x63c>
 8009cca:	f1ba 0f01 	cmp.w	sl, #1
 8009cce:	d103      	bne.n	8009cd8 <_strtod_l+0xa18>
 8009cd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f43f ada5 	beq.w	8009822 <_strtod_l+0x562>
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4b36      	ldr	r3, [pc, #216]	@ (8009db4 <_strtod_l+0xaf4>)
 8009cdc:	2600      	movs	r6, #0
 8009cde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ce2:	4f30      	ldr	r7, [pc, #192]	@ (8009da4 <_strtod_l+0xae4>)
 8009ce4:	e7b3      	b.n	8009c4e <_strtod_l+0x98e>
 8009ce6:	2600      	movs	r6, #0
 8009ce8:	4f2f      	ldr	r7, [pc, #188]	@ (8009da8 <_strtod_l+0xae8>)
 8009cea:	e7ac      	b.n	8009c46 <_strtod_l+0x986>
 8009cec:	4630      	mov	r0, r6
 8009cee:	4639      	mov	r1, r7
 8009cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8009da8 <_strtod_l+0xae8>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f7f6 fc5c 	bl	80005b0 <__aeabi_dmul>
 8009cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	460f      	mov	r7, r1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0a1      	beq.n	8009c46 <_strtod_l+0x986>
 8009d02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009d06:	e7a2      	b.n	8009c4e <_strtod_l+0x98e>
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4b26      	ldr	r3, [pc, #152]	@ (8009da4 <_strtod_l+0xae4>)
 8009d0c:	4616      	mov	r6, r2
 8009d0e:	461f      	mov	r7, r3
 8009d10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d14:	e79b      	b.n	8009c4e <_strtod_l+0x98e>
 8009d16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009d1a:	9b08      	ldr	r3, [sp, #32]
 8009d1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1c1      	bne.n	8009ca8 <_strtod_l+0x9e8>
 8009d24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d28:	0d1b      	lsrs	r3, r3, #20
 8009d2a:	051b      	lsls	r3, r3, #20
 8009d2c:	429d      	cmp	r5, r3
 8009d2e:	d1bb      	bne.n	8009ca8 <_strtod_l+0x9e8>
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	f7f7 fab4 	bl	80012a0 <__aeabi_d2lz>
 8009d38:	f7f6 fc0c 	bl	8000554 <__aeabi_l2d>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4630      	mov	r0, r6
 8009d42:	4639      	mov	r1, r7
 8009d44:	f7f6 fa7c 	bl	8000240 <__aeabi_dsub>
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009d50:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d56:	ea46 060a 	orr.w	r6, r6, sl
 8009d5a:	431e      	orrs	r6, r3
 8009d5c:	d069      	beq.n	8009e32 <_strtod_l+0xb72>
 8009d5e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009d88 <_strtod_l+0xac8>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f7f6 fe96 	bl	8000a94 <__aeabi_dcmplt>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f47f accf 	bne.w	800970c <_strtod_l+0x44c>
 8009d6e:	a308      	add	r3, pc, #32	@ (adr r3, 8009d90 <_strtod_l+0xad0>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d78:	f7f6 feaa 	bl	8000ad0 <__aeabi_dcmpgt>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d093      	beq.n	8009ca8 <_strtod_l+0x9e8>
 8009d80:	e4c4      	b.n	800970c <_strtod_l+0x44c>
 8009d82:	bf00      	nop
 8009d84:	f3af 8000 	nop.w
 8009d88:	94a03595 	.word	0x94a03595
 8009d8c:	3fdfffff 	.word	0x3fdfffff
 8009d90:	35afe535 	.word	0x35afe535
 8009d94:	3fe00000 	.word	0x3fe00000
 8009d98:	000fffff 	.word	0x000fffff
 8009d9c:	7ff00000 	.word	0x7ff00000
 8009da0:	7fefffff 	.word	0x7fefffff
 8009da4:	3ff00000 	.word	0x3ff00000
 8009da8:	3fe00000 	.word	0x3fe00000
 8009dac:	7fe00000 	.word	0x7fe00000
 8009db0:	7c9fffff 	.word	0x7c9fffff
 8009db4:	bff00000 	.word	0xbff00000
 8009db8:	9b08      	ldr	r3, [sp, #32]
 8009dba:	b323      	cbz	r3, 8009e06 <_strtod_l+0xb46>
 8009dbc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009dc0:	d821      	bhi.n	8009e06 <_strtod_l+0xb46>
 8009dc2:	a327      	add	r3, pc, #156	@ (adr r3, 8009e60 <_strtod_l+0xba0>)
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	f7f6 fe6c 	bl	8000aa8 <__aeabi_dcmple>
 8009dd0:	b1a0      	cbz	r0, 8009dfc <_strtod_l+0xb3c>
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f7f6 fec3 	bl	8000b60 <__aeabi_d2uiz>
 8009dda:	2801      	cmp	r0, #1
 8009ddc:	bf38      	it	cc
 8009dde:	2001      	movcc	r0, #1
 8009de0:	f7f6 fb6c 	bl	80004bc <__aeabi_ui2d>
 8009de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009de6:	4606      	mov	r6, r0
 8009de8:	460f      	mov	r7, r1
 8009dea:	b9fb      	cbnz	r3, 8009e2c <_strtod_l+0xb6c>
 8009dec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009df0:	9014      	str	r0, [sp, #80]	@ 0x50
 8009df2:	9315      	str	r3, [sp, #84]	@ 0x54
 8009df4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009df8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009dfc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009dfe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009e02:	1b5b      	subs	r3, r3, r5
 8009e04:	9311      	str	r3, [sp, #68]	@ 0x44
 8009e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e0a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009e0e:	f7ff f8ff 	bl	8009010 <__ulp>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4650      	mov	r0, sl
 8009e18:	4659      	mov	r1, fp
 8009e1a:	f7f6 fbc9 	bl	80005b0 <__aeabi_dmul>
 8009e1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e22:	f7f6 fa0f 	bl	8000244 <__adddf3>
 8009e26:	4682      	mov	sl, r0
 8009e28:	468b      	mov	fp, r1
 8009e2a:	e776      	b.n	8009d1a <_strtod_l+0xa5a>
 8009e2c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009e30:	e7e0      	b.n	8009df4 <_strtod_l+0xb34>
 8009e32:	a30d      	add	r3, pc, #52	@ (adr r3, 8009e68 <_strtod_l+0xba8>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f7f6 fe2c 	bl	8000a94 <__aeabi_dcmplt>
 8009e3c:	e79e      	b.n	8009d7c <_strtod_l+0xabc>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e44:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	f7ff ba77 	b.w	800933a <_strtod_l+0x7a>
 8009e4c:	2a65      	cmp	r2, #101	@ 0x65
 8009e4e:	f43f ab6e 	beq.w	800952e <_strtod_l+0x26e>
 8009e52:	2a45      	cmp	r2, #69	@ 0x45
 8009e54:	f43f ab6b 	beq.w	800952e <_strtod_l+0x26e>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f7ff bba6 	b.w	80095aa <_strtod_l+0x2ea>
 8009e5e:	bf00      	nop
 8009e60:	ffc00000 	.word	0xffc00000
 8009e64:	41dfffff 	.word	0x41dfffff
 8009e68:	94a03595 	.word	0x94a03595
 8009e6c:	3fcfffff 	.word	0x3fcfffff

08009e70 <_strtod_r>:
 8009e70:	4b01      	ldr	r3, [pc, #4]	@ (8009e78 <_strtod_r+0x8>)
 8009e72:	f7ff ba25 	b.w	80092c0 <_strtod_l>
 8009e76:	bf00      	nop
 8009e78:	20000070 	.word	0x20000070

08009e7c <_strtol_l.constprop.0>:
 8009e7c:	2b24      	cmp	r3, #36	@ 0x24
 8009e7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e82:	4686      	mov	lr, r0
 8009e84:	4690      	mov	r8, r2
 8009e86:	d801      	bhi.n	8009e8c <_strtol_l.constprop.0+0x10>
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d106      	bne.n	8009e9a <_strtol_l.constprop.0+0x1e>
 8009e8c:	f7fd fdc0 	bl	8007a10 <__errno>
 8009e90:	2316      	movs	r3, #22
 8009e92:	6003      	str	r3, [r0, #0]
 8009e94:	2000      	movs	r0, #0
 8009e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	4833      	ldr	r0, [pc, #204]	@ (8009f6c <_strtol_l.constprop.0+0xf0>)
 8009e9e:	462a      	mov	r2, r5
 8009ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ea4:	5d06      	ldrb	r6, [r0, r4]
 8009ea6:	f016 0608 	ands.w	r6, r6, #8
 8009eaa:	d1f8      	bne.n	8009e9e <_strtol_l.constprop.0+0x22>
 8009eac:	2c2d      	cmp	r4, #45	@ 0x2d
 8009eae:	d12d      	bne.n	8009f0c <_strtol_l.constprop.0+0x90>
 8009eb0:	2601      	movs	r6, #1
 8009eb2:	782c      	ldrb	r4, [r5, #0]
 8009eb4:	1c95      	adds	r5, r2, #2
 8009eb6:	f033 0210 	bics.w	r2, r3, #16
 8009eba:	d109      	bne.n	8009ed0 <_strtol_l.constprop.0+0x54>
 8009ebc:	2c30      	cmp	r4, #48	@ 0x30
 8009ebe:	d12a      	bne.n	8009f16 <_strtol_l.constprop.0+0x9a>
 8009ec0:	782a      	ldrb	r2, [r5, #0]
 8009ec2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ec6:	2a58      	cmp	r2, #88	@ 0x58
 8009ec8:	d125      	bne.n	8009f16 <_strtol_l.constprop.0+0x9a>
 8009eca:	2310      	movs	r3, #16
 8009ecc:	786c      	ldrb	r4, [r5, #1]
 8009ece:	3502      	adds	r5, #2
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009ed6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009eda:	fbbc f9f3 	udiv	r9, ip, r3
 8009ede:	4610      	mov	r0, r2
 8009ee0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009ee4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ee8:	2f09      	cmp	r7, #9
 8009eea:	d81b      	bhi.n	8009f24 <_strtol_l.constprop.0+0xa8>
 8009eec:	463c      	mov	r4, r7
 8009eee:	42a3      	cmp	r3, r4
 8009ef0:	dd27      	ble.n	8009f42 <_strtol_l.constprop.0+0xc6>
 8009ef2:	1c57      	adds	r7, r2, #1
 8009ef4:	d007      	beq.n	8009f06 <_strtol_l.constprop.0+0x8a>
 8009ef6:	4581      	cmp	r9, r0
 8009ef8:	d320      	bcc.n	8009f3c <_strtol_l.constprop.0+0xc0>
 8009efa:	d101      	bne.n	8009f00 <_strtol_l.constprop.0+0x84>
 8009efc:	45a2      	cmp	sl, r4
 8009efe:	db1d      	blt.n	8009f3c <_strtol_l.constprop.0+0xc0>
 8009f00:	2201      	movs	r2, #1
 8009f02:	fb00 4003 	mla	r0, r0, r3, r4
 8009f06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f0a:	e7eb      	b.n	8009ee4 <_strtol_l.constprop.0+0x68>
 8009f0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009f0e:	bf04      	itt	eq
 8009f10:	782c      	ldrbeq	r4, [r5, #0]
 8009f12:	1c95      	addeq	r5, r2, #2
 8009f14:	e7cf      	b.n	8009eb6 <_strtol_l.constprop.0+0x3a>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1da      	bne.n	8009ed0 <_strtol_l.constprop.0+0x54>
 8009f1a:	2c30      	cmp	r4, #48	@ 0x30
 8009f1c:	bf0c      	ite	eq
 8009f1e:	2308      	moveq	r3, #8
 8009f20:	230a      	movne	r3, #10
 8009f22:	e7d5      	b.n	8009ed0 <_strtol_l.constprop.0+0x54>
 8009f24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009f28:	2f19      	cmp	r7, #25
 8009f2a:	d801      	bhi.n	8009f30 <_strtol_l.constprop.0+0xb4>
 8009f2c:	3c37      	subs	r4, #55	@ 0x37
 8009f2e:	e7de      	b.n	8009eee <_strtol_l.constprop.0+0x72>
 8009f30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009f34:	2f19      	cmp	r7, #25
 8009f36:	d804      	bhi.n	8009f42 <_strtol_l.constprop.0+0xc6>
 8009f38:	3c57      	subs	r4, #87	@ 0x57
 8009f3a:	e7d8      	b.n	8009eee <_strtol_l.constprop.0+0x72>
 8009f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f40:	e7e1      	b.n	8009f06 <_strtol_l.constprop.0+0x8a>
 8009f42:	1c53      	adds	r3, r2, #1
 8009f44:	d108      	bne.n	8009f58 <_strtol_l.constprop.0+0xdc>
 8009f46:	2322      	movs	r3, #34	@ 0x22
 8009f48:	4660      	mov	r0, ip
 8009f4a:	f8ce 3000 	str.w	r3, [lr]
 8009f4e:	f1b8 0f00 	cmp.w	r8, #0
 8009f52:	d0a0      	beq.n	8009e96 <_strtol_l.constprop.0+0x1a>
 8009f54:	1e69      	subs	r1, r5, #1
 8009f56:	e006      	b.n	8009f66 <_strtol_l.constprop.0+0xea>
 8009f58:	b106      	cbz	r6, 8009f5c <_strtol_l.constprop.0+0xe0>
 8009f5a:	4240      	negs	r0, r0
 8009f5c:	f1b8 0f00 	cmp.w	r8, #0
 8009f60:	d099      	beq.n	8009e96 <_strtol_l.constprop.0+0x1a>
 8009f62:	2a00      	cmp	r2, #0
 8009f64:	d1f6      	bne.n	8009f54 <_strtol_l.constprop.0+0xd8>
 8009f66:	f8c8 1000 	str.w	r1, [r8]
 8009f6a:	e794      	b.n	8009e96 <_strtol_l.constprop.0+0x1a>
 8009f6c:	0800c861 	.word	0x0800c861

08009f70 <_strtol_r>:
 8009f70:	f7ff bf84 	b.w	8009e7c <_strtol_l.constprop.0>

08009f74 <__ssputs_r>:
 8009f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	461f      	mov	r7, r3
 8009f7a:	688e      	ldr	r6, [r1, #8]
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	42be      	cmp	r6, r7
 8009f80:	460c      	mov	r4, r1
 8009f82:	4690      	mov	r8, r2
 8009f84:	680b      	ldr	r3, [r1, #0]
 8009f86:	d82d      	bhi.n	8009fe4 <__ssputs_r+0x70>
 8009f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f90:	d026      	beq.n	8009fe0 <__ssputs_r+0x6c>
 8009f92:	6965      	ldr	r5, [r4, #20]
 8009f94:	6909      	ldr	r1, [r1, #16]
 8009f96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f9a:	eba3 0901 	sub.w	r9, r3, r1
 8009f9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fa2:	1c7b      	adds	r3, r7, #1
 8009fa4:	444b      	add	r3, r9
 8009fa6:	106d      	asrs	r5, r5, #1
 8009fa8:	429d      	cmp	r5, r3
 8009faa:	bf38      	it	cc
 8009fac:	461d      	movcc	r5, r3
 8009fae:	0553      	lsls	r3, r2, #21
 8009fb0:	d527      	bpl.n	800a002 <__ssputs_r+0x8e>
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	f7fe fc2e 	bl	8008814 <_malloc_r>
 8009fb8:	4606      	mov	r6, r0
 8009fba:	b360      	cbz	r0, 800a016 <__ssputs_r+0xa2>
 8009fbc:	464a      	mov	r2, r9
 8009fbe:	6921      	ldr	r1, [r4, #16]
 8009fc0:	f000 fd8a 	bl	800aad8 <memcpy>
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	6126      	str	r6, [r4, #16]
 8009fd2:	444e      	add	r6, r9
 8009fd4:	6026      	str	r6, [r4, #0]
 8009fd6:	463e      	mov	r6, r7
 8009fd8:	6165      	str	r5, [r4, #20]
 8009fda:	eba5 0509 	sub.w	r5, r5, r9
 8009fde:	60a5      	str	r5, [r4, #8]
 8009fe0:	42be      	cmp	r6, r7
 8009fe2:	d900      	bls.n	8009fe6 <__ssputs_r+0x72>
 8009fe4:	463e      	mov	r6, r7
 8009fe6:	4632      	mov	r2, r6
 8009fe8:	4641      	mov	r1, r8
 8009fea:	6820      	ldr	r0, [r4, #0]
 8009fec:	f000 fd49 	bl	800aa82 <memmove>
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	68a3      	ldr	r3, [r4, #8]
 8009ff4:	1b9b      	subs	r3, r3, r6
 8009ff6:	60a3      	str	r3, [r4, #8]
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	4433      	add	r3, r6
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a002:	462a      	mov	r2, r5
 800a004:	f001 f8f9 	bl	800b1fa <_realloc_r>
 800a008:	4606      	mov	r6, r0
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d1e0      	bne.n	8009fd0 <__ssputs_r+0x5c>
 800a00e:	4650      	mov	r0, sl
 800a010:	6921      	ldr	r1, [r4, #16]
 800a012:	f7fe fb8d 	bl	8008730 <_free_r>
 800a016:	230c      	movs	r3, #12
 800a018:	f8ca 3000 	str.w	r3, [sl]
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	f04f 30ff 	mov.w	r0, #4294967295
 800a022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	e7e9      	b.n	8009ffe <__ssputs_r+0x8a>
	...

0800a02c <_svfiprintf_r>:
 800a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	4698      	mov	r8, r3
 800a032:	898b      	ldrh	r3, [r1, #12]
 800a034:	4607      	mov	r7, r0
 800a036:	061b      	lsls	r3, r3, #24
 800a038:	460d      	mov	r5, r1
 800a03a:	4614      	mov	r4, r2
 800a03c:	b09d      	sub	sp, #116	@ 0x74
 800a03e:	d510      	bpl.n	800a062 <_svfiprintf_r+0x36>
 800a040:	690b      	ldr	r3, [r1, #16]
 800a042:	b973      	cbnz	r3, 800a062 <_svfiprintf_r+0x36>
 800a044:	2140      	movs	r1, #64	@ 0x40
 800a046:	f7fe fbe5 	bl	8008814 <_malloc_r>
 800a04a:	6028      	str	r0, [r5, #0]
 800a04c:	6128      	str	r0, [r5, #16]
 800a04e:	b930      	cbnz	r0, 800a05e <_svfiprintf_r+0x32>
 800a050:	230c      	movs	r3, #12
 800a052:	603b      	str	r3, [r7, #0]
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	b01d      	add	sp, #116	@ 0x74
 800a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05e:	2340      	movs	r3, #64	@ 0x40
 800a060:	616b      	str	r3, [r5, #20]
 800a062:	2300      	movs	r3, #0
 800a064:	9309      	str	r3, [sp, #36]	@ 0x24
 800a066:	2320      	movs	r3, #32
 800a068:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a06c:	2330      	movs	r3, #48	@ 0x30
 800a06e:	f04f 0901 	mov.w	r9, #1
 800a072:	f8cd 800c 	str.w	r8, [sp, #12]
 800a076:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a210 <_svfiprintf_r+0x1e4>
 800a07a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a07e:	4623      	mov	r3, r4
 800a080:	469a      	mov	sl, r3
 800a082:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a086:	b10a      	cbz	r2, 800a08c <_svfiprintf_r+0x60>
 800a088:	2a25      	cmp	r2, #37	@ 0x25
 800a08a:	d1f9      	bne.n	800a080 <_svfiprintf_r+0x54>
 800a08c:	ebba 0b04 	subs.w	fp, sl, r4
 800a090:	d00b      	beq.n	800a0aa <_svfiprintf_r+0x7e>
 800a092:	465b      	mov	r3, fp
 800a094:	4622      	mov	r2, r4
 800a096:	4629      	mov	r1, r5
 800a098:	4638      	mov	r0, r7
 800a09a:	f7ff ff6b 	bl	8009f74 <__ssputs_r>
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f000 80a7 	beq.w	800a1f2 <_svfiprintf_r+0x1c6>
 800a0a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0a6:	445a      	add	r2, fp
 800a0a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 809f 	beq.w	800a1f2 <_svfiprintf_r+0x1c6>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0be:	f10a 0a01 	add.w	sl, sl, #1
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	9307      	str	r3, [sp, #28]
 800a0c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0cc:	4654      	mov	r4, sl
 800a0ce:	2205      	movs	r2, #5
 800a0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d4:	484e      	ldr	r0, [pc, #312]	@ (800a210 <_svfiprintf_r+0x1e4>)
 800a0d6:	f7fd fcc8 	bl	8007a6a <memchr>
 800a0da:	9a04      	ldr	r2, [sp, #16]
 800a0dc:	b9d8      	cbnz	r0, 800a116 <_svfiprintf_r+0xea>
 800a0de:	06d0      	lsls	r0, r2, #27
 800a0e0:	bf44      	itt	mi
 800a0e2:	2320      	movmi	r3, #32
 800a0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0e8:	0711      	lsls	r1, r2, #28
 800a0ea:	bf44      	itt	mi
 800a0ec:	232b      	movmi	r3, #43	@ 0x2b
 800a0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0f8:	d015      	beq.n	800a126 <_svfiprintf_r+0xfa>
 800a0fa:	4654      	mov	r4, sl
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	f04f 0c0a 	mov.w	ip, #10
 800a102:	9a07      	ldr	r2, [sp, #28]
 800a104:	4621      	mov	r1, r4
 800a106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a10a:	3b30      	subs	r3, #48	@ 0x30
 800a10c:	2b09      	cmp	r3, #9
 800a10e:	d94b      	bls.n	800a1a8 <_svfiprintf_r+0x17c>
 800a110:	b1b0      	cbz	r0, 800a140 <_svfiprintf_r+0x114>
 800a112:	9207      	str	r2, [sp, #28]
 800a114:	e014      	b.n	800a140 <_svfiprintf_r+0x114>
 800a116:	eba0 0308 	sub.w	r3, r0, r8
 800a11a:	fa09 f303 	lsl.w	r3, r9, r3
 800a11e:	4313      	orrs	r3, r2
 800a120:	46a2      	mov	sl, r4
 800a122:	9304      	str	r3, [sp, #16]
 800a124:	e7d2      	b.n	800a0cc <_svfiprintf_r+0xa0>
 800a126:	9b03      	ldr	r3, [sp, #12]
 800a128:	1d19      	adds	r1, r3, #4
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	9103      	str	r1, [sp, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	bfbb      	ittet	lt
 800a132:	425b      	neglt	r3, r3
 800a134:	f042 0202 	orrlt.w	r2, r2, #2
 800a138:	9307      	strge	r3, [sp, #28]
 800a13a:	9307      	strlt	r3, [sp, #28]
 800a13c:	bfb8      	it	lt
 800a13e:	9204      	strlt	r2, [sp, #16]
 800a140:	7823      	ldrb	r3, [r4, #0]
 800a142:	2b2e      	cmp	r3, #46	@ 0x2e
 800a144:	d10a      	bne.n	800a15c <_svfiprintf_r+0x130>
 800a146:	7863      	ldrb	r3, [r4, #1]
 800a148:	2b2a      	cmp	r3, #42	@ 0x2a
 800a14a:	d132      	bne.n	800a1b2 <_svfiprintf_r+0x186>
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	3402      	adds	r4, #2
 800a150:	1d1a      	adds	r2, r3, #4
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	9203      	str	r2, [sp, #12]
 800a156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a15a:	9305      	str	r3, [sp, #20]
 800a15c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a214 <_svfiprintf_r+0x1e8>
 800a160:	2203      	movs	r2, #3
 800a162:	4650      	mov	r0, sl
 800a164:	7821      	ldrb	r1, [r4, #0]
 800a166:	f7fd fc80 	bl	8007a6a <memchr>
 800a16a:	b138      	cbz	r0, 800a17c <_svfiprintf_r+0x150>
 800a16c:	2240      	movs	r2, #64	@ 0x40
 800a16e:	9b04      	ldr	r3, [sp, #16]
 800a170:	eba0 000a 	sub.w	r0, r0, sl
 800a174:	4082      	lsls	r2, r0
 800a176:	4313      	orrs	r3, r2
 800a178:	3401      	adds	r4, #1
 800a17a:	9304      	str	r3, [sp, #16]
 800a17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a180:	2206      	movs	r2, #6
 800a182:	4825      	ldr	r0, [pc, #148]	@ (800a218 <_svfiprintf_r+0x1ec>)
 800a184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a188:	f7fd fc6f 	bl	8007a6a <memchr>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d036      	beq.n	800a1fe <_svfiprintf_r+0x1d2>
 800a190:	4b22      	ldr	r3, [pc, #136]	@ (800a21c <_svfiprintf_r+0x1f0>)
 800a192:	bb1b      	cbnz	r3, 800a1dc <_svfiprintf_r+0x1b0>
 800a194:	9b03      	ldr	r3, [sp, #12]
 800a196:	3307      	adds	r3, #7
 800a198:	f023 0307 	bic.w	r3, r3, #7
 800a19c:	3308      	adds	r3, #8
 800a19e:	9303      	str	r3, [sp, #12]
 800a1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a2:	4433      	add	r3, r6
 800a1a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1a6:	e76a      	b.n	800a07e <_svfiprintf_r+0x52>
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1b0:	e7a8      	b.n	800a104 <_svfiprintf_r+0xd8>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f04f 0c0a 	mov.w	ip, #10
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	3401      	adds	r4, #1
 800a1bc:	9305      	str	r3, [sp, #20]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c4:	3a30      	subs	r2, #48	@ 0x30
 800a1c6:	2a09      	cmp	r2, #9
 800a1c8:	d903      	bls.n	800a1d2 <_svfiprintf_r+0x1a6>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0c6      	beq.n	800a15c <_svfiprintf_r+0x130>
 800a1ce:	9105      	str	r1, [sp, #20]
 800a1d0:	e7c4      	b.n	800a15c <_svfiprintf_r+0x130>
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1da:	e7f0      	b.n	800a1be <_svfiprintf_r+0x192>
 800a1dc:	ab03      	add	r3, sp, #12
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a220 <_svfiprintf_r+0x1f4>)
 800a1e6:	a904      	add	r1, sp, #16
 800a1e8:	f7fc fc8e 	bl	8006b08 <_printf_float>
 800a1ec:	1c42      	adds	r2, r0, #1
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	d1d6      	bne.n	800a1a0 <_svfiprintf_r+0x174>
 800a1f2:	89ab      	ldrh	r3, [r5, #12]
 800a1f4:	065b      	lsls	r3, r3, #25
 800a1f6:	f53f af2d 	bmi.w	800a054 <_svfiprintf_r+0x28>
 800a1fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1fc:	e72c      	b.n	800a058 <_svfiprintf_r+0x2c>
 800a1fe:	ab03      	add	r3, sp, #12
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	462a      	mov	r2, r5
 800a204:	4638      	mov	r0, r7
 800a206:	4b06      	ldr	r3, [pc, #24]	@ (800a220 <_svfiprintf_r+0x1f4>)
 800a208:	a904      	add	r1, sp, #16
 800a20a:	f7fc ff1b 	bl	8007044 <_printf_i>
 800a20e:	e7ed      	b.n	800a1ec <_svfiprintf_r+0x1c0>
 800a210:	0800c961 	.word	0x0800c961
 800a214:	0800c967 	.word	0x0800c967
 800a218:	0800c96b 	.word	0x0800c96b
 800a21c:	08006b09 	.word	0x08006b09
 800a220:	08009f75 	.word	0x08009f75

0800a224 <_sungetc_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	1c4b      	adds	r3, r1, #1
 800a228:	4614      	mov	r4, r2
 800a22a:	d103      	bne.n	800a234 <_sungetc_r+0x10>
 800a22c:	f04f 35ff 	mov.w	r5, #4294967295
 800a230:	4628      	mov	r0, r5
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	8993      	ldrh	r3, [r2, #12]
 800a236:	b2cd      	uxtb	r5, r1
 800a238:	f023 0320 	bic.w	r3, r3, #32
 800a23c:	8193      	strh	r3, [r2, #12]
 800a23e:	6853      	ldr	r3, [r2, #4]
 800a240:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a242:	b18a      	cbz	r2, 800a268 <_sungetc_r+0x44>
 800a244:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a246:	429a      	cmp	r2, r3
 800a248:	dd08      	ble.n	800a25c <_sungetc_r+0x38>
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	1e5a      	subs	r2, r3, #1
 800a24e:	6022      	str	r2, [r4, #0]
 800a250:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a254:	6863      	ldr	r3, [r4, #4]
 800a256:	3301      	adds	r3, #1
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	e7e9      	b.n	800a230 <_sungetc_r+0xc>
 800a25c:	4621      	mov	r1, r4
 800a25e:	f000 fbd8 	bl	800aa12 <__submore>
 800a262:	2800      	cmp	r0, #0
 800a264:	d0f1      	beq.n	800a24a <_sungetc_r+0x26>
 800a266:	e7e1      	b.n	800a22c <_sungetc_r+0x8>
 800a268:	6921      	ldr	r1, [r4, #16]
 800a26a:	6822      	ldr	r2, [r4, #0]
 800a26c:	b141      	cbz	r1, 800a280 <_sungetc_r+0x5c>
 800a26e:	4291      	cmp	r1, r2
 800a270:	d206      	bcs.n	800a280 <_sungetc_r+0x5c>
 800a272:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a276:	42a9      	cmp	r1, r5
 800a278:	d102      	bne.n	800a280 <_sungetc_r+0x5c>
 800a27a:	3a01      	subs	r2, #1
 800a27c:	6022      	str	r2, [r4, #0]
 800a27e:	e7ea      	b.n	800a256 <_sungetc_r+0x32>
 800a280:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a284:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a288:	6363      	str	r3, [r4, #52]	@ 0x34
 800a28a:	2303      	movs	r3, #3
 800a28c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a28e:	4623      	mov	r3, r4
 800a290:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	2301      	movs	r3, #1
 800a298:	e7de      	b.n	800a258 <_sungetc_r+0x34>

0800a29a <__ssrefill_r>:
 800a29a:	b510      	push	{r4, lr}
 800a29c:	460c      	mov	r4, r1
 800a29e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a2a0:	b169      	cbz	r1, 800a2be <__ssrefill_r+0x24>
 800a2a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2a6:	4299      	cmp	r1, r3
 800a2a8:	d001      	beq.n	800a2ae <__ssrefill_r+0x14>
 800a2aa:	f7fe fa41 	bl	8008730 <_free_r>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2b2:	6360      	str	r0, [r4, #52]	@ 0x34
 800a2b4:	6063      	str	r3, [r4, #4]
 800a2b6:	b113      	cbz	r3, 800a2be <__ssrefill_r+0x24>
 800a2b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a2ba:	6023      	str	r3, [r4, #0]
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	6923      	ldr	r3, [r4, #16]
 800a2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	6063      	str	r3, [r4, #4]
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f043 0320 	orr.w	r3, r3, #32
 800a2d0:	81a3      	strh	r3, [r4, #12]
 800a2d2:	e7f3      	b.n	800a2bc <__ssrefill_r+0x22>

0800a2d4 <__ssvfiscanf_r>:
 800a2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d8:	460c      	mov	r4, r1
 800a2da:	2100      	movs	r1, #0
 800a2dc:	4606      	mov	r6, r0
 800a2de:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a2e2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a2e6:	49aa      	ldr	r1, [pc, #680]	@ (800a590 <__ssvfiscanf_r+0x2bc>)
 800a2e8:	f10d 0804 	add.w	r8, sp, #4
 800a2ec:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a2ee:	49a9      	ldr	r1, [pc, #676]	@ (800a594 <__ssvfiscanf_r+0x2c0>)
 800a2f0:	4fa9      	ldr	r7, [pc, #676]	@ (800a598 <__ssvfiscanf_r+0x2c4>)
 800a2f2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a2f6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	7813      	ldrb	r3, [r2, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 8159 	beq.w	800a5b4 <__ssvfiscanf_r+0x2e0>
 800a302:	5cf9      	ldrb	r1, [r7, r3]
 800a304:	1c55      	adds	r5, r2, #1
 800a306:	f011 0108 	ands.w	r1, r1, #8
 800a30a:	d019      	beq.n	800a340 <__ssvfiscanf_r+0x6c>
 800a30c:	6863      	ldr	r3, [r4, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	dd0f      	ble.n	800a332 <__ssvfiscanf_r+0x5e>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	781a      	ldrb	r2, [r3, #0]
 800a316:	5cba      	ldrb	r2, [r7, r2]
 800a318:	0712      	lsls	r2, r2, #28
 800a31a:	d401      	bmi.n	800a320 <__ssvfiscanf_r+0x4c>
 800a31c:	462a      	mov	r2, r5
 800a31e:	e7ec      	b.n	800a2fa <__ssvfiscanf_r+0x26>
 800a320:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a322:	3301      	adds	r3, #1
 800a324:	3201      	adds	r2, #1
 800a326:	9245      	str	r2, [sp, #276]	@ 0x114
 800a328:	6862      	ldr	r2, [r4, #4]
 800a32a:	6023      	str	r3, [r4, #0]
 800a32c:	3a01      	subs	r2, #1
 800a32e:	6062      	str	r2, [r4, #4]
 800a330:	e7ec      	b.n	800a30c <__ssvfiscanf_r+0x38>
 800a332:	4621      	mov	r1, r4
 800a334:	4630      	mov	r0, r6
 800a336:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a338:	4798      	blx	r3
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d0e9      	beq.n	800a312 <__ssvfiscanf_r+0x3e>
 800a33e:	e7ed      	b.n	800a31c <__ssvfiscanf_r+0x48>
 800a340:	2b25      	cmp	r3, #37	@ 0x25
 800a342:	d012      	beq.n	800a36a <__ssvfiscanf_r+0x96>
 800a344:	4699      	mov	r9, r3
 800a346:	6863      	ldr	r3, [r4, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f340 8094 	ble.w	800a476 <__ssvfiscanf_r+0x1a2>
 800a34e:	6822      	ldr	r2, [r4, #0]
 800a350:	7813      	ldrb	r3, [r2, #0]
 800a352:	454b      	cmp	r3, r9
 800a354:	f040 812e 	bne.w	800a5b4 <__ssvfiscanf_r+0x2e0>
 800a358:	6863      	ldr	r3, [r4, #4]
 800a35a:	3201      	adds	r2, #1
 800a35c:	3b01      	subs	r3, #1
 800a35e:	6063      	str	r3, [r4, #4]
 800a360:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a362:	6022      	str	r2, [r4, #0]
 800a364:	3301      	adds	r3, #1
 800a366:	9345      	str	r3, [sp, #276]	@ 0x114
 800a368:	e7d8      	b.n	800a31c <__ssvfiscanf_r+0x48>
 800a36a:	9141      	str	r1, [sp, #260]	@ 0x104
 800a36c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a36e:	7853      	ldrb	r3, [r2, #1]
 800a370:	2b2a      	cmp	r3, #42	@ 0x2a
 800a372:	bf04      	itt	eq
 800a374:	2310      	moveq	r3, #16
 800a376:	1c95      	addeq	r5, r2, #2
 800a378:	f04f 020a 	mov.w	r2, #10
 800a37c:	bf08      	it	eq
 800a37e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a380:	46a9      	mov	r9, r5
 800a382:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a386:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a38a:	2b09      	cmp	r3, #9
 800a38c:	d91e      	bls.n	800a3cc <__ssvfiscanf_r+0xf8>
 800a38e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800a59c <__ssvfiscanf_r+0x2c8>
 800a392:	2203      	movs	r2, #3
 800a394:	4650      	mov	r0, sl
 800a396:	f7fd fb68 	bl	8007a6a <memchr>
 800a39a:	b138      	cbz	r0, 800a3ac <__ssvfiscanf_r+0xd8>
 800a39c:	2301      	movs	r3, #1
 800a39e:	464d      	mov	r5, r9
 800a3a0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a3a2:	eba0 000a 	sub.w	r0, r0, sl
 800a3a6:	4083      	lsls	r3, r0
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	9341      	str	r3, [sp, #260]	@ 0x104
 800a3ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a3b0:	2b78      	cmp	r3, #120	@ 0x78
 800a3b2:	d806      	bhi.n	800a3c2 <__ssvfiscanf_r+0xee>
 800a3b4:	2b57      	cmp	r3, #87	@ 0x57
 800a3b6:	d810      	bhi.n	800a3da <__ssvfiscanf_r+0x106>
 800a3b8:	2b25      	cmp	r3, #37	@ 0x25
 800a3ba:	d0c3      	beq.n	800a344 <__ssvfiscanf_r+0x70>
 800a3bc:	d856      	bhi.n	800a46c <__ssvfiscanf_r+0x198>
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d064      	beq.n	800a48c <__ssvfiscanf_r+0x1b8>
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a3c6:	230a      	movs	r3, #10
 800a3c8:	9342      	str	r3, [sp, #264]	@ 0x108
 800a3ca:	e077      	b.n	800a4bc <__ssvfiscanf_r+0x1e8>
 800a3cc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a3ce:	464d      	mov	r5, r9
 800a3d0:	fb02 1103 	mla	r1, r2, r3, r1
 800a3d4:	3930      	subs	r1, #48	@ 0x30
 800a3d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a3d8:	e7d2      	b.n	800a380 <__ssvfiscanf_r+0xac>
 800a3da:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a3de:	2a20      	cmp	r2, #32
 800a3e0:	d8ef      	bhi.n	800a3c2 <__ssvfiscanf_r+0xee>
 800a3e2:	a101      	add	r1, pc, #4	@ (adr r1, 800a3e8 <__ssvfiscanf_r+0x114>)
 800a3e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a3e8:	0800a49b 	.word	0x0800a49b
 800a3ec:	0800a3c3 	.word	0x0800a3c3
 800a3f0:	0800a3c3 	.word	0x0800a3c3
 800a3f4:	0800a4f5 	.word	0x0800a4f5
 800a3f8:	0800a3c3 	.word	0x0800a3c3
 800a3fc:	0800a3c3 	.word	0x0800a3c3
 800a400:	0800a3c3 	.word	0x0800a3c3
 800a404:	0800a3c3 	.word	0x0800a3c3
 800a408:	0800a3c3 	.word	0x0800a3c3
 800a40c:	0800a3c3 	.word	0x0800a3c3
 800a410:	0800a3c3 	.word	0x0800a3c3
 800a414:	0800a50b 	.word	0x0800a50b
 800a418:	0800a4f1 	.word	0x0800a4f1
 800a41c:	0800a473 	.word	0x0800a473
 800a420:	0800a473 	.word	0x0800a473
 800a424:	0800a473 	.word	0x0800a473
 800a428:	0800a3c3 	.word	0x0800a3c3
 800a42c:	0800a4ad 	.word	0x0800a4ad
 800a430:	0800a3c3 	.word	0x0800a3c3
 800a434:	0800a3c3 	.word	0x0800a3c3
 800a438:	0800a3c3 	.word	0x0800a3c3
 800a43c:	0800a3c3 	.word	0x0800a3c3
 800a440:	0800a51b 	.word	0x0800a51b
 800a444:	0800a4b5 	.word	0x0800a4b5
 800a448:	0800a493 	.word	0x0800a493
 800a44c:	0800a3c3 	.word	0x0800a3c3
 800a450:	0800a3c3 	.word	0x0800a3c3
 800a454:	0800a517 	.word	0x0800a517
 800a458:	0800a3c3 	.word	0x0800a3c3
 800a45c:	0800a4f1 	.word	0x0800a4f1
 800a460:	0800a3c3 	.word	0x0800a3c3
 800a464:	0800a3c3 	.word	0x0800a3c3
 800a468:	0800a49b 	.word	0x0800a49b
 800a46c:	3b45      	subs	r3, #69	@ 0x45
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d8a7      	bhi.n	800a3c2 <__ssvfiscanf_r+0xee>
 800a472:	2305      	movs	r3, #5
 800a474:	e021      	b.n	800a4ba <__ssvfiscanf_r+0x1e6>
 800a476:	4621      	mov	r1, r4
 800a478:	4630      	mov	r0, r6
 800a47a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a47c:	4798      	blx	r3
 800a47e:	2800      	cmp	r0, #0
 800a480:	f43f af65 	beq.w	800a34e <__ssvfiscanf_r+0x7a>
 800a484:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a486:	2800      	cmp	r0, #0
 800a488:	f040 808c 	bne.w	800a5a4 <__ssvfiscanf_r+0x2d0>
 800a48c:	f04f 30ff 	mov.w	r0, #4294967295
 800a490:	e08c      	b.n	800a5ac <__ssvfiscanf_r+0x2d8>
 800a492:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a494:	f042 0220 	orr.w	r2, r2, #32
 800a498:	9241      	str	r2, [sp, #260]	@ 0x104
 800a49a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a49c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4a0:	9241      	str	r2, [sp, #260]	@ 0x104
 800a4a2:	2210      	movs	r2, #16
 800a4a4:	2b6e      	cmp	r3, #110	@ 0x6e
 800a4a6:	9242      	str	r2, [sp, #264]	@ 0x108
 800a4a8:	d902      	bls.n	800a4b0 <__ssvfiscanf_r+0x1dc>
 800a4aa:	e005      	b.n	800a4b8 <__ssvfiscanf_r+0x1e4>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9342      	str	r3, [sp, #264]	@ 0x108
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e002      	b.n	800a4ba <__ssvfiscanf_r+0x1e6>
 800a4b4:	2308      	movs	r3, #8
 800a4b6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a4bc:	6863      	ldr	r3, [r4, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	dd39      	ble.n	800a536 <__ssvfiscanf_r+0x262>
 800a4c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a4c4:	0659      	lsls	r1, r3, #25
 800a4c6:	d404      	bmi.n	800a4d2 <__ssvfiscanf_r+0x1fe>
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	781a      	ldrb	r2, [r3, #0]
 800a4cc:	5cba      	ldrb	r2, [r7, r2]
 800a4ce:	0712      	lsls	r2, r2, #28
 800a4d0:	d438      	bmi.n	800a544 <__ssvfiscanf_r+0x270>
 800a4d2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	dc47      	bgt.n	800a568 <__ssvfiscanf_r+0x294>
 800a4d8:	466b      	mov	r3, sp
 800a4da:	4622      	mov	r2, r4
 800a4dc:	4630      	mov	r0, r6
 800a4de:	a941      	add	r1, sp, #260	@ 0x104
 800a4e0:	f000 f86a 	bl	800a5b8 <_scanf_chars>
 800a4e4:	2801      	cmp	r0, #1
 800a4e6:	d065      	beq.n	800a5b4 <__ssvfiscanf_r+0x2e0>
 800a4e8:	2802      	cmp	r0, #2
 800a4ea:	f47f af17 	bne.w	800a31c <__ssvfiscanf_r+0x48>
 800a4ee:	e7c9      	b.n	800a484 <__ssvfiscanf_r+0x1b0>
 800a4f0:	220a      	movs	r2, #10
 800a4f2:	e7d7      	b.n	800a4a4 <__ssvfiscanf_r+0x1d0>
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4640      	mov	r0, r8
 800a4f8:	f000 fa52 	bl	800a9a0 <__sccl>
 800a4fc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a4fe:	4605      	mov	r5, r0
 800a500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a504:	9341      	str	r3, [sp, #260]	@ 0x104
 800a506:	2301      	movs	r3, #1
 800a508:	e7d7      	b.n	800a4ba <__ssvfiscanf_r+0x1e6>
 800a50a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a50c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a510:	9341      	str	r3, [sp, #260]	@ 0x104
 800a512:	2300      	movs	r3, #0
 800a514:	e7d1      	b.n	800a4ba <__ssvfiscanf_r+0x1e6>
 800a516:	2302      	movs	r3, #2
 800a518:	e7cf      	b.n	800a4ba <__ssvfiscanf_r+0x1e6>
 800a51a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a51c:	06c3      	lsls	r3, r0, #27
 800a51e:	f53f aefd 	bmi.w	800a31c <__ssvfiscanf_r+0x48>
 800a522:	9b00      	ldr	r3, [sp, #0]
 800a524:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a526:	1d19      	adds	r1, r3, #4
 800a528:	9100      	str	r1, [sp, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	07c0      	lsls	r0, r0, #31
 800a52e:	bf4c      	ite	mi
 800a530:	801a      	strhmi	r2, [r3, #0]
 800a532:	601a      	strpl	r2, [r3, #0]
 800a534:	e6f2      	b.n	800a31c <__ssvfiscanf_r+0x48>
 800a536:	4621      	mov	r1, r4
 800a538:	4630      	mov	r0, r6
 800a53a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a53c:	4798      	blx	r3
 800a53e:	2800      	cmp	r0, #0
 800a540:	d0bf      	beq.n	800a4c2 <__ssvfiscanf_r+0x1ee>
 800a542:	e79f      	b.n	800a484 <__ssvfiscanf_r+0x1b0>
 800a544:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a546:	3201      	adds	r2, #1
 800a548:	9245      	str	r2, [sp, #276]	@ 0x114
 800a54a:	6862      	ldr	r2, [r4, #4]
 800a54c:	3a01      	subs	r2, #1
 800a54e:	2a00      	cmp	r2, #0
 800a550:	6062      	str	r2, [r4, #4]
 800a552:	dd02      	ble.n	800a55a <__ssvfiscanf_r+0x286>
 800a554:	3301      	adds	r3, #1
 800a556:	6023      	str	r3, [r4, #0]
 800a558:	e7b6      	b.n	800a4c8 <__ssvfiscanf_r+0x1f4>
 800a55a:	4621      	mov	r1, r4
 800a55c:	4630      	mov	r0, r6
 800a55e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a560:	4798      	blx	r3
 800a562:	2800      	cmp	r0, #0
 800a564:	d0b0      	beq.n	800a4c8 <__ssvfiscanf_r+0x1f4>
 800a566:	e78d      	b.n	800a484 <__ssvfiscanf_r+0x1b0>
 800a568:	2b04      	cmp	r3, #4
 800a56a:	dc06      	bgt.n	800a57a <__ssvfiscanf_r+0x2a6>
 800a56c:	466b      	mov	r3, sp
 800a56e:	4622      	mov	r2, r4
 800a570:	4630      	mov	r0, r6
 800a572:	a941      	add	r1, sp, #260	@ 0x104
 800a574:	f000 f87a 	bl	800a66c <_scanf_i>
 800a578:	e7b4      	b.n	800a4e4 <__ssvfiscanf_r+0x210>
 800a57a:	4b09      	ldr	r3, [pc, #36]	@ (800a5a0 <__ssvfiscanf_r+0x2cc>)
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f43f aecd 	beq.w	800a31c <__ssvfiscanf_r+0x48>
 800a582:	466b      	mov	r3, sp
 800a584:	4622      	mov	r2, r4
 800a586:	4630      	mov	r0, r6
 800a588:	a941      	add	r1, sp, #260	@ 0x104
 800a58a:	f7fc fe7b 	bl	8007284 <_scanf_float>
 800a58e:	e7a9      	b.n	800a4e4 <__ssvfiscanf_r+0x210>
 800a590:	0800a225 	.word	0x0800a225
 800a594:	0800a29b 	.word	0x0800a29b
 800a598:	0800c861 	.word	0x0800c861
 800a59c:	0800c967 	.word	0x0800c967
 800a5a0:	08007285 	.word	0x08007285
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	065b      	lsls	r3, r3, #25
 800a5a8:	f53f af70 	bmi.w	800a48c <__ssvfiscanf_r+0x1b8>
 800a5ac:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a5b6:	e7f9      	b.n	800a5ac <__ssvfiscanf_r+0x2d8>

0800a5b8 <_scanf_chars>:
 800a5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5bc:	4615      	mov	r5, r2
 800a5be:	688a      	ldr	r2, [r1, #8]
 800a5c0:	4680      	mov	r8, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	b932      	cbnz	r2, 800a5d4 <_scanf_chars+0x1c>
 800a5c6:	698a      	ldr	r2, [r1, #24]
 800a5c8:	2a00      	cmp	r2, #0
 800a5ca:	bf14      	ite	ne
 800a5cc:	f04f 32ff 	movne.w	r2, #4294967295
 800a5d0:	2201      	moveq	r2, #1
 800a5d2:	608a      	str	r2, [r1, #8]
 800a5d4:	2700      	movs	r7, #0
 800a5d6:	6822      	ldr	r2, [r4, #0]
 800a5d8:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800a668 <_scanf_chars+0xb0>
 800a5dc:	06d1      	lsls	r1, r2, #27
 800a5de:	bf5f      	itttt	pl
 800a5e0:	681a      	ldrpl	r2, [r3, #0]
 800a5e2:	1d11      	addpl	r1, r2, #4
 800a5e4:	6019      	strpl	r1, [r3, #0]
 800a5e6:	6816      	ldrpl	r6, [r2, #0]
 800a5e8:	69a0      	ldr	r0, [r4, #24]
 800a5ea:	b188      	cbz	r0, 800a610 <_scanf_chars+0x58>
 800a5ec:	2801      	cmp	r0, #1
 800a5ee:	d107      	bne.n	800a600 <_scanf_chars+0x48>
 800a5f0:	682b      	ldr	r3, [r5, #0]
 800a5f2:	781a      	ldrb	r2, [r3, #0]
 800a5f4:	6963      	ldr	r3, [r4, #20]
 800a5f6:	5c9b      	ldrb	r3, [r3, r2]
 800a5f8:	b953      	cbnz	r3, 800a610 <_scanf_chars+0x58>
 800a5fa:	2f00      	cmp	r7, #0
 800a5fc:	d031      	beq.n	800a662 <_scanf_chars+0xaa>
 800a5fe:	e022      	b.n	800a646 <_scanf_chars+0x8e>
 800a600:	2802      	cmp	r0, #2
 800a602:	d120      	bne.n	800a646 <_scanf_chars+0x8e>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a60c:	071b      	lsls	r3, r3, #28
 800a60e:	d41a      	bmi.n	800a646 <_scanf_chars+0x8e>
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	3701      	adds	r7, #1
 800a614:	06da      	lsls	r2, r3, #27
 800a616:	bf5e      	ittt	pl
 800a618:	682b      	ldrpl	r3, [r5, #0]
 800a61a:	781b      	ldrbpl	r3, [r3, #0]
 800a61c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a620:	682a      	ldr	r2, [r5, #0]
 800a622:	686b      	ldr	r3, [r5, #4]
 800a624:	3201      	adds	r2, #1
 800a626:	602a      	str	r2, [r5, #0]
 800a628:	68a2      	ldr	r2, [r4, #8]
 800a62a:	3b01      	subs	r3, #1
 800a62c:	3a01      	subs	r2, #1
 800a62e:	606b      	str	r3, [r5, #4]
 800a630:	60a2      	str	r2, [r4, #8]
 800a632:	b142      	cbz	r2, 800a646 <_scanf_chars+0x8e>
 800a634:	2b00      	cmp	r3, #0
 800a636:	dcd7      	bgt.n	800a5e8 <_scanf_chars+0x30>
 800a638:	4629      	mov	r1, r5
 800a63a:	4640      	mov	r0, r8
 800a63c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a640:	4798      	blx	r3
 800a642:	2800      	cmp	r0, #0
 800a644:	d0d0      	beq.n	800a5e8 <_scanf_chars+0x30>
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	f013 0310 	ands.w	r3, r3, #16
 800a64c:	d105      	bne.n	800a65a <_scanf_chars+0xa2>
 800a64e:	68e2      	ldr	r2, [r4, #12]
 800a650:	3201      	adds	r2, #1
 800a652:	60e2      	str	r2, [r4, #12]
 800a654:	69a2      	ldr	r2, [r4, #24]
 800a656:	b102      	cbz	r2, 800a65a <_scanf_chars+0xa2>
 800a658:	7033      	strb	r3, [r6, #0]
 800a65a:	2000      	movs	r0, #0
 800a65c:	6923      	ldr	r3, [r4, #16]
 800a65e:	443b      	add	r3, r7
 800a660:	6123      	str	r3, [r4, #16]
 800a662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a666:	bf00      	nop
 800a668:	0800c861 	.word	0x0800c861

0800a66c <_scanf_i>:
 800a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	460c      	mov	r4, r1
 800a672:	4698      	mov	r8, r3
 800a674:	4b72      	ldr	r3, [pc, #456]	@ (800a840 <_scanf_i+0x1d4>)
 800a676:	b087      	sub	sp, #28
 800a678:	4682      	mov	sl, r0
 800a67a:	4616      	mov	r6, r2
 800a67c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a680:	ab03      	add	r3, sp, #12
 800a682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a686:	4b6f      	ldr	r3, [pc, #444]	@ (800a844 <_scanf_i+0x1d8>)
 800a688:	69a1      	ldr	r1, [r4, #24]
 800a68a:	4a6f      	ldr	r2, [pc, #444]	@ (800a848 <_scanf_i+0x1dc>)
 800a68c:	4627      	mov	r7, r4
 800a68e:	2903      	cmp	r1, #3
 800a690:	bf08      	it	eq
 800a692:	461a      	moveq	r2, r3
 800a694:	68a3      	ldr	r3, [r4, #8]
 800a696:	9201      	str	r2, [sp, #4]
 800a698:	1e5a      	subs	r2, r3, #1
 800a69a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a69e:	bf81      	itttt	hi
 800a6a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a6a4:	eb03 0905 	addhi.w	r9, r3, r5
 800a6a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a6ac:	60a3      	strhi	r3, [r4, #8]
 800a6ae:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a6b2:	bf98      	it	ls
 800a6b4:	f04f 0900 	movls.w	r9, #0
 800a6b8:	463d      	mov	r5, r7
 800a6ba:	f04f 0b00 	mov.w	fp, #0
 800a6be:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a6c2:	6023      	str	r3, [r4, #0]
 800a6c4:	6831      	ldr	r1, [r6, #0]
 800a6c6:	ab03      	add	r3, sp, #12
 800a6c8:	2202      	movs	r2, #2
 800a6ca:	7809      	ldrb	r1, [r1, #0]
 800a6cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a6d0:	f7fd f9cb 	bl	8007a6a <memchr>
 800a6d4:	b328      	cbz	r0, 800a722 <_scanf_i+0xb6>
 800a6d6:	f1bb 0f01 	cmp.w	fp, #1
 800a6da:	d159      	bne.n	800a790 <_scanf_i+0x124>
 800a6dc:	6862      	ldr	r2, [r4, #4]
 800a6de:	b92a      	cbnz	r2, 800a6ec <_scanf_i+0x80>
 800a6e0:	2108      	movs	r1, #8
 800a6e2:	6822      	ldr	r2, [r4, #0]
 800a6e4:	6061      	str	r1, [r4, #4]
 800a6e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6ea:	6022      	str	r2, [r4, #0]
 800a6ec:	6822      	ldr	r2, [r4, #0]
 800a6ee:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a6f2:	6022      	str	r2, [r4, #0]
 800a6f4:	68a2      	ldr	r2, [r4, #8]
 800a6f6:	1e51      	subs	r1, r2, #1
 800a6f8:	60a1      	str	r1, [r4, #8]
 800a6fa:	b192      	cbz	r2, 800a722 <_scanf_i+0xb6>
 800a6fc:	6832      	ldr	r2, [r6, #0]
 800a6fe:	1c51      	adds	r1, r2, #1
 800a700:	6031      	str	r1, [r6, #0]
 800a702:	7812      	ldrb	r2, [r2, #0]
 800a704:	f805 2b01 	strb.w	r2, [r5], #1
 800a708:	6872      	ldr	r2, [r6, #4]
 800a70a:	3a01      	subs	r2, #1
 800a70c:	2a00      	cmp	r2, #0
 800a70e:	6072      	str	r2, [r6, #4]
 800a710:	dc07      	bgt.n	800a722 <_scanf_i+0xb6>
 800a712:	4631      	mov	r1, r6
 800a714:	4650      	mov	r0, sl
 800a716:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a71a:	4790      	blx	r2
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f040 8085 	bne.w	800a82c <_scanf_i+0x1c0>
 800a722:	f10b 0b01 	add.w	fp, fp, #1
 800a726:	f1bb 0f03 	cmp.w	fp, #3
 800a72a:	d1cb      	bne.n	800a6c4 <_scanf_i+0x58>
 800a72c:	6863      	ldr	r3, [r4, #4]
 800a72e:	b90b      	cbnz	r3, 800a734 <_scanf_i+0xc8>
 800a730:	230a      	movs	r3, #10
 800a732:	6063      	str	r3, [r4, #4]
 800a734:	6863      	ldr	r3, [r4, #4]
 800a736:	4945      	ldr	r1, [pc, #276]	@ (800a84c <_scanf_i+0x1e0>)
 800a738:	6960      	ldr	r0, [r4, #20]
 800a73a:	1ac9      	subs	r1, r1, r3
 800a73c:	f000 f930 	bl	800a9a0 <__sccl>
 800a740:	f04f 0b00 	mov.w	fp, #0
 800a744:	68a3      	ldr	r3, [r4, #8]
 800a746:	6822      	ldr	r2, [r4, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d03d      	beq.n	800a7c8 <_scanf_i+0x15c>
 800a74c:	6831      	ldr	r1, [r6, #0]
 800a74e:	6960      	ldr	r0, [r4, #20]
 800a750:	f891 c000 	ldrb.w	ip, [r1]
 800a754:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a758:	2800      	cmp	r0, #0
 800a75a:	d035      	beq.n	800a7c8 <_scanf_i+0x15c>
 800a75c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a760:	d124      	bne.n	800a7ac <_scanf_i+0x140>
 800a762:	0510      	lsls	r0, r2, #20
 800a764:	d522      	bpl.n	800a7ac <_scanf_i+0x140>
 800a766:	f10b 0b01 	add.w	fp, fp, #1
 800a76a:	f1b9 0f00 	cmp.w	r9, #0
 800a76e:	d003      	beq.n	800a778 <_scanf_i+0x10c>
 800a770:	3301      	adds	r3, #1
 800a772:	f109 39ff 	add.w	r9, r9, #4294967295
 800a776:	60a3      	str	r3, [r4, #8]
 800a778:	6873      	ldr	r3, [r6, #4]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	6073      	str	r3, [r6, #4]
 800a780:	dd1b      	ble.n	800a7ba <_scanf_i+0x14e>
 800a782:	6833      	ldr	r3, [r6, #0]
 800a784:	3301      	adds	r3, #1
 800a786:	6033      	str	r3, [r6, #0]
 800a788:	68a3      	ldr	r3, [r4, #8]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	60a3      	str	r3, [r4, #8]
 800a78e:	e7d9      	b.n	800a744 <_scanf_i+0xd8>
 800a790:	f1bb 0f02 	cmp.w	fp, #2
 800a794:	d1ae      	bne.n	800a6f4 <_scanf_i+0x88>
 800a796:	6822      	ldr	r2, [r4, #0]
 800a798:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a79c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a7a0:	d1bf      	bne.n	800a722 <_scanf_i+0xb6>
 800a7a2:	2110      	movs	r1, #16
 800a7a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7a8:	6061      	str	r1, [r4, #4]
 800a7aa:	e7a2      	b.n	800a6f2 <_scanf_i+0x86>
 800a7ac:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a7b0:	6022      	str	r2, [r4, #0]
 800a7b2:	780b      	ldrb	r3, [r1, #0]
 800a7b4:	f805 3b01 	strb.w	r3, [r5], #1
 800a7b8:	e7de      	b.n	800a778 <_scanf_i+0x10c>
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	4650      	mov	r0, sl
 800a7be:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a7c2:	4798      	blx	r3
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d0df      	beq.n	800a788 <_scanf_i+0x11c>
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	05d9      	lsls	r1, r3, #23
 800a7cc:	d50d      	bpl.n	800a7ea <_scanf_i+0x17e>
 800a7ce:	42bd      	cmp	r5, r7
 800a7d0:	d909      	bls.n	800a7e6 <_scanf_i+0x17a>
 800a7d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	4650      	mov	r0, sl
 800a7da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7de:	f105 39ff 	add.w	r9, r5, #4294967295
 800a7e2:	4798      	blx	r3
 800a7e4:	464d      	mov	r5, r9
 800a7e6:	42bd      	cmp	r5, r7
 800a7e8:	d028      	beq.n	800a83c <_scanf_i+0x1d0>
 800a7ea:	6822      	ldr	r2, [r4, #0]
 800a7ec:	f012 0210 	ands.w	r2, r2, #16
 800a7f0:	d113      	bne.n	800a81a <_scanf_i+0x1ae>
 800a7f2:	702a      	strb	r2, [r5, #0]
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	6863      	ldr	r3, [r4, #4]
 800a7f8:	4650      	mov	r0, sl
 800a7fa:	9e01      	ldr	r6, [sp, #4]
 800a7fc:	47b0      	blx	r6
 800a7fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a802:	6821      	ldr	r1, [r4, #0]
 800a804:	1d1a      	adds	r2, r3, #4
 800a806:	f8c8 2000 	str.w	r2, [r8]
 800a80a:	f011 0f20 	tst.w	r1, #32
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	d00f      	beq.n	800a832 <_scanf_i+0x1c6>
 800a812:	6018      	str	r0, [r3, #0]
 800a814:	68e3      	ldr	r3, [r4, #12]
 800a816:	3301      	adds	r3, #1
 800a818:	60e3      	str	r3, [r4, #12]
 800a81a:	2000      	movs	r0, #0
 800a81c:	6923      	ldr	r3, [r4, #16]
 800a81e:	1bed      	subs	r5, r5, r7
 800a820:	445d      	add	r5, fp
 800a822:	442b      	add	r3, r5
 800a824:	6123      	str	r3, [r4, #16]
 800a826:	b007      	add	sp, #28
 800a828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82c:	f04f 0b00 	mov.w	fp, #0
 800a830:	e7ca      	b.n	800a7c8 <_scanf_i+0x15c>
 800a832:	07ca      	lsls	r2, r1, #31
 800a834:	bf4c      	ite	mi
 800a836:	8018      	strhmi	r0, [r3, #0]
 800a838:	6018      	strpl	r0, [r3, #0]
 800a83a:	e7eb      	b.n	800a814 <_scanf_i+0x1a8>
 800a83c:	2001      	movs	r0, #1
 800a83e:	e7f2      	b.n	800a826 <_scanf_i+0x1ba>
 800a840:	0800be20 	.word	0x0800be20
 800a844:	08009f71 	.word	0x08009f71
 800a848:	0800b335 	.word	0x0800b335
 800a84c:	0800c982 	.word	0x0800c982

0800a850 <__sflush_r>:
 800a850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a856:	0716      	lsls	r6, r2, #28
 800a858:	4605      	mov	r5, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	d454      	bmi.n	800a908 <__sflush_r+0xb8>
 800a85e:	684b      	ldr	r3, [r1, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	dc02      	bgt.n	800a86a <__sflush_r+0x1a>
 800a864:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a866:	2b00      	cmp	r3, #0
 800a868:	dd48      	ble.n	800a8fc <__sflush_r+0xac>
 800a86a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a86c:	2e00      	cmp	r6, #0
 800a86e:	d045      	beq.n	800a8fc <__sflush_r+0xac>
 800a870:	2300      	movs	r3, #0
 800a872:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a876:	682f      	ldr	r7, [r5, #0]
 800a878:	6a21      	ldr	r1, [r4, #32]
 800a87a:	602b      	str	r3, [r5, #0]
 800a87c:	d030      	beq.n	800a8e0 <__sflush_r+0x90>
 800a87e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	0759      	lsls	r1, r3, #29
 800a884:	d505      	bpl.n	800a892 <__sflush_r+0x42>
 800a886:	6863      	ldr	r3, [r4, #4]
 800a888:	1ad2      	subs	r2, r2, r3
 800a88a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a88c:	b10b      	cbz	r3, 800a892 <__sflush_r+0x42>
 800a88e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a890:	1ad2      	subs	r2, r2, r3
 800a892:	2300      	movs	r3, #0
 800a894:	4628      	mov	r0, r5
 800a896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a898:	6a21      	ldr	r1, [r4, #32]
 800a89a:	47b0      	blx	r6
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	d106      	bne.n	800a8b0 <__sflush_r+0x60>
 800a8a2:	6829      	ldr	r1, [r5, #0]
 800a8a4:	291d      	cmp	r1, #29
 800a8a6:	d82b      	bhi.n	800a900 <__sflush_r+0xb0>
 800a8a8:	4a28      	ldr	r2, [pc, #160]	@ (800a94c <__sflush_r+0xfc>)
 800a8aa:	410a      	asrs	r2, r1
 800a8ac:	07d6      	lsls	r6, r2, #31
 800a8ae:	d427      	bmi.n	800a900 <__sflush_r+0xb0>
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	6062      	str	r2, [r4, #4]
 800a8b4:	6922      	ldr	r2, [r4, #16]
 800a8b6:	04d9      	lsls	r1, r3, #19
 800a8b8:	6022      	str	r2, [r4, #0]
 800a8ba:	d504      	bpl.n	800a8c6 <__sflush_r+0x76>
 800a8bc:	1c42      	adds	r2, r0, #1
 800a8be:	d101      	bne.n	800a8c4 <__sflush_r+0x74>
 800a8c0:	682b      	ldr	r3, [r5, #0]
 800a8c2:	b903      	cbnz	r3, 800a8c6 <__sflush_r+0x76>
 800a8c4:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8c8:	602f      	str	r7, [r5, #0]
 800a8ca:	b1b9      	cbz	r1, 800a8fc <__sflush_r+0xac>
 800a8cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8d0:	4299      	cmp	r1, r3
 800a8d2:	d002      	beq.n	800a8da <__sflush_r+0x8a>
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	f7fd ff2b 	bl	8008730 <_free_r>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8de:	e00d      	b.n	800a8fc <__sflush_r+0xac>
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	47b0      	blx	r6
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	1c50      	adds	r0, r2, #1
 800a8ea:	d1c9      	bne.n	800a880 <__sflush_r+0x30>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0c6      	beq.n	800a880 <__sflush_r+0x30>
 800a8f2:	2b1d      	cmp	r3, #29
 800a8f4:	d001      	beq.n	800a8fa <__sflush_r+0xaa>
 800a8f6:	2b16      	cmp	r3, #22
 800a8f8:	d11d      	bne.n	800a936 <__sflush_r+0xe6>
 800a8fa:	602f      	str	r7, [r5, #0]
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e021      	b.n	800a944 <__sflush_r+0xf4>
 800a900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a904:	b21b      	sxth	r3, r3
 800a906:	e01a      	b.n	800a93e <__sflush_r+0xee>
 800a908:	690f      	ldr	r7, [r1, #16]
 800a90a:	2f00      	cmp	r7, #0
 800a90c:	d0f6      	beq.n	800a8fc <__sflush_r+0xac>
 800a90e:	0793      	lsls	r3, r2, #30
 800a910:	bf18      	it	ne
 800a912:	2300      	movne	r3, #0
 800a914:	680e      	ldr	r6, [r1, #0]
 800a916:	bf08      	it	eq
 800a918:	694b      	ldreq	r3, [r1, #20]
 800a91a:	1bf6      	subs	r6, r6, r7
 800a91c:	600f      	str	r7, [r1, #0]
 800a91e:	608b      	str	r3, [r1, #8]
 800a920:	2e00      	cmp	r6, #0
 800a922:	ddeb      	ble.n	800a8fc <__sflush_r+0xac>
 800a924:	4633      	mov	r3, r6
 800a926:	463a      	mov	r2, r7
 800a928:	4628      	mov	r0, r5
 800a92a:	6a21      	ldr	r1, [r4, #32]
 800a92c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a930:	47e0      	blx	ip
 800a932:	2800      	cmp	r0, #0
 800a934:	dc07      	bgt.n	800a946 <__sflush_r+0xf6>
 800a936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a93e:	f04f 30ff 	mov.w	r0, #4294967295
 800a942:	81a3      	strh	r3, [r4, #12]
 800a944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a946:	4407      	add	r7, r0
 800a948:	1a36      	subs	r6, r6, r0
 800a94a:	e7e9      	b.n	800a920 <__sflush_r+0xd0>
 800a94c:	dfbffffe 	.word	0xdfbffffe

0800a950 <_fflush_r>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	690b      	ldr	r3, [r1, #16]
 800a954:	4605      	mov	r5, r0
 800a956:	460c      	mov	r4, r1
 800a958:	b913      	cbnz	r3, 800a960 <_fflush_r+0x10>
 800a95a:	2500      	movs	r5, #0
 800a95c:	4628      	mov	r0, r5
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	b118      	cbz	r0, 800a96a <_fflush_r+0x1a>
 800a962:	6a03      	ldr	r3, [r0, #32]
 800a964:	b90b      	cbnz	r3, 800a96a <_fflush_r+0x1a>
 800a966:	f7fc ff29 	bl	80077bc <__sinit>
 800a96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0f3      	beq.n	800a95a <_fflush_r+0xa>
 800a972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a974:	07d0      	lsls	r0, r2, #31
 800a976:	d404      	bmi.n	800a982 <_fflush_r+0x32>
 800a978:	0599      	lsls	r1, r3, #22
 800a97a:	d402      	bmi.n	800a982 <_fflush_r+0x32>
 800a97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a97e:	f7fd f872 	bl	8007a66 <__retarget_lock_acquire_recursive>
 800a982:	4628      	mov	r0, r5
 800a984:	4621      	mov	r1, r4
 800a986:	f7ff ff63 	bl	800a850 <__sflush_r>
 800a98a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a98c:	4605      	mov	r5, r0
 800a98e:	07da      	lsls	r2, r3, #31
 800a990:	d4e4      	bmi.n	800a95c <_fflush_r+0xc>
 800a992:	89a3      	ldrh	r3, [r4, #12]
 800a994:	059b      	lsls	r3, r3, #22
 800a996:	d4e1      	bmi.n	800a95c <_fflush_r+0xc>
 800a998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a99a:	f7fd f865 	bl	8007a68 <__retarget_lock_release_recursive>
 800a99e:	e7dd      	b.n	800a95c <_fflush_r+0xc>

0800a9a0 <__sccl>:
 800a9a0:	b570      	push	{r4, r5, r6, lr}
 800a9a2:	780b      	ldrb	r3, [r1, #0]
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	2b5e      	cmp	r3, #94	@ 0x5e
 800a9a8:	bf0b      	itete	eq
 800a9aa:	784b      	ldrbeq	r3, [r1, #1]
 800a9ac:	1c4a      	addne	r2, r1, #1
 800a9ae:	1c8a      	addeq	r2, r1, #2
 800a9b0:	2100      	movne	r1, #0
 800a9b2:	bf08      	it	eq
 800a9b4:	2101      	moveq	r1, #1
 800a9b6:	3801      	subs	r0, #1
 800a9b8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a9bc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a9c0:	42a8      	cmp	r0, r5
 800a9c2:	d1fb      	bne.n	800a9bc <__sccl+0x1c>
 800a9c4:	b90b      	cbnz	r3, 800a9ca <__sccl+0x2a>
 800a9c6:	1e50      	subs	r0, r2, #1
 800a9c8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ca:	f081 0101 	eor.w	r1, r1, #1
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	54e1      	strb	r1, [r4, r3]
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a9d8:	2d2d      	cmp	r5, #45	@ 0x2d
 800a9da:	d005      	beq.n	800a9e8 <__sccl+0x48>
 800a9dc:	2d5d      	cmp	r5, #93	@ 0x5d
 800a9de:	d016      	beq.n	800aa0e <__sccl+0x6e>
 800a9e0:	2d00      	cmp	r5, #0
 800a9e2:	d0f1      	beq.n	800a9c8 <__sccl+0x28>
 800a9e4:	462b      	mov	r3, r5
 800a9e6:	e7f2      	b.n	800a9ce <__sccl+0x2e>
 800a9e8:	7846      	ldrb	r6, [r0, #1]
 800a9ea:	2e5d      	cmp	r6, #93	@ 0x5d
 800a9ec:	d0fa      	beq.n	800a9e4 <__sccl+0x44>
 800a9ee:	42b3      	cmp	r3, r6
 800a9f0:	dcf8      	bgt.n	800a9e4 <__sccl+0x44>
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	3002      	adds	r0, #2
 800a9f6:	3201      	adds	r2, #1
 800a9f8:	4296      	cmp	r6, r2
 800a9fa:	54a1      	strb	r1, [r4, r2]
 800a9fc:	dcfb      	bgt.n	800a9f6 <__sccl+0x56>
 800a9fe:	1af2      	subs	r2, r6, r3
 800aa00:	3a01      	subs	r2, #1
 800aa02:	42b3      	cmp	r3, r6
 800aa04:	bfa8      	it	ge
 800aa06:	2200      	movge	r2, #0
 800aa08:	1c5d      	adds	r5, r3, #1
 800aa0a:	18ab      	adds	r3, r5, r2
 800aa0c:	e7e1      	b.n	800a9d2 <__sccl+0x32>
 800aa0e:	4610      	mov	r0, r2
 800aa10:	e7da      	b.n	800a9c8 <__sccl+0x28>

0800aa12 <__submore>:
 800aa12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa16:	460c      	mov	r4, r1
 800aa18:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800aa1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa1e:	4299      	cmp	r1, r3
 800aa20:	d11b      	bne.n	800aa5a <__submore+0x48>
 800aa22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800aa26:	f7fd fef5 	bl	8008814 <_malloc_r>
 800aa2a:	b918      	cbnz	r0, 800aa34 <__submore+0x22>
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa38:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aa3a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800aa3e:	6360      	str	r0, [r4, #52]	@ 0x34
 800aa40:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800aa44:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800aa48:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800aa4c:	7043      	strb	r3, [r0, #1]
 800aa4e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800aa52:	7003      	strb	r3, [r0, #0]
 800aa54:	6020      	str	r0, [r4, #0]
 800aa56:	2000      	movs	r0, #0
 800aa58:	e7ea      	b.n	800aa30 <__submore+0x1e>
 800aa5a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800aa5c:	0077      	lsls	r7, r6, #1
 800aa5e:	463a      	mov	r2, r7
 800aa60:	f000 fbcb 	bl	800b1fa <_realloc_r>
 800aa64:	4605      	mov	r5, r0
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d0e0      	beq.n	800aa2c <__submore+0x1a>
 800aa6a:	eb00 0806 	add.w	r8, r0, r6
 800aa6e:	4601      	mov	r1, r0
 800aa70:	4632      	mov	r2, r6
 800aa72:	4640      	mov	r0, r8
 800aa74:	f000 f830 	bl	800aad8 <memcpy>
 800aa78:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800aa7c:	f8c4 8000 	str.w	r8, [r4]
 800aa80:	e7e9      	b.n	800aa56 <__submore+0x44>

0800aa82 <memmove>:
 800aa82:	4288      	cmp	r0, r1
 800aa84:	b510      	push	{r4, lr}
 800aa86:	eb01 0402 	add.w	r4, r1, r2
 800aa8a:	d902      	bls.n	800aa92 <memmove+0x10>
 800aa8c:	4284      	cmp	r4, r0
 800aa8e:	4623      	mov	r3, r4
 800aa90:	d807      	bhi.n	800aaa2 <memmove+0x20>
 800aa92:	1e43      	subs	r3, r0, #1
 800aa94:	42a1      	cmp	r1, r4
 800aa96:	d008      	beq.n	800aaaa <memmove+0x28>
 800aa98:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaa0:	e7f8      	b.n	800aa94 <memmove+0x12>
 800aaa2:	4601      	mov	r1, r0
 800aaa4:	4402      	add	r2, r0
 800aaa6:	428a      	cmp	r2, r1
 800aaa8:	d100      	bne.n	800aaac <memmove+0x2a>
 800aaaa:	bd10      	pop	{r4, pc}
 800aaac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aab0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aab4:	e7f7      	b.n	800aaa6 <memmove+0x24>
	...

0800aab8 <_sbrk_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	2300      	movs	r3, #0
 800aabc:	4d05      	ldr	r5, [pc, #20]	@ (800aad4 <_sbrk_r+0x1c>)
 800aabe:	4604      	mov	r4, r0
 800aac0:	4608      	mov	r0, r1
 800aac2:	602b      	str	r3, [r5, #0]
 800aac4:	f7f8 fd1a 	bl	80034fc <_sbrk>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_sbrk_r+0x1a>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_sbrk_r+0x1a>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	20000a84 	.word	0x20000a84

0800aad8 <memcpy>:
 800aad8:	440a      	add	r2, r1
 800aada:	4291      	cmp	r1, r2
 800aadc:	f100 33ff 	add.w	r3, r0, #4294967295
 800aae0:	d100      	bne.n	800aae4 <memcpy+0xc>
 800aae2:	4770      	bx	lr
 800aae4:	b510      	push	{r4, lr}
 800aae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaea:	4291      	cmp	r1, r2
 800aaec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaf0:	d1f9      	bne.n	800aae6 <memcpy+0xe>
 800aaf2:	bd10      	pop	{r4, pc}

0800aaf4 <nan>:
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	4901      	ldr	r1, [pc, #4]	@ (800aafc <nan+0x8>)
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	7ff80000 	.word	0x7ff80000

0800ab00 <__assert_func>:
 800ab00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab02:	4614      	mov	r4, r2
 800ab04:	461a      	mov	r2, r3
 800ab06:	4b09      	ldr	r3, [pc, #36]	@ (800ab2c <__assert_func+0x2c>)
 800ab08:	4605      	mov	r5, r0
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68d8      	ldr	r0, [r3, #12]
 800ab0e:	b954      	cbnz	r4, 800ab26 <__assert_func+0x26>
 800ab10:	4b07      	ldr	r3, [pc, #28]	@ (800ab30 <__assert_func+0x30>)
 800ab12:	461c      	mov	r4, r3
 800ab14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab18:	9100      	str	r1, [sp, #0]
 800ab1a:	462b      	mov	r3, r5
 800ab1c:	4905      	ldr	r1, [pc, #20]	@ (800ab34 <__assert_func+0x34>)
 800ab1e:	f000 fc19 	bl	800b354 <fiprintf>
 800ab22:	f000 fc29 	bl	800b378 <abort>
 800ab26:	4b04      	ldr	r3, [pc, #16]	@ (800ab38 <__assert_func+0x38>)
 800ab28:	e7f4      	b.n	800ab14 <__assert_func+0x14>
 800ab2a:	bf00      	nop
 800ab2c:	20000020 	.word	0x20000020
 800ab30:	0800c9d0 	.word	0x0800c9d0
 800ab34:	0800c9a2 	.word	0x0800c9a2
 800ab38:	0800c995 	.word	0x0800c995

0800ab3c <_calloc_r>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	fba1 5402 	umull	r5, r4, r1, r2
 800ab42:	b93c      	cbnz	r4, 800ab54 <_calloc_r+0x18>
 800ab44:	4629      	mov	r1, r5
 800ab46:	f7fd fe65 	bl	8008814 <_malloc_r>
 800ab4a:	4606      	mov	r6, r0
 800ab4c:	b928      	cbnz	r0, 800ab5a <_calloc_r+0x1e>
 800ab4e:	2600      	movs	r6, #0
 800ab50:	4630      	mov	r0, r6
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	220c      	movs	r2, #12
 800ab56:	6002      	str	r2, [r0, #0]
 800ab58:	e7f9      	b.n	800ab4e <_calloc_r+0x12>
 800ab5a:	462a      	mov	r2, r5
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	f7fc fef2 	bl	8007946 <memset>
 800ab62:	e7f5      	b.n	800ab50 <_calloc_r+0x14>

0800ab64 <rshift>:
 800ab64:	6903      	ldr	r3, [r0, #16]
 800ab66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab6e:	f100 0414 	add.w	r4, r0, #20
 800ab72:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab76:	dd46      	ble.n	800ac06 <rshift+0xa2>
 800ab78:	f011 011f 	ands.w	r1, r1, #31
 800ab7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab84:	d10c      	bne.n	800aba0 <rshift+0x3c>
 800ab86:	4629      	mov	r1, r5
 800ab88:	f100 0710 	add.w	r7, r0, #16
 800ab8c:	42b1      	cmp	r1, r6
 800ab8e:	d335      	bcc.n	800abfc <rshift+0x98>
 800ab90:	1a9b      	subs	r3, r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	1eea      	subs	r2, r5, #3
 800ab96:	4296      	cmp	r6, r2
 800ab98:	bf38      	it	cc
 800ab9a:	2300      	movcc	r3, #0
 800ab9c:	4423      	add	r3, r4
 800ab9e:	e015      	b.n	800abcc <rshift+0x68>
 800aba0:	46a1      	mov	r9, r4
 800aba2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aba6:	f1c1 0820 	rsb	r8, r1, #32
 800abaa:	40cf      	lsrs	r7, r1
 800abac:	f105 0e04 	add.w	lr, r5, #4
 800abb0:	4576      	cmp	r6, lr
 800abb2:	46f4      	mov	ip, lr
 800abb4:	d816      	bhi.n	800abe4 <rshift+0x80>
 800abb6:	1a9a      	subs	r2, r3, r2
 800abb8:	0092      	lsls	r2, r2, #2
 800abba:	3a04      	subs	r2, #4
 800abbc:	3501      	adds	r5, #1
 800abbe:	42ae      	cmp	r6, r5
 800abc0:	bf38      	it	cc
 800abc2:	2200      	movcc	r2, #0
 800abc4:	18a3      	adds	r3, r4, r2
 800abc6:	50a7      	str	r7, [r4, r2]
 800abc8:	b107      	cbz	r7, 800abcc <rshift+0x68>
 800abca:	3304      	adds	r3, #4
 800abcc:	42a3      	cmp	r3, r4
 800abce:	eba3 0204 	sub.w	r2, r3, r4
 800abd2:	bf08      	it	eq
 800abd4:	2300      	moveq	r3, #0
 800abd6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abda:	6102      	str	r2, [r0, #16]
 800abdc:	bf08      	it	eq
 800abde:	6143      	streq	r3, [r0, #20]
 800abe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abe4:	f8dc c000 	ldr.w	ip, [ip]
 800abe8:	fa0c fc08 	lsl.w	ip, ip, r8
 800abec:	ea4c 0707 	orr.w	r7, ip, r7
 800abf0:	f849 7b04 	str.w	r7, [r9], #4
 800abf4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abf8:	40cf      	lsrs	r7, r1
 800abfa:	e7d9      	b.n	800abb0 <rshift+0x4c>
 800abfc:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac00:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac04:	e7c2      	b.n	800ab8c <rshift+0x28>
 800ac06:	4623      	mov	r3, r4
 800ac08:	e7e0      	b.n	800abcc <rshift+0x68>

0800ac0a <__hexdig_fun>:
 800ac0a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ac0e:	2b09      	cmp	r3, #9
 800ac10:	d802      	bhi.n	800ac18 <__hexdig_fun+0xe>
 800ac12:	3820      	subs	r0, #32
 800ac14:	b2c0      	uxtb	r0, r0
 800ac16:	4770      	bx	lr
 800ac18:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac1c:	2b05      	cmp	r3, #5
 800ac1e:	d801      	bhi.n	800ac24 <__hexdig_fun+0x1a>
 800ac20:	3847      	subs	r0, #71	@ 0x47
 800ac22:	e7f7      	b.n	800ac14 <__hexdig_fun+0xa>
 800ac24:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac28:	2b05      	cmp	r3, #5
 800ac2a:	d801      	bhi.n	800ac30 <__hexdig_fun+0x26>
 800ac2c:	3827      	subs	r0, #39	@ 0x27
 800ac2e:	e7f1      	b.n	800ac14 <__hexdig_fun+0xa>
 800ac30:	2000      	movs	r0, #0
 800ac32:	4770      	bx	lr

0800ac34 <__gethex>:
 800ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac38:	468a      	mov	sl, r1
 800ac3a:	4690      	mov	r8, r2
 800ac3c:	b085      	sub	sp, #20
 800ac3e:	9302      	str	r3, [sp, #8]
 800ac40:	680b      	ldr	r3, [r1, #0]
 800ac42:	9001      	str	r0, [sp, #4]
 800ac44:	1c9c      	adds	r4, r3, #2
 800ac46:	46a1      	mov	r9, r4
 800ac48:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ac4c:	2830      	cmp	r0, #48	@ 0x30
 800ac4e:	d0fa      	beq.n	800ac46 <__gethex+0x12>
 800ac50:	eba9 0303 	sub.w	r3, r9, r3
 800ac54:	f1a3 0b02 	sub.w	fp, r3, #2
 800ac58:	f7ff ffd7 	bl	800ac0a <__hexdig_fun>
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d168      	bne.n	800ad34 <__gethex+0x100>
 800ac62:	2201      	movs	r2, #1
 800ac64:	4648      	mov	r0, r9
 800ac66:	499f      	ldr	r1, [pc, #636]	@ (800aee4 <__gethex+0x2b0>)
 800ac68:	f7fc fe75 	bl	8007956 <strncmp>
 800ac6c:	4607      	mov	r7, r0
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d167      	bne.n	800ad42 <__gethex+0x10e>
 800ac72:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ac76:	4626      	mov	r6, r4
 800ac78:	f7ff ffc7 	bl	800ac0a <__hexdig_fun>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d062      	beq.n	800ad46 <__gethex+0x112>
 800ac80:	4623      	mov	r3, r4
 800ac82:	7818      	ldrb	r0, [r3, #0]
 800ac84:	4699      	mov	r9, r3
 800ac86:	2830      	cmp	r0, #48	@ 0x30
 800ac88:	f103 0301 	add.w	r3, r3, #1
 800ac8c:	d0f9      	beq.n	800ac82 <__gethex+0x4e>
 800ac8e:	f7ff ffbc 	bl	800ac0a <__hexdig_fun>
 800ac92:	fab0 f580 	clz	r5, r0
 800ac96:	f04f 0b01 	mov.w	fp, #1
 800ac9a:	096d      	lsrs	r5, r5, #5
 800ac9c:	464a      	mov	r2, r9
 800ac9e:	4616      	mov	r6, r2
 800aca0:	7830      	ldrb	r0, [r6, #0]
 800aca2:	3201      	adds	r2, #1
 800aca4:	f7ff ffb1 	bl	800ac0a <__hexdig_fun>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d1f8      	bne.n	800ac9e <__gethex+0x6a>
 800acac:	2201      	movs	r2, #1
 800acae:	4630      	mov	r0, r6
 800acb0:	498c      	ldr	r1, [pc, #560]	@ (800aee4 <__gethex+0x2b0>)
 800acb2:	f7fc fe50 	bl	8007956 <strncmp>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d13f      	bne.n	800ad3a <__gethex+0x106>
 800acba:	b944      	cbnz	r4, 800acce <__gethex+0x9a>
 800acbc:	1c74      	adds	r4, r6, #1
 800acbe:	4622      	mov	r2, r4
 800acc0:	4616      	mov	r6, r2
 800acc2:	7830      	ldrb	r0, [r6, #0]
 800acc4:	3201      	adds	r2, #1
 800acc6:	f7ff ffa0 	bl	800ac0a <__hexdig_fun>
 800acca:	2800      	cmp	r0, #0
 800accc:	d1f8      	bne.n	800acc0 <__gethex+0x8c>
 800acce:	1ba4      	subs	r4, r4, r6
 800acd0:	00a7      	lsls	r7, r4, #2
 800acd2:	7833      	ldrb	r3, [r6, #0]
 800acd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800acd8:	2b50      	cmp	r3, #80	@ 0x50
 800acda:	d13e      	bne.n	800ad5a <__gethex+0x126>
 800acdc:	7873      	ldrb	r3, [r6, #1]
 800acde:	2b2b      	cmp	r3, #43	@ 0x2b
 800ace0:	d033      	beq.n	800ad4a <__gethex+0x116>
 800ace2:	2b2d      	cmp	r3, #45	@ 0x2d
 800ace4:	d034      	beq.n	800ad50 <__gethex+0x11c>
 800ace6:	2400      	movs	r4, #0
 800ace8:	1c71      	adds	r1, r6, #1
 800acea:	7808      	ldrb	r0, [r1, #0]
 800acec:	f7ff ff8d 	bl	800ac0a <__hexdig_fun>
 800acf0:	1e43      	subs	r3, r0, #1
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	2b18      	cmp	r3, #24
 800acf6:	d830      	bhi.n	800ad5a <__gethex+0x126>
 800acf8:	f1a0 0210 	sub.w	r2, r0, #16
 800acfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad00:	f7ff ff83 	bl	800ac0a <__hexdig_fun>
 800ad04:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad08:	fa5f fc8c 	uxtb.w	ip, ip
 800ad0c:	f1bc 0f18 	cmp.w	ip, #24
 800ad10:	f04f 030a 	mov.w	r3, #10
 800ad14:	d91e      	bls.n	800ad54 <__gethex+0x120>
 800ad16:	b104      	cbz	r4, 800ad1a <__gethex+0xe6>
 800ad18:	4252      	negs	r2, r2
 800ad1a:	4417      	add	r7, r2
 800ad1c:	f8ca 1000 	str.w	r1, [sl]
 800ad20:	b1ed      	cbz	r5, 800ad5e <__gethex+0x12a>
 800ad22:	f1bb 0f00 	cmp.w	fp, #0
 800ad26:	bf0c      	ite	eq
 800ad28:	2506      	moveq	r5, #6
 800ad2a:	2500      	movne	r5, #0
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	b005      	add	sp, #20
 800ad30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad34:	2500      	movs	r5, #0
 800ad36:	462c      	mov	r4, r5
 800ad38:	e7b0      	b.n	800ac9c <__gethex+0x68>
 800ad3a:	2c00      	cmp	r4, #0
 800ad3c:	d1c7      	bne.n	800acce <__gethex+0x9a>
 800ad3e:	4627      	mov	r7, r4
 800ad40:	e7c7      	b.n	800acd2 <__gethex+0x9e>
 800ad42:	464e      	mov	r6, r9
 800ad44:	462f      	mov	r7, r5
 800ad46:	2501      	movs	r5, #1
 800ad48:	e7c3      	b.n	800acd2 <__gethex+0x9e>
 800ad4a:	2400      	movs	r4, #0
 800ad4c:	1cb1      	adds	r1, r6, #2
 800ad4e:	e7cc      	b.n	800acea <__gethex+0xb6>
 800ad50:	2401      	movs	r4, #1
 800ad52:	e7fb      	b.n	800ad4c <__gethex+0x118>
 800ad54:	fb03 0002 	mla	r0, r3, r2, r0
 800ad58:	e7ce      	b.n	800acf8 <__gethex+0xc4>
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	e7de      	b.n	800ad1c <__gethex+0xe8>
 800ad5e:	4629      	mov	r1, r5
 800ad60:	eba6 0309 	sub.w	r3, r6, r9
 800ad64:	3b01      	subs	r3, #1
 800ad66:	2b07      	cmp	r3, #7
 800ad68:	dc0a      	bgt.n	800ad80 <__gethex+0x14c>
 800ad6a:	9801      	ldr	r0, [sp, #4]
 800ad6c:	f7fd fdde 	bl	800892c <_Balloc>
 800ad70:	4604      	mov	r4, r0
 800ad72:	b940      	cbnz	r0, 800ad86 <__gethex+0x152>
 800ad74:	4602      	mov	r2, r0
 800ad76:	21e4      	movs	r1, #228	@ 0xe4
 800ad78:	4b5b      	ldr	r3, [pc, #364]	@ (800aee8 <__gethex+0x2b4>)
 800ad7a:	485c      	ldr	r0, [pc, #368]	@ (800aeec <__gethex+0x2b8>)
 800ad7c:	f7ff fec0 	bl	800ab00 <__assert_func>
 800ad80:	3101      	adds	r1, #1
 800ad82:	105b      	asrs	r3, r3, #1
 800ad84:	e7ef      	b.n	800ad66 <__gethex+0x132>
 800ad86:	2300      	movs	r3, #0
 800ad88:	f100 0a14 	add.w	sl, r0, #20
 800ad8c:	4655      	mov	r5, sl
 800ad8e:	469b      	mov	fp, r3
 800ad90:	45b1      	cmp	r9, r6
 800ad92:	d337      	bcc.n	800ae04 <__gethex+0x1d0>
 800ad94:	f845 bb04 	str.w	fp, [r5], #4
 800ad98:	eba5 050a 	sub.w	r5, r5, sl
 800ad9c:	10ad      	asrs	r5, r5, #2
 800ad9e:	6125      	str	r5, [r4, #16]
 800ada0:	4658      	mov	r0, fp
 800ada2:	f7fd feb5 	bl	8008b10 <__hi0bits>
 800ada6:	016d      	lsls	r5, r5, #5
 800ada8:	f8d8 6000 	ldr.w	r6, [r8]
 800adac:	1a2d      	subs	r5, r5, r0
 800adae:	42b5      	cmp	r5, r6
 800adb0:	dd54      	ble.n	800ae5c <__gethex+0x228>
 800adb2:	1bad      	subs	r5, r5, r6
 800adb4:	4629      	mov	r1, r5
 800adb6:	4620      	mov	r0, r4
 800adb8:	f7fe fa3d 	bl	8009236 <__any_on>
 800adbc:	4681      	mov	r9, r0
 800adbe:	b178      	cbz	r0, 800ade0 <__gethex+0x1ac>
 800adc0:	f04f 0901 	mov.w	r9, #1
 800adc4:	1e6b      	subs	r3, r5, #1
 800adc6:	1159      	asrs	r1, r3, #5
 800adc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800adcc:	f003 021f 	and.w	r2, r3, #31
 800add0:	fa09 f202 	lsl.w	r2, r9, r2
 800add4:	420a      	tst	r2, r1
 800add6:	d003      	beq.n	800ade0 <__gethex+0x1ac>
 800add8:	454b      	cmp	r3, r9
 800adda:	dc36      	bgt.n	800ae4a <__gethex+0x216>
 800addc:	f04f 0902 	mov.w	r9, #2
 800ade0:	4629      	mov	r1, r5
 800ade2:	4620      	mov	r0, r4
 800ade4:	f7ff febe 	bl	800ab64 <rshift>
 800ade8:	442f      	add	r7, r5
 800adea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adee:	42bb      	cmp	r3, r7
 800adf0:	da42      	bge.n	800ae78 <__gethex+0x244>
 800adf2:	4621      	mov	r1, r4
 800adf4:	9801      	ldr	r0, [sp, #4]
 800adf6:	f7fd fdd9 	bl	80089ac <_Bfree>
 800adfa:	2300      	movs	r3, #0
 800adfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adfe:	25a3      	movs	r5, #163	@ 0xa3
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	e793      	b.n	800ad2c <__gethex+0xf8>
 800ae04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ae08:	2a2e      	cmp	r2, #46	@ 0x2e
 800ae0a:	d012      	beq.n	800ae32 <__gethex+0x1fe>
 800ae0c:	2b20      	cmp	r3, #32
 800ae0e:	d104      	bne.n	800ae1a <__gethex+0x1e6>
 800ae10:	f845 bb04 	str.w	fp, [r5], #4
 800ae14:	f04f 0b00 	mov.w	fp, #0
 800ae18:	465b      	mov	r3, fp
 800ae1a:	7830      	ldrb	r0, [r6, #0]
 800ae1c:	9303      	str	r3, [sp, #12]
 800ae1e:	f7ff fef4 	bl	800ac0a <__hexdig_fun>
 800ae22:	9b03      	ldr	r3, [sp, #12]
 800ae24:	f000 000f 	and.w	r0, r0, #15
 800ae28:	4098      	lsls	r0, r3
 800ae2a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae2e:	3304      	adds	r3, #4
 800ae30:	e7ae      	b.n	800ad90 <__gethex+0x15c>
 800ae32:	45b1      	cmp	r9, r6
 800ae34:	d8ea      	bhi.n	800ae0c <__gethex+0x1d8>
 800ae36:	2201      	movs	r2, #1
 800ae38:	4630      	mov	r0, r6
 800ae3a:	492a      	ldr	r1, [pc, #168]	@ (800aee4 <__gethex+0x2b0>)
 800ae3c:	9303      	str	r3, [sp, #12]
 800ae3e:	f7fc fd8a 	bl	8007956 <strncmp>
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d1e1      	bne.n	800ae0c <__gethex+0x1d8>
 800ae48:	e7a2      	b.n	800ad90 <__gethex+0x15c>
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	1ea9      	subs	r1, r5, #2
 800ae4e:	f7fe f9f2 	bl	8009236 <__any_on>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d0c2      	beq.n	800addc <__gethex+0x1a8>
 800ae56:	f04f 0903 	mov.w	r9, #3
 800ae5a:	e7c1      	b.n	800ade0 <__gethex+0x1ac>
 800ae5c:	da09      	bge.n	800ae72 <__gethex+0x23e>
 800ae5e:	1b75      	subs	r5, r6, r5
 800ae60:	4621      	mov	r1, r4
 800ae62:	462a      	mov	r2, r5
 800ae64:	9801      	ldr	r0, [sp, #4]
 800ae66:	f7fd ffb7 	bl	8008dd8 <__lshift>
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	1b7f      	subs	r7, r7, r5
 800ae6e:	f100 0a14 	add.w	sl, r0, #20
 800ae72:	f04f 0900 	mov.w	r9, #0
 800ae76:	e7b8      	b.n	800adea <__gethex+0x1b6>
 800ae78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae7c:	42bd      	cmp	r5, r7
 800ae7e:	dd6f      	ble.n	800af60 <__gethex+0x32c>
 800ae80:	1bed      	subs	r5, r5, r7
 800ae82:	42ae      	cmp	r6, r5
 800ae84:	dc34      	bgt.n	800aef0 <__gethex+0x2bc>
 800ae86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d022      	beq.n	800aed4 <__gethex+0x2a0>
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d024      	beq.n	800aedc <__gethex+0x2a8>
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d115      	bne.n	800aec2 <__gethex+0x28e>
 800ae96:	42ae      	cmp	r6, r5
 800ae98:	d113      	bne.n	800aec2 <__gethex+0x28e>
 800ae9a:	2e01      	cmp	r6, #1
 800ae9c:	d10b      	bne.n	800aeb6 <__gethex+0x282>
 800ae9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aea2:	9a02      	ldr	r2, [sp, #8]
 800aea4:	2562      	movs	r5, #98	@ 0x62
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	2301      	movs	r3, #1
 800aeaa:	6123      	str	r3, [r4, #16]
 800aeac:	f8ca 3000 	str.w	r3, [sl]
 800aeb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aeb2:	601c      	str	r4, [r3, #0]
 800aeb4:	e73a      	b.n	800ad2c <__gethex+0xf8>
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	1e71      	subs	r1, r6, #1
 800aeba:	f7fe f9bc 	bl	8009236 <__any_on>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d1ed      	bne.n	800ae9e <__gethex+0x26a>
 800aec2:	4621      	mov	r1, r4
 800aec4:	9801      	ldr	r0, [sp, #4]
 800aec6:	f7fd fd71 	bl	80089ac <_Bfree>
 800aeca:	2300      	movs	r3, #0
 800aecc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aece:	2550      	movs	r5, #80	@ 0x50
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	e72b      	b.n	800ad2c <__gethex+0xf8>
 800aed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1f3      	bne.n	800aec2 <__gethex+0x28e>
 800aeda:	e7e0      	b.n	800ae9e <__gethex+0x26a>
 800aedc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1dd      	bne.n	800ae9e <__gethex+0x26a>
 800aee2:	e7ee      	b.n	800aec2 <__gethex+0x28e>
 800aee4:	0800c808 	.word	0x0800c808
 800aee8:	0800c6a1 	.word	0x0800c6a1
 800aeec:	0800c9d1 	.word	0x0800c9d1
 800aef0:	1e6f      	subs	r7, r5, #1
 800aef2:	f1b9 0f00 	cmp.w	r9, #0
 800aef6:	d130      	bne.n	800af5a <__gethex+0x326>
 800aef8:	b127      	cbz	r7, 800af04 <__gethex+0x2d0>
 800aefa:	4639      	mov	r1, r7
 800aefc:	4620      	mov	r0, r4
 800aefe:	f7fe f99a 	bl	8009236 <__any_on>
 800af02:	4681      	mov	r9, r0
 800af04:	2301      	movs	r3, #1
 800af06:	4629      	mov	r1, r5
 800af08:	1b76      	subs	r6, r6, r5
 800af0a:	2502      	movs	r5, #2
 800af0c:	117a      	asrs	r2, r7, #5
 800af0e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af12:	f007 071f 	and.w	r7, r7, #31
 800af16:	40bb      	lsls	r3, r7
 800af18:	4213      	tst	r3, r2
 800af1a:	4620      	mov	r0, r4
 800af1c:	bf18      	it	ne
 800af1e:	f049 0902 	orrne.w	r9, r9, #2
 800af22:	f7ff fe1f 	bl	800ab64 <rshift>
 800af26:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af2a:	f1b9 0f00 	cmp.w	r9, #0
 800af2e:	d047      	beq.n	800afc0 <__gethex+0x38c>
 800af30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af34:	2b02      	cmp	r3, #2
 800af36:	d015      	beq.n	800af64 <__gethex+0x330>
 800af38:	2b03      	cmp	r3, #3
 800af3a:	d017      	beq.n	800af6c <__gethex+0x338>
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d109      	bne.n	800af54 <__gethex+0x320>
 800af40:	f019 0f02 	tst.w	r9, #2
 800af44:	d006      	beq.n	800af54 <__gethex+0x320>
 800af46:	f8da 3000 	ldr.w	r3, [sl]
 800af4a:	ea49 0903 	orr.w	r9, r9, r3
 800af4e:	f019 0f01 	tst.w	r9, #1
 800af52:	d10e      	bne.n	800af72 <__gethex+0x33e>
 800af54:	f045 0510 	orr.w	r5, r5, #16
 800af58:	e032      	b.n	800afc0 <__gethex+0x38c>
 800af5a:	f04f 0901 	mov.w	r9, #1
 800af5e:	e7d1      	b.n	800af04 <__gethex+0x2d0>
 800af60:	2501      	movs	r5, #1
 800af62:	e7e2      	b.n	800af2a <__gethex+0x2f6>
 800af64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af66:	f1c3 0301 	rsb	r3, r3, #1
 800af6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0f0      	beq.n	800af54 <__gethex+0x320>
 800af72:	f04f 0c00 	mov.w	ip, #0
 800af76:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af7a:	f104 0314 	add.w	r3, r4, #20
 800af7e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af82:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af86:	4618      	mov	r0, r3
 800af88:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af90:	d01b      	beq.n	800afca <__gethex+0x396>
 800af92:	3201      	adds	r2, #1
 800af94:	6002      	str	r2, [r0, #0]
 800af96:	2d02      	cmp	r5, #2
 800af98:	f104 0314 	add.w	r3, r4, #20
 800af9c:	d13c      	bne.n	800b018 <__gethex+0x3e4>
 800af9e:	f8d8 2000 	ldr.w	r2, [r8]
 800afa2:	3a01      	subs	r2, #1
 800afa4:	42b2      	cmp	r2, r6
 800afa6:	d109      	bne.n	800afbc <__gethex+0x388>
 800afa8:	2201      	movs	r2, #1
 800afaa:	1171      	asrs	r1, r6, #5
 800afac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afb0:	f006 061f 	and.w	r6, r6, #31
 800afb4:	fa02 f606 	lsl.w	r6, r2, r6
 800afb8:	421e      	tst	r6, r3
 800afba:	d13a      	bne.n	800b032 <__gethex+0x3fe>
 800afbc:	f045 0520 	orr.w	r5, r5, #32
 800afc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afc2:	601c      	str	r4, [r3, #0]
 800afc4:	9b02      	ldr	r3, [sp, #8]
 800afc6:	601f      	str	r7, [r3, #0]
 800afc8:	e6b0      	b.n	800ad2c <__gethex+0xf8>
 800afca:	4299      	cmp	r1, r3
 800afcc:	f843 cc04 	str.w	ip, [r3, #-4]
 800afd0:	d8d9      	bhi.n	800af86 <__gethex+0x352>
 800afd2:	68a3      	ldr	r3, [r4, #8]
 800afd4:	459b      	cmp	fp, r3
 800afd6:	db17      	blt.n	800b008 <__gethex+0x3d4>
 800afd8:	6861      	ldr	r1, [r4, #4]
 800afda:	9801      	ldr	r0, [sp, #4]
 800afdc:	3101      	adds	r1, #1
 800afde:	f7fd fca5 	bl	800892c <_Balloc>
 800afe2:	4681      	mov	r9, r0
 800afe4:	b918      	cbnz	r0, 800afee <__gethex+0x3ba>
 800afe6:	4602      	mov	r2, r0
 800afe8:	2184      	movs	r1, #132	@ 0x84
 800afea:	4b19      	ldr	r3, [pc, #100]	@ (800b050 <__gethex+0x41c>)
 800afec:	e6c5      	b.n	800ad7a <__gethex+0x146>
 800afee:	6922      	ldr	r2, [r4, #16]
 800aff0:	f104 010c 	add.w	r1, r4, #12
 800aff4:	3202      	adds	r2, #2
 800aff6:	0092      	lsls	r2, r2, #2
 800aff8:	300c      	adds	r0, #12
 800affa:	f7ff fd6d 	bl	800aad8 <memcpy>
 800affe:	4621      	mov	r1, r4
 800b000:	9801      	ldr	r0, [sp, #4]
 800b002:	f7fd fcd3 	bl	80089ac <_Bfree>
 800b006:	464c      	mov	r4, r9
 800b008:	6923      	ldr	r3, [r4, #16]
 800b00a:	1c5a      	adds	r2, r3, #1
 800b00c:	6122      	str	r2, [r4, #16]
 800b00e:	2201      	movs	r2, #1
 800b010:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b014:	615a      	str	r2, [r3, #20]
 800b016:	e7be      	b.n	800af96 <__gethex+0x362>
 800b018:	6922      	ldr	r2, [r4, #16]
 800b01a:	455a      	cmp	r2, fp
 800b01c:	dd0b      	ble.n	800b036 <__gethex+0x402>
 800b01e:	2101      	movs	r1, #1
 800b020:	4620      	mov	r0, r4
 800b022:	f7ff fd9f 	bl	800ab64 <rshift>
 800b026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b02a:	3701      	adds	r7, #1
 800b02c:	42bb      	cmp	r3, r7
 800b02e:	f6ff aee0 	blt.w	800adf2 <__gethex+0x1be>
 800b032:	2501      	movs	r5, #1
 800b034:	e7c2      	b.n	800afbc <__gethex+0x388>
 800b036:	f016 061f 	ands.w	r6, r6, #31
 800b03a:	d0fa      	beq.n	800b032 <__gethex+0x3fe>
 800b03c:	4453      	add	r3, sl
 800b03e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b042:	f7fd fd65 	bl	8008b10 <__hi0bits>
 800b046:	f1c6 0620 	rsb	r6, r6, #32
 800b04a:	42b0      	cmp	r0, r6
 800b04c:	dbe7      	blt.n	800b01e <__gethex+0x3ea>
 800b04e:	e7f0      	b.n	800b032 <__gethex+0x3fe>
 800b050:	0800c6a1 	.word	0x0800c6a1

0800b054 <L_shift>:
 800b054:	f1c2 0208 	rsb	r2, r2, #8
 800b058:	0092      	lsls	r2, r2, #2
 800b05a:	b570      	push	{r4, r5, r6, lr}
 800b05c:	f1c2 0620 	rsb	r6, r2, #32
 800b060:	6843      	ldr	r3, [r0, #4]
 800b062:	6804      	ldr	r4, [r0, #0]
 800b064:	fa03 f506 	lsl.w	r5, r3, r6
 800b068:	432c      	orrs	r4, r5
 800b06a:	40d3      	lsrs	r3, r2
 800b06c:	6004      	str	r4, [r0, #0]
 800b06e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b072:	4288      	cmp	r0, r1
 800b074:	d3f4      	bcc.n	800b060 <L_shift+0xc>
 800b076:	bd70      	pop	{r4, r5, r6, pc}

0800b078 <__match>:
 800b078:	b530      	push	{r4, r5, lr}
 800b07a:	6803      	ldr	r3, [r0, #0]
 800b07c:	3301      	adds	r3, #1
 800b07e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b082:	b914      	cbnz	r4, 800b08a <__match+0x12>
 800b084:	6003      	str	r3, [r0, #0]
 800b086:	2001      	movs	r0, #1
 800b088:	bd30      	pop	{r4, r5, pc}
 800b08a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b08e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b092:	2d19      	cmp	r5, #25
 800b094:	bf98      	it	ls
 800b096:	3220      	addls	r2, #32
 800b098:	42a2      	cmp	r2, r4
 800b09a:	d0f0      	beq.n	800b07e <__match+0x6>
 800b09c:	2000      	movs	r0, #0
 800b09e:	e7f3      	b.n	800b088 <__match+0x10>

0800b0a0 <__hexnan>:
 800b0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	2500      	movs	r5, #0
 800b0a6:	680b      	ldr	r3, [r1, #0]
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	115e      	asrs	r6, r3, #5
 800b0ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b0b0:	f013 031f 	ands.w	r3, r3, #31
 800b0b4:	bf18      	it	ne
 800b0b6:	3604      	addne	r6, #4
 800b0b8:	1f37      	subs	r7, r6, #4
 800b0ba:	4690      	mov	r8, r2
 800b0bc:	46b9      	mov	r9, r7
 800b0be:	463c      	mov	r4, r7
 800b0c0:	46ab      	mov	fp, r5
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	6801      	ldr	r1, [r0, #0]
 800b0c6:	9301      	str	r3, [sp, #4]
 800b0c8:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0cc:	9502      	str	r5, [sp, #8]
 800b0ce:	784a      	ldrb	r2, [r1, #1]
 800b0d0:	1c4b      	adds	r3, r1, #1
 800b0d2:	9303      	str	r3, [sp, #12]
 800b0d4:	b342      	cbz	r2, 800b128 <__hexnan+0x88>
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	9105      	str	r1, [sp, #20]
 800b0da:	9204      	str	r2, [sp, #16]
 800b0dc:	f7ff fd95 	bl	800ac0a <__hexdig_fun>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d151      	bne.n	800b188 <__hexnan+0xe8>
 800b0e4:	9a04      	ldr	r2, [sp, #16]
 800b0e6:	9905      	ldr	r1, [sp, #20]
 800b0e8:	2a20      	cmp	r2, #32
 800b0ea:	d818      	bhi.n	800b11e <__hexnan+0x7e>
 800b0ec:	9b02      	ldr	r3, [sp, #8]
 800b0ee:	459b      	cmp	fp, r3
 800b0f0:	dd13      	ble.n	800b11a <__hexnan+0x7a>
 800b0f2:	454c      	cmp	r4, r9
 800b0f4:	d206      	bcs.n	800b104 <__hexnan+0x64>
 800b0f6:	2d07      	cmp	r5, #7
 800b0f8:	dc04      	bgt.n	800b104 <__hexnan+0x64>
 800b0fa:	462a      	mov	r2, r5
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7ff ffa8 	bl	800b054 <L_shift>
 800b104:	4544      	cmp	r4, r8
 800b106:	d952      	bls.n	800b1ae <__hexnan+0x10e>
 800b108:	2300      	movs	r3, #0
 800b10a:	f1a4 0904 	sub.w	r9, r4, #4
 800b10e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b112:	461d      	mov	r5, r3
 800b114:	464c      	mov	r4, r9
 800b116:	f8cd b008 	str.w	fp, [sp, #8]
 800b11a:	9903      	ldr	r1, [sp, #12]
 800b11c:	e7d7      	b.n	800b0ce <__hexnan+0x2e>
 800b11e:	2a29      	cmp	r2, #41	@ 0x29
 800b120:	d157      	bne.n	800b1d2 <__hexnan+0x132>
 800b122:	3102      	adds	r1, #2
 800b124:	f8ca 1000 	str.w	r1, [sl]
 800b128:	f1bb 0f00 	cmp.w	fp, #0
 800b12c:	d051      	beq.n	800b1d2 <__hexnan+0x132>
 800b12e:	454c      	cmp	r4, r9
 800b130:	d206      	bcs.n	800b140 <__hexnan+0xa0>
 800b132:	2d07      	cmp	r5, #7
 800b134:	dc04      	bgt.n	800b140 <__hexnan+0xa0>
 800b136:	462a      	mov	r2, r5
 800b138:	4649      	mov	r1, r9
 800b13a:	4620      	mov	r0, r4
 800b13c:	f7ff ff8a 	bl	800b054 <L_shift>
 800b140:	4544      	cmp	r4, r8
 800b142:	d936      	bls.n	800b1b2 <__hexnan+0x112>
 800b144:	4623      	mov	r3, r4
 800b146:	f1a8 0204 	sub.w	r2, r8, #4
 800b14a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b14e:	429f      	cmp	r7, r3
 800b150:	f842 1f04 	str.w	r1, [r2, #4]!
 800b154:	d2f9      	bcs.n	800b14a <__hexnan+0xaa>
 800b156:	1b3b      	subs	r3, r7, r4
 800b158:	f023 0303 	bic.w	r3, r3, #3
 800b15c:	3304      	adds	r3, #4
 800b15e:	3401      	adds	r4, #1
 800b160:	3e03      	subs	r6, #3
 800b162:	42b4      	cmp	r4, r6
 800b164:	bf88      	it	hi
 800b166:	2304      	movhi	r3, #4
 800b168:	2200      	movs	r2, #0
 800b16a:	4443      	add	r3, r8
 800b16c:	f843 2b04 	str.w	r2, [r3], #4
 800b170:	429f      	cmp	r7, r3
 800b172:	d2fb      	bcs.n	800b16c <__hexnan+0xcc>
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	b91b      	cbnz	r3, 800b180 <__hexnan+0xe0>
 800b178:	4547      	cmp	r7, r8
 800b17a:	d128      	bne.n	800b1ce <__hexnan+0x12e>
 800b17c:	2301      	movs	r3, #1
 800b17e:	603b      	str	r3, [r7, #0]
 800b180:	2005      	movs	r0, #5
 800b182:	b007      	add	sp, #28
 800b184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b188:	3501      	adds	r5, #1
 800b18a:	2d08      	cmp	r5, #8
 800b18c:	f10b 0b01 	add.w	fp, fp, #1
 800b190:	dd06      	ble.n	800b1a0 <__hexnan+0x100>
 800b192:	4544      	cmp	r4, r8
 800b194:	d9c1      	bls.n	800b11a <__hexnan+0x7a>
 800b196:	2300      	movs	r3, #0
 800b198:	2501      	movs	r5, #1
 800b19a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b19e:	3c04      	subs	r4, #4
 800b1a0:	6822      	ldr	r2, [r4, #0]
 800b1a2:	f000 000f 	and.w	r0, r0, #15
 800b1a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b1aa:	6020      	str	r0, [r4, #0]
 800b1ac:	e7b5      	b.n	800b11a <__hexnan+0x7a>
 800b1ae:	2508      	movs	r5, #8
 800b1b0:	e7b3      	b.n	800b11a <__hexnan+0x7a>
 800b1b2:	9b01      	ldr	r3, [sp, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d0dd      	beq.n	800b174 <__hexnan+0xd4>
 800b1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1bc:	f1c3 0320 	rsb	r3, r3, #32
 800b1c0:	40da      	lsrs	r2, r3
 800b1c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1cc:	e7d2      	b.n	800b174 <__hexnan+0xd4>
 800b1ce:	3f04      	subs	r7, #4
 800b1d0:	e7d0      	b.n	800b174 <__hexnan+0xd4>
 800b1d2:	2004      	movs	r0, #4
 800b1d4:	e7d5      	b.n	800b182 <__hexnan+0xe2>

0800b1d6 <__ascii_mbtowc>:
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	b901      	cbnz	r1, 800b1dc <__ascii_mbtowc+0x6>
 800b1da:	a901      	add	r1, sp, #4
 800b1dc:	b142      	cbz	r2, 800b1f0 <__ascii_mbtowc+0x1a>
 800b1de:	b14b      	cbz	r3, 800b1f4 <__ascii_mbtowc+0x1e>
 800b1e0:	7813      	ldrb	r3, [r2, #0]
 800b1e2:	600b      	str	r3, [r1, #0]
 800b1e4:	7812      	ldrb	r2, [r2, #0]
 800b1e6:	1e10      	subs	r0, r2, #0
 800b1e8:	bf18      	it	ne
 800b1ea:	2001      	movne	r0, #1
 800b1ec:	b002      	add	sp, #8
 800b1ee:	4770      	bx	lr
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	e7fb      	b.n	800b1ec <__ascii_mbtowc+0x16>
 800b1f4:	f06f 0001 	mvn.w	r0, #1
 800b1f8:	e7f8      	b.n	800b1ec <__ascii_mbtowc+0x16>

0800b1fa <_realloc_r>:
 800b1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fe:	4680      	mov	r8, r0
 800b200:	4615      	mov	r5, r2
 800b202:	460c      	mov	r4, r1
 800b204:	b921      	cbnz	r1, 800b210 <_realloc_r+0x16>
 800b206:	4611      	mov	r1, r2
 800b208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b20c:	f7fd bb02 	b.w	8008814 <_malloc_r>
 800b210:	b92a      	cbnz	r2, 800b21e <_realloc_r+0x24>
 800b212:	f7fd fa8d 	bl	8008730 <_free_r>
 800b216:	2400      	movs	r4, #0
 800b218:	4620      	mov	r0, r4
 800b21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b21e:	f000 f8b2 	bl	800b386 <_malloc_usable_size_r>
 800b222:	4285      	cmp	r5, r0
 800b224:	4606      	mov	r6, r0
 800b226:	d802      	bhi.n	800b22e <_realloc_r+0x34>
 800b228:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b22c:	d8f4      	bhi.n	800b218 <_realloc_r+0x1e>
 800b22e:	4629      	mov	r1, r5
 800b230:	4640      	mov	r0, r8
 800b232:	f7fd faef 	bl	8008814 <_malloc_r>
 800b236:	4607      	mov	r7, r0
 800b238:	2800      	cmp	r0, #0
 800b23a:	d0ec      	beq.n	800b216 <_realloc_r+0x1c>
 800b23c:	42b5      	cmp	r5, r6
 800b23e:	462a      	mov	r2, r5
 800b240:	4621      	mov	r1, r4
 800b242:	bf28      	it	cs
 800b244:	4632      	movcs	r2, r6
 800b246:	f7ff fc47 	bl	800aad8 <memcpy>
 800b24a:	4621      	mov	r1, r4
 800b24c:	4640      	mov	r0, r8
 800b24e:	f7fd fa6f 	bl	8008730 <_free_r>
 800b252:	463c      	mov	r4, r7
 800b254:	e7e0      	b.n	800b218 <_realloc_r+0x1e>
	...

0800b258 <_strtoul_l.constprop.0>:
 800b258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b25c:	4686      	mov	lr, r0
 800b25e:	460d      	mov	r5, r1
 800b260:	4e33      	ldr	r6, [pc, #204]	@ (800b330 <_strtoul_l.constprop.0+0xd8>)
 800b262:	4628      	mov	r0, r5
 800b264:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b268:	5d37      	ldrb	r7, [r6, r4]
 800b26a:	f017 0708 	ands.w	r7, r7, #8
 800b26e:	d1f8      	bne.n	800b262 <_strtoul_l.constprop.0+0xa>
 800b270:	2c2d      	cmp	r4, #45	@ 0x2d
 800b272:	d12f      	bne.n	800b2d4 <_strtoul_l.constprop.0+0x7c>
 800b274:	2701      	movs	r7, #1
 800b276:	782c      	ldrb	r4, [r5, #0]
 800b278:	1c85      	adds	r5, r0, #2
 800b27a:	f033 0010 	bics.w	r0, r3, #16
 800b27e:	d109      	bne.n	800b294 <_strtoul_l.constprop.0+0x3c>
 800b280:	2c30      	cmp	r4, #48	@ 0x30
 800b282:	d12c      	bne.n	800b2de <_strtoul_l.constprop.0+0x86>
 800b284:	7828      	ldrb	r0, [r5, #0]
 800b286:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b28a:	2858      	cmp	r0, #88	@ 0x58
 800b28c:	d127      	bne.n	800b2de <_strtoul_l.constprop.0+0x86>
 800b28e:	2310      	movs	r3, #16
 800b290:	786c      	ldrb	r4, [r5, #1]
 800b292:	3502      	adds	r5, #2
 800b294:	f04f 38ff 	mov.w	r8, #4294967295
 800b298:	fbb8 f8f3 	udiv	r8, r8, r3
 800b29c:	2600      	movs	r6, #0
 800b29e:	fb03 f908 	mul.w	r9, r3, r8
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	ea6f 0909 	mvn.w	r9, r9
 800b2a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b2ac:	f1bc 0f09 	cmp.w	ip, #9
 800b2b0:	d81c      	bhi.n	800b2ec <_strtoul_l.constprop.0+0x94>
 800b2b2:	4664      	mov	r4, ip
 800b2b4:	42a3      	cmp	r3, r4
 800b2b6:	dd2a      	ble.n	800b30e <_strtoul_l.constprop.0+0xb6>
 800b2b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b2bc:	d007      	beq.n	800b2ce <_strtoul_l.constprop.0+0x76>
 800b2be:	4580      	cmp	r8, r0
 800b2c0:	d322      	bcc.n	800b308 <_strtoul_l.constprop.0+0xb0>
 800b2c2:	d101      	bne.n	800b2c8 <_strtoul_l.constprop.0+0x70>
 800b2c4:	45a1      	cmp	r9, r4
 800b2c6:	db1f      	blt.n	800b308 <_strtoul_l.constprop.0+0xb0>
 800b2c8:	2601      	movs	r6, #1
 800b2ca:	fb00 4003 	mla	r0, r0, r3, r4
 800b2ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2d2:	e7e9      	b.n	800b2a8 <_strtoul_l.constprop.0+0x50>
 800b2d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2d6:	bf04      	itt	eq
 800b2d8:	782c      	ldrbeq	r4, [r5, #0]
 800b2da:	1c85      	addeq	r5, r0, #2
 800b2dc:	e7cd      	b.n	800b27a <_strtoul_l.constprop.0+0x22>
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1d8      	bne.n	800b294 <_strtoul_l.constprop.0+0x3c>
 800b2e2:	2c30      	cmp	r4, #48	@ 0x30
 800b2e4:	bf0c      	ite	eq
 800b2e6:	2308      	moveq	r3, #8
 800b2e8:	230a      	movne	r3, #10
 800b2ea:	e7d3      	b.n	800b294 <_strtoul_l.constprop.0+0x3c>
 800b2ec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b2f0:	f1bc 0f19 	cmp.w	ip, #25
 800b2f4:	d801      	bhi.n	800b2fa <_strtoul_l.constprop.0+0xa2>
 800b2f6:	3c37      	subs	r4, #55	@ 0x37
 800b2f8:	e7dc      	b.n	800b2b4 <_strtoul_l.constprop.0+0x5c>
 800b2fa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b2fe:	f1bc 0f19 	cmp.w	ip, #25
 800b302:	d804      	bhi.n	800b30e <_strtoul_l.constprop.0+0xb6>
 800b304:	3c57      	subs	r4, #87	@ 0x57
 800b306:	e7d5      	b.n	800b2b4 <_strtoul_l.constprop.0+0x5c>
 800b308:	f04f 36ff 	mov.w	r6, #4294967295
 800b30c:	e7df      	b.n	800b2ce <_strtoul_l.constprop.0+0x76>
 800b30e:	1c73      	adds	r3, r6, #1
 800b310:	d106      	bne.n	800b320 <_strtoul_l.constprop.0+0xc8>
 800b312:	2322      	movs	r3, #34	@ 0x22
 800b314:	4630      	mov	r0, r6
 800b316:	f8ce 3000 	str.w	r3, [lr]
 800b31a:	b932      	cbnz	r2, 800b32a <_strtoul_l.constprop.0+0xd2>
 800b31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b320:	b107      	cbz	r7, 800b324 <_strtoul_l.constprop.0+0xcc>
 800b322:	4240      	negs	r0, r0
 800b324:	2a00      	cmp	r2, #0
 800b326:	d0f9      	beq.n	800b31c <_strtoul_l.constprop.0+0xc4>
 800b328:	b106      	cbz	r6, 800b32c <_strtoul_l.constprop.0+0xd4>
 800b32a:	1e69      	subs	r1, r5, #1
 800b32c:	6011      	str	r1, [r2, #0]
 800b32e:	e7f5      	b.n	800b31c <_strtoul_l.constprop.0+0xc4>
 800b330:	0800c861 	.word	0x0800c861

0800b334 <_strtoul_r>:
 800b334:	f7ff bf90 	b.w	800b258 <_strtoul_l.constprop.0>

0800b338 <__ascii_wctomb>:
 800b338:	4603      	mov	r3, r0
 800b33a:	4608      	mov	r0, r1
 800b33c:	b141      	cbz	r1, 800b350 <__ascii_wctomb+0x18>
 800b33e:	2aff      	cmp	r2, #255	@ 0xff
 800b340:	d904      	bls.n	800b34c <__ascii_wctomb+0x14>
 800b342:	228a      	movs	r2, #138	@ 0x8a
 800b344:	f04f 30ff 	mov.w	r0, #4294967295
 800b348:	601a      	str	r2, [r3, #0]
 800b34a:	4770      	bx	lr
 800b34c:	2001      	movs	r0, #1
 800b34e:	700a      	strb	r2, [r1, #0]
 800b350:	4770      	bx	lr
	...

0800b354 <fiprintf>:
 800b354:	b40e      	push	{r1, r2, r3}
 800b356:	b503      	push	{r0, r1, lr}
 800b358:	4601      	mov	r1, r0
 800b35a:	ab03      	add	r3, sp, #12
 800b35c:	4805      	ldr	r0, [pc, #20]	@ (800b374 <fiprintf+0x20>)
 800b35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b362:	6800      	ldr	r0, [r0, #0]
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	f000 f83d 	bl	800b3e4 <_vfiprintf_r>
 800b36a:	b002      	add	sp, #8
 800b36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b370:	b003      	add	sp, #12
 800b372:	4770      	bx	lr
 800b374:	20000020 	.word	0x20000020

0800b378 <abort>:
 800b378:	2006      	movs	r0, #6
 800b37a:	b508      	push	{r3, lr}
 800b37c:	f000 fa06 	bl	800b78c <raise>
 800b380:	2001      	movs	r0, #1
 800b382:	f7f8 f846 	bl	8003412 <_exit>

0800b386 <_malloc_usable_size_r>:
 800b386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b38a:	1f18      	subs	r0, r3, #4
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	bfbc      	itt	lt
 800b390:	580b      	ldrlt	r3, [r1, r0]
 800b392:	18c0      	addlt	r0, r0, r3
 800b394:	4770      	bx	lr

0800b396 <__sfputc_r>:
 800b396:	6893      	ldr	r3, [r2, #8]
 800b398:	b410      	push	{r4}
 800b39a:	3b01      	subs	r3, #1
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	6093      	str	r3, [r2, #8]
 800b3a0:	da07      	bge.n	800b3b2 <__sfputc_r+0x1c>
 800b3a2:	6994      	ldr	r4, [r2, #24]
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	db01      	blt.n	800b3ac <__sfputc_r+0x16>
 800b3a8:	290a      	cmp	r1, #10
 800b3aa:	d102      	bne.n	800b3b2 <__sfputc_r+0x1c>
 800b3ac:	bc10      	pop	{r4}
 800b3ae:	f000 b931 	b.w	800b614 <__swbuf_r>
 800b3b2:	6813      	ldr	r3, [r2, #0]
 800b3b4:	1c58      	adds	r0, r3, #1
 800b3b6:	6010      	str	r0, [r2, #0]
 800b3b8:	7019      	strb	r1, [r3, #0]
 800b3ba:	4608      	mov	r0, r1
 800b3bc:	bc10      	pop	{r4}
 800b3be:	4770      	bx	lr

0800b3c0 <__sfputs_r>:
 800b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	460f      	mov	r7, r1
 800b3c6:	4614      	mov	r4, r2
 800b3c8:	18d5      	adds	r5, r2, r3
 800b3ca:	42ac      	cmp	r4, r5
 800b3cc:	d101      	bne.n	800b3d2 <__sfputs_r+0x12>
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	e007      	b.n	800b3e2 <__sfputs_r+0x22>
 800b3d2:	463a      	mov	r2, r7
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3da:	f7ff ffdc 	bl	800b396 <__sfputc_r>
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	d1f3      	bne.n	800b3ca <__sfputs_r+0xa>
 800b3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3e4 <_vfiprintf_r>:
 800b3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e8:	460d      	mov	r5, r1
 800b3ea:	4614      	mov	r4, r2
 800b3ec:	4698      	mov	r8, r3
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	b09d      	sub	sp, #116	@ 0x74
 800b3f2:	b118      	cbz	r0, 800b3fc <_vfiprintf_r+0x18>
 800b3f4:	6a03      	ldr	r3, [r0, #32]
 800b3f6:	b90b      	cbnz	r3, 800b3fc <_vfiprintf_r+0x18>
 800b3f8:	f7fc f9e0 	bl	80077bc <__sinit>
 800b3fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3fe:	07d9      	lsls	r1, r3, #31
 800b400:	d405      	bmi.n	800b40e <_vfiprintf_r+0x2a>
 800b402:	89ab      	ldrh	r3, [r5, #12]
 800b404:	059a      	lsls	r2, r3, #22
 800b406:	d402      	bmi.n	800b40e <_vfiprintf_r+0x2a>
 800b408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b40a:	f7fc fb2c 	bl	8007a66 <__retarget_lock_acquire_recursive>
 800b40e:	89ab      	ldrh	r3, [r5, #12]
 800b410:	071b      	lsls	r3, r3, #28
 800b412:	d501      	bpl.n	800b418 <_vfiprintf_r+0x34>
 800b414:	692b      	ldr	r3, [r5, #16]
 800b416:	b99b      	cbnz	r3, 800b440 <_vfiprintf_r+0x5c>
 800b418:	4629      	mov	r1, r5
 800b41a:	4630      	mov	r0, r6
 800b41c:	f000 f938 	bl	800b690 <__swsetup_r>
 800b420:	b170      	cbz	r0, 800b440 <_vfiprintf_r+0x5c>
 800b422:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b424:	07dc      	lsls	r4, r3, #31
 800b426:	d504      	bpl.n	800b432 <_vfiprintf_r+0x4e>
 800b428:	f04f 30ff 	mov.w	r0, #4294967295
 800b42c:	b01d      	add	sp, #116	@ 0x74
 800b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b432:	89ab      	ldrh	r3, [r5, #12]
 800b434:	0598      	lsls	r0, r3, #22
 800b436:	d4f7      	bmi.n	800b428 <_vfiprintf_r+0x44>
 800b438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b43a:	f7fc fb15 	bl	8007a68 <__retarget_lock_release_recursive>
 800b43e:	e7f3      	b.n	800b428 <_vfiprintf_r+0x44>
 800b440:	2300      	movs	r3, #0
 800b442:	9309      	str	r3, [sp, #36]	@ 0x24
 800b444:	2320      	movs	r3, #32
 800b446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b44a:	2330      	movs	r3, #48	@ 0x30
 800b44c:	f04f 0901 	mov.w	r9, #1
 800b450:	f8cd 800c 	str.w	r8, [sp, #12]
 800b454:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b600 <_vfiprintf_r+0x21c>
 800b458:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b45c:	4623      	mov	r3, r4
 800b45e:	469a      	mov	sl, r3
 800b460:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b464:	b10a      	cbz	r2, 800b46a <_vfiprintf_r+0x86>
 800b466:	2a25      	cmp	r2, #37	@ 0x25
 800b468:	d1f9      	bne.n	800b45e <_vfiprintf_r+0x7a>
 800b46a:	ebba 0b04 	subs.w	fp, sl, r4
 800b46e:	d00b      	beq.n	800b488 <_vfiprintf_r+0xa4>
 800b470:	465b      	mov	r3, fp
 800b472:	4622      	mov	r2, r4
 800b474:	4629      	mov	r1, r5
 800b476:	4630      	mov	r0, r6
 800b478:	f7ff ffa2 	bl	800b3c0 <__sfputs_r>
 800b47c:	3001      	adds	r0, #1
 800b47e:	f000 80a7 	beq.w	800b5d0 <_vfiprintf_r+0x1ec>
 800b482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b484:	445a      	add	r2, fp
 800b486:	9209      	str	r2, [sp, #36]	@ 0x24
 800b488:	f89a 3000 	ldrb.w	r3, [sl]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 809f 	beq.w	800b5d0 <_vfiprintf_r+0x1ec>
 800b492:	2300      	movs	r3, #0
 800b494:	f04f 32ff 	mov.w	r2, #4294967295
 800b498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b49c:	f10a 0a01 	add.w	sl, sl, #1
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	9307      	str	r3, [sp, #28]
 800b4a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4aa:	4654      	mov	r4, sl
 800b4ac:	2205      	movs	r2, #5
 800b4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b2:	4853      	ldr	r0, [pc, #332]	@ (800b600 <_vfiprintf_r+0x21c>)
 800b4b4:	f7fc fad9 	bl	8007a6a <memchr>
 800b4b8:	9a04      	ldr	r2, [sp, #16]
 800b4ba:	b9d8      	cbnz	r0, 800b4f4 <_vfiprintf_r+0x110>
 800b4bc:	06d1      	lsls	r1, r2, #27
 800b4be:	bf44      	itt	mi
 800b4c0:	2320      	movmi	r3, #32
 800b4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4c6:	0713      	lsls	r3, r2, #28
 800b4c8:	bf44      	itt	mi
 800b4ca:	232b      	movmi	r3, #43	@ 0x2b
 800b4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4d6:	d015      	beq.n	800b504 <_vfiprintf_r+0x120>
 800b4d8:	4654      	mov	r4, sl
 800b4da:	2000      	movs	r0, #0
 800b4dc:	f04f 0c0a 	mov.w	ip, #10
 800b4e0:	9a07      	ldr	r2, [sp, #28]
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4e8:	3b30      	subs	r3, #48	@ 0x30
 800b4ea:	2b09      	cmp	r3, #9
 800b4ec:	d94b      	bls.n	800b586 <_vfiprintf_r+0x1a2>
 800b4ee:	b1b0      	cbz	r0, 800b51e <_vfiprintf_r+0x13a>
 800b4f0:	9207      	str	r2, [sp, #28]
 800b4f2:	e014      	b.n	800b51e <_vfiprintf_r+0x13a>
 800b4f4:	eba0 0308 	sub.w	r3, r0, r8
 800b4f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	46a2      	mov	sl, r4
 800b500:	9304      	str	r3, [sp, #16]
 800b502:	e7d2      	b.n	800b4aa <_vfiprintf_r+0xc6>
 800b504:	9b03      	ldr	r3, [sp, #12]
 800b506:	1d19      	adds	r1, r3, #4
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	9103      	str	r1, [sp, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	bfbb      	ittet	lt
 800b510:	425b      	neglt	r3, r3
 800b512:	f042 0202 	orrlt.w	r2, r2, #2
 800b516:	9307      	strge	r3, [sp, #28]
 800b518:	9307      	strlt	r3, [sp, #28]
 800b51a:	bfb8      	it	lt
 800b51c:	9204      	strlt	r2, [sp, #16]
 800b51e:	7823      	ldrb	r3, [r4, #0]
 800b520:	2b2e      	cmp	r3, #46	@ 0x2e
 800b522:	d10a      	bne.n	800b53a <_vfiprintf_r+0x156>
 800b524:	7863      	ldrb	r3, [r4, #1]
 800b526:	2b2a      	cmp	r3, #42	@ 0x2a
 800b528:	d132      	bne.n	800b590 <_vfiprintf_r+0x1ac>
 800b52a:	9b03      	ldr	r3, [sp, #12]
 800b52c:	3402      	adds	r4, #2
 800b52e:	1d1a      	adds	r2, r3, #4
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	9203      	str	r2, [sp, #12]
 800b534:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b538:	9305      	str	r3, [sp, #20]
 800b53a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b604 <_vfiprintf_r+0x220>
 800b53e:	2203      	movs	r2, #3
 800b540:	4650      	mov	r0, sl
 800b542:	7821      	ldrb	r1, [r4, #0]
 800b544:	f7fc fa91 	bl	8007a6a <memchr>
 800b548:	b138      	cbz	r0, 800b55a <_vfiprintf_r+0x176>
 800b54a:	2240      	movs	r2, #64	@ 0x40
 800b54c:	9b04      	ldr	r3, [sp, #16]
 800b54e:	eba0 000a 	sub.w	r0, r0, sl
 800b552:	4082      	lsls	r2, r0
 800b554:	4313      	orrs	r3, r2
 800b556:	3401      	adds	r4, #1
 800b558:	9304      	str	r3, [sp, #16]
 800b55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b55e:	2206      	movs	r2, #6
 800b560:	4829      	ldr	r0, [pc, #164]	@ (800b608 <_vfiprintf_r+0x224>)
 800b562:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b566:	f7fc fa80 	bl	8007a6a <memchr>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	d03f      	beq.n	800b5ee <_vfiprintf_r+0x20a>
 800b56e:	4b27      	ldr	r3, [pc, #156]	@ (800b60c <_vfiprintf_r+0x228>)
 800b570:	bb1b      	cbnz	r3, 800b5ba <_vfiprintf_r+0x1d6>
 800b572:	9b03      	ldr	r3, [sp, #12]
 800b574:	3307      	adds	r3, #7
 800b576:	f023 0307 	bic.w	r3, r3, #7
 800b57a:	3308      	adds	r3, #8
 800b57c:	9303      	str	r3, [sp, #12]
 800b57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b580:	443b      	add	r3, r7
 800b582:	9309      	str	r3, [sp, #36]	@ 0x24
 800b584:	e76a      	b.n	800b45c <_vfiprintf_r+0x78>
 800b586:	460c      	mov	r4, r1
 800b588:	2001      	movs	r0, #1
 800b58a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b58e:	e7a8      	b.n	800b4e2 <_vfiprintf_r+0xfe>
 800b590:	2300      	movs	r3, #0
 800b592:	f04f 0c0a 	mov.w	ip, #10
 800b596:	4619      	mov	r1, r3
 800b598:	3401      	adds	r4, #1
 800b59a:	9305      	str	r3, [sp, #20]
 800b59c:	4620      	mov	r0, r4
 800b59e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a2:	3a30      	subs	r2, #48	@ 0x30
 800b5a4:	2a09      	cmp	r2, #9
 800b5a6:	d903      	bls.n	800b5b0 <_vfiprintf_r+0x1cc>
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d0c6      	beq.n	800b53a <_vfiprintf_r+0x156>
 800b5ac:	9105      	str	r1, [sp, #20]
 800b5ae:	e7c4      	b.n	800b53a <_vfiprintf_r+0x156>
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5b8:	e7f0      	b.n	800b59c <_vfiprintf_r+0x1b8>
 800b5ba:	ab03      	add	r3, sp, #12
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	462a      	mov	r2, r5
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	4b13      	ldr	r3, [pc, #76]	@ (800b610 <_vfiprintf_r+0x22c>)
 800b5c4:	a904      	add	r1, sp, #16
 800b5c6:	f7fb fa9f 	bl	8006b08 <_printf_float>
 800b5ca:	4607      	mov	r7, r0
 800b5cc:	1c78      	adds	r0, r7, #1
 800b5ce:	d1d6      	bne.n	800b57e <_vfiprintf_r+0x19a>
 800b5d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5d2:	07d9      	lsls	r1, r3, #31
 800b5d4:	d405      	bmi.n	800b5e2 <_vfiprintf_r+0x1fe>
 800b5d6:	89ab      	ldrh	r3, [r5, #12]
 800b5d8:	059a      	lsls	r2, r3, #22
 800b5da:	d402      	bmi.n	800b5e2 <_vfiprintf_r+0x1fe>
 800b5dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5de:	f7fc fa43 	bl	8007a68 <__retarget_lock_release_recursive>
 800b5e2:	89ab      	ldrh	r3, [r5, #12]
 800b5e4:	065b      	lsls	r3, r3, #25
 800b5e6:	f53f af1f 	bmi.w	800b428 <_vfiprintf_r+0x44>
 800b5ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5ec:	e71e      	b.n	800b42c <_vfiprintf_r+0x48>
 800b5ee:	ab03      	add	r3, sp, #12
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	462a      	mov	r2, r5
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	4b06      	ldr	r3, [pc, #24]	@ (800b610 <_vfiprintf_r+0x22c>)
 800b5f8:	a904      	add	r1, sp, #16
 800b5fa:	f7fb fd23 	bl	8007044 <_printf_i>
 800b5fe:	e7e4      	b.n	800b5ca <_vfiprintf_r+0x1e6>
 800b600:	0800c961 	.word	0x0800c961
 800b604:	0800c967 	.word	0x0800c967
 800b608:	0800c96b 	.word	0x0800c96b
 800b60c:	08006b09 	.word	0x08006b09
 800b610:	0800b3c1 	.word	0x0800b3c1

0800b614 <__swbuf_r>:
 800b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b616:	460e      	mov	r6, r1
 800b618:	4614      	mov	r4, r2
 800b61a:	4605      	mov	r5, r0
 800b61c:	b118      	cbz	r0, 800b626 <__swbuf_r+0x12>
 800b61e:	6a03      	ldr	r3, [r0, #32]
 800b620:	b90b      	cbnz	r3, 800b626 <__swbuf_r+0x12>
 800b622:	f7fc f8cb 	bl	80077bc <__sinit>
 800b626:	69a3      	ldr	r3, [r4, #24]
 800b628:	60a3      	str	r3, [r4, #8]
 800b62a:	89a3      	ldrh	r3, [r4, #12]
 800b62c:	071a      	lsls	r2, r3, #28
 800b62e:	d501      	bpl.n	800b634 <__swbuf_r+0x20>
 800b630:	6923      	ldr	r3, [r4, #16]
 800b632:	b943      	cbnz	r3, 800b646 <__swbuf_r+0x32>
 800b634:	4621      	mov	r1, r4
 800b636:	4628      	mov	r0, r5
 800b638:	f000 f82a 	bl	800b690 <__swsetup_r>
 800b63c:	b118      	cbz	r0, 800b646 <__swbuf_r+0x32>
 800b63e:	f04f 37ff 	mov.w	r7, #4294967295
 800b642:	4638      	mov	r0, r7
 800b644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	6922      	ldr	r2, [r4, #16]
 800b64a:	b2f6      	uxtb	r6, r6
 800b64c:	1a98      	subs	r0, r3, r2
 800b64e:	6963      	ldr	r3, [r4, #20]
 800b650:	4637      	mov	r7, r6
 800b652:	4283      	cmp	r3, r0
 800b654:	dc05      	bgt.n	800b662 <__swbuf_r+0x4e>
 800b656:	4621      	mov	r1, r4
 800b658:	4628      	mov	r0, r5
 800b65a:	f7ff f979 	bl	800a950 <_fflush_r>
 800b65e:	2800      	cmp	r0, #0
 800b660:	d1ed      	bne.n	800b63e <__swbuf_r+0x2a>
 800b662:	68a3      	ldr	r3, [r4, #8]
 800b664:	3b01      	subs	r3, #1
 800b666:	60a3      	str	r3, [r4, #8]
 800b668:	6823      	ldr	r3, [r4, #0]
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	6022      	str	r2, [r4, #0]
 800b66e:	701e      	strb	r6, [r3, #0]
 800b670:	6962      	ldr	r2, [r4, #20]
 800b672:	1c43      	adds	r3, r0, #1
 800b674:	429a      	cmp	r2, r3
 800b676:	d004      	beq.n	800b682 <__swbuf_r+0x6e>
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	07db      	lsls	r3, r3, #31
 800b67c:	d5e1      	bpl.n	800b642 <__swbuf_r+0x2e>
 800b67e:	2e0a      	cmp	r6, #10
 800b680:	d1df      	bne.n	800b642 <__swbuf_r+0x2e>
 800b682:	4621      	mov	r1, r4
 800b684:	4628      	mov	r0, r5
 800b686:	f7ff f963 	bl	800a950 <_fflush_r>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d0d9      	beq.n	800b642 <__swbuf_r+0x2e>
 800b68e:	e7d6      	b.n	800b63e <__swbuf_r+0x2a>

0800b690 <__swsetup_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4b29      	ldr	r3, [pc, #164]	@ (800b738 <__swsetup_r+0xa8>)
 800b694:	4605      	mov	r5, r0
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	460c      	mov	r4, r1
 800b69a:	b118      	cbz	r0, 800b6a4 <__swsetup_r+0x14>
 800b69c:	6a03      	ldr	r3, [r0, #32]
 800b69e:	b90b      	cbnz	r3, 800b6a4 <__swsetup_r+0x14>
 800b6a0:	f7fc f88c 	bl	80077bc <__sinit>
 800b6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a8:	0719      	lsls	r1, r3, #28
 800b6aa:	d422      	bmi.n	800b6f2 <__swsetup_r+0x62>
 800b6ac:	06da      	lsls	r2, r3, #27
 800b6ae:	d407      	bmi.n	800b6c0 <__swsetup_r+0x30>
 800b6b0:	2209      	movs	r2, #9
 800b6b2:	602a      	str	r2, [r5, #0]
 800b6b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6bc:	81a3      	strh	r3, [r4, #12]
 800b6be:	e033      	b.n	800b728 <__swsetup_r+0x98>
 800b6c0:	0758      	lsls	r0, r3, #29
 800b6c2:	d512      	bpl.n	800b6ea <__swsetup_r+0x5a>
 800b6c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6c6:	b141      	cbz	r1, 800b6da <__swsetup_r+0x4a>
 800b6c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6cc:	4299      	cmp	r1, r3
 800b6ce:	d002      	beq.n	800b6d6 <__swsetup_r+0x46>
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	f7fd f82d 	bl	8008730 <_free_r>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6da:	89a3      	ldrh	r3, [r4, #12]
 800b6dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6e0:	81a3      	strh	r3, [r4, #12]
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	6063      	str	r3, [r4, #4]
 800b6e6:	6923      	ldr	r3, [r4, #16]
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	f043 0308 	orr.w	r3, r3, #8
 800b6f0:	81a3      	strh	r3, [r4, #12]
 800b6f2:	6923      	ldr	r3, [r4, #16]
 800b6f4:	b94b      	cbnz	r3, 800b70a <__swsetup_r+0x7a>
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b700:	d003      	beq.n	800b70a <__swsetup_r+0x7a>
 800b702:	4621      	mov	r1, r4
 800b704:	4628      	mov	r0, r5
 800b706:	f000 f882 	bl	800b80e <__smakebuf_r>
 800b70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b70e:	f013 0201 	ands.w	r2, r3, #1
 800b712:	d00a      	beq.n	800b72a <__swsetup_r+0x9a>
 800b714:	2200      	movs	r2, #0
 800b716:	60a2      	str	r2, [r4, #8]
 800b718:	6962      	ldr	r2, [r4, #20]
 800b71a:	4252      	negs	r2, r2
 800b71c:	61a2      	str	r2, [r4, #24]
 800b71e:	6922      	ldr	r2, [r4, #16]
 800b720:	b942      	cbnz	r2, 800b734 <__swsetup_r+0xa4>
 800b722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b726:	d1c5      	bne.n	800b6b4 <__swsetup_r+0x24>
 800b728:	bd38      	pop	{r3, r4, r5, pc}
 800b72a:	0799      	lsls	r1, r3, #30
 800b72c:	bf58      	it	pl
 800b72e:	6962      	ldrpl	r2, [r4, #20]
 800b730:	60a2      	str	r2, [r4, #8]
 800b732:	e7f4      	b.n	800b71e <__swsetup_r+0x8e>
 800b734:	2000      	movs	r0, #0
 800b736:	e7f7      	b.n	800b728 <__swsetup_r+0x98>
 800b738:	20000020 	.word	0x20000020

0800b73c <_raise_r>:
 800b73c:	291f      	cmp	r1, #31
 800b73e:	b538      	push	{r3, r4, r5, lr}
 800b740:	4605      	mov	r5, r0
 800b742:	460c      	mov	r4, r1
 800b744:	d904      	bls.n	800b750 <_raise_r+0x14>
 800b746:	2316      	movs	r3, #22
 800b748:	6003      	str	r3, [r0, #0]
 800b74a:	f04f 30ff 	mov.w	r0, #4294967295
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b752:	b112      	cbz	r2, 800b75a <_raise_r+0x1e>
 800b754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b758:	b94b      	cbnz	r3, 800b76e <_raise_r+0x32>
 800b75a:	4628      	mov	r0, r5
 800b75c:	f000 f830 	bl	800b7c0 <_getpid_r>
 800b760:	4622      	mov	r2, r4
 800b762:	4601      	mov	r1, r0
 800b764:	4628      	mov	r0, r5
 800b766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b76a:	f000 b817 	b.w	800b79c <_kill_r>
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d00a      	beq.n	800b788 <_raise_r+0x4c>
 800b772:	1c59      	adds	r1, r3, #1
 800b774:	d103      	bne.n	800b77e <_raise_r+0x42>
 800b776:	2316      	movs	r3, #22
 800b778:	6003      	str	r3, [r0, #0]
 800b77a:	2001      	movs	r0, #1
 800b77c:	e7e7      	b.n	800b74e <_raise_r+0x12>
 800b77e:	2100      	movs	r1, #0
 800b780:	4620      	mov	r0, r4
 800b782:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b786:	4798      	blx	r3
 800b788:	2000      	movs	r0, #0
 800b78a:	e7e0      	b.n	800b74e <_raise_r+0x12>

0800b78c <raise>:
 800b78c:	4b02      	ldr	r3, [pc, #8]	@ (800b798 <raise+0xc>)
 800b78e:	4601      	mov	r1, r0
 800b790:	6818      	ldr	r0, [r3, #0]
 800b792:	f7ff bfd3 	b.w	800b73c <_raise_r>
 800b796:	bf00      	nop
 800b798:	20000020 	.word	0x20000020

0800b79c <_kill_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	2300      	movs	r3, #0
 800b7a0:	4d06      	ldr	r5, [pc, #24]	@ (800b7bc <_kill_r+0x20>)
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	4608      	mov	r0, r1
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	602b      	str	r3, [r5, #0]
 800b7aa:	f7f7 fe22 	bl	80033f2 <_kill>
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	d102      	bne.n	800b7b8 <_kill_r+0x1c>
 800b7b2:	682b      	ldr	r3, [r5, #0]
 800b7b4:	b103      	cbz	r3, 800b7b8 <_kill_r+0x1c>
 800b7b6:	6023      	str	r3, [r4, #0]
 800b7b8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ba:	bf00      	nop
 800b7bc:	20000a84 	.word	0x20000a84

0800b7c0 <_getpid_r>:
 800b7c0:	f7f7 be10 	b.w	80033e4 <_getpid>

0800b7c4 <__swhatbuf_r>:
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7cc:	4615      	mov	r5, r2
 800b7ce:	2900      	cmp	r1, #0
 800b7d0:	461e      	mov	r6, r3
 800b7d2:	b096      	sub	sp, #88	@ 0x58
 800b7d4:	da0c      	bge.n	800b7f0 <__swhatbuf_r+0x2c>
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	2100      	movs	r1, #0
 800b7da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7de:	bf14      	ite	ne
 800b7e0:	2340      	movne	r3, #64	@ 0x40
 800b7e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	6031      	str	r1, [r6, #0]
 800b7ea:	602b      	str	r3, [r5, #0]
 800b7ec:	b016      	add	sp, #88	@ 0x58
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	466a      	mov	r2, sp
 800b7f2:	f000 f849 	bl	800b888 <_fstat_r>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	dbed      	blt.n	800b7d6 <__swhatbuf_r+0x12>
 800b7fa:	9901      	ldr	r1, [sp, #4]
 800b7fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b800:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b804:	4259      	negs	r1, r3
 800b806:	4159      	adcs	r1, r3
 800b808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b80c:	e7eb      	b.n	800b7e6 <__swhatbuf_r+0x22>

0800b80e <__smakebuf_r>:
 800b80e:	898b      	ldrh	r3, [r1, #12]
 800b810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b812:	079d      	lsls	r5, r3, #30
 800b814:	4606      	mov	r6, r0
 800b816:	460c      	mov	r4, r1
 800b818:	d507      	bpl.n	800b82a <__smakebuf_r+0x1c>
 800b81a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b81e:	6023      	str	r3, [r4, #0]
 800b820:	6123      	str	r3, [r4, #16]
 800b822:	2301      	movs	r3, #1
 800b824:	6163      	str	r3, [r4, #20]
 800b826:	b003      	add	sp, #12
 800b828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b82a:	466a      	mov	r2, sp
 800b82c:	ab01      	add	r3, sp, #4
 800b82e:	f7ff ffc9 	bl	800b7c4 <__swhatbuf_r>
 800b832:	9f00      	ldr	r7, [sp, #0]
 800b834:	4605      	mov	r5, r0
 800b836:	4639      	mov	r1, r7
 800b838:	4630      	mov	r0, r6
 800b83a:	f7fc ffeb 	bl	8008814 <_malloc_r>
 800b83e:	b948      	cbnz	r0, 800b854 <__smakebuf_r+0x46>
 800b840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b844:	059a      	lsls	r2, r3, #22
 800b846:	d4ee      	bmi.n	800b826 <__smakebuf_r+0x18>
 800b848:	f023 0303 	bic.w	r3, r3, #3
 800b84c:	f043 0302 	orr.w	r3, r3, #2
 800b850:	81a3      	strh	r3, [r4, #12]
 800b852:	e7e2      	b.n	800b81a <__smakebuf_r+0xc>
 800b854:	89a3      	ldrh	r3, [r4, #12]
 800b856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b85e:	81a3      	strh	r3, [r4, #12]
 800b860:	9b01      	ldr	r3, [sp, #4]
 800b862:	6020      	str	r0, [r4, #0]
 800b864:	b15b      	cbz	r3, 800b87e <__smakebuf_r+0x70>
 800b866:	4630      	mov	r0, r6
 800b868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b86c:	f000 f81e 	bl	800b8ac <_isatty_r>
 800b870:	b128      	cbz	r0, 800b87e <__smakebuf_r+0x70>
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	f023 0303 	bic.w	r3, r3, #3
 800b878:	f043 0301 	orr.w	r3, r3, #1
 800b87c:	81a3      	strh	r3, [r4, #12]
 800b87e:	89a3      	ldrh	r3, [r4, #12]
 800b880:	431d      	orrs	r5, r3
 800b882:	81a5      	strh	r5, [r4, #12]
 800b884:	e7cf      	b.n	800b826 <__smakebuf_r+0x18>
	...

0800b888 <_fstat_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	2300      	movs	r3, #0
 800b88c:	4d06      	ldr	r5, [pc, #24]	@ (800b8a8 <_fstat_r+0x20>)
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	4611      	mov	r1, r2
 800b894:	602b      	str	r3, [r5, #0]
 800b896:	f7f7 fe0b 	bl	80034b0 <_fstat>
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	d102      	bne.n	800b8a4 <_fstat_r+0x1c>
 800b89e:	682b      	ldr	r3, [r5, #0]
 800b8a0:	b103      	cbz	r3, 800b8a4 <_fstat_r+0x1c>
 800b8a2:	6023      	str	r3, [r4, #0]
 800b8a4:	bd38      	pop	{r3, r4, r5, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20000a84 	.word	0x20000a84

0800b8ac <_isatty_r>:
 800b8ac:	b538      	push	{r3, r4, r5, lr}
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	4d05      	ldr	r5, [pc, #20]	@ (800b8c8 <_isatty_r+0x1c>)
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	4608      	mov	r0, r1
 800b8b6:	602b      	str	r3, [r5, #0]
 800b8b8:	f7f7 fe09 	bl	80034ce <_isatty>
 800b8bc:	1c43      	adds	r3, r0, #1
 800b8be:	d102      	bne.n	800b8c6 <_isatty_r+0x1a>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	b103      	cbz	r3, 800b8c6 <_isatty_r+0x1a>
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	bd38      	pop	{r3, r4, r5, pc}
 800b8c8:	20000a84 	.word	0x20000a84

0800b8cc <logf>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	f000 f824 	bl	800b91c <__ieee754_logf>
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f7f5 fc85 	bl	80011e8 <__aeabi_fcmpun>
 800b8de:	b970      	cbnz	r0, 800b8fe <logf+0x32>
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f7f5 fc76 	bl	80011d4 <__aeabi_fcmpgt>
 800b8e8:	b948      	cbnz	r0, 800b8fe <logf+0x32>
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f7f5 fc49 	bl	8001184 <__aeabi_fcmpeq>
 800b8f2:	b130      	cbz	r0, 800b902 <logf+0x36>
 800b8f4:	f7fc f88c 	bl	8007a10 <__errno>
 800b8f8:	2322      	movs	r3, #34	@ 0x22
 800b8fa:	4d06      	ldr	r5, [pc, #24]	@ (800b914 <logf+0x48>)
 800b8fc:	6003      	str	r3, [r0, #0]
 800b8fe:	4628      	mov	r0, r5
 800b900:	bd38      	pop	{r3, r4, r5, pc}
 800b902:	f7fc f885 	bl	8007a10 <__errno>
 800b906:	2321      	movs	r3, #33	@ 0x21
 800b908:	6003      	str	r3, [r0, #0]
 800b90a:	4803      	ldr	r0, [pc, #12]	@ (800b918 <logf+0x4c>)
 800b90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b910:	f7fc b8ba 	b.w	8007a88 <nanf>
 800b914:	ff800000 	.word	0xff800000
 800b918:	0800c9d0 	.word	0x0800c9d0

0800b91c <__ieee754_logf>:
 800b91c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800b920:	4601      	mov	r1, r0
 800b922:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b926:	d106      	bne.n	800b936 <__ieee754_logf+0x1a>
 800b928:	2100      	movs	r1, #0
 800b92a:	f04f 404c 	mov.w	r0, #3422552064	@ 0xcc000000
 800b92e:	f7f5 fb49 	bl	8000fc4 <__aeabi_fdiv>
 800b932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b936:	2800      	cmp	r0, #0
 800b938:	4604      	mov	r4, r0
 800b93a:	da03      	bge.n	800b944 <__ieee754_logf+0x28>
 800b93c:	f7f5 f984 	bl	8000c48 <__aeabi_fsub>
 800b940:	2100      	movs	r1, #0
 800b942:	e7f4      	b.n	800b92e <__ieee754_logf+0x12>
 800b944:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b948:	db02      	blt.n	800b950 <__ieee754_logf+0x34>
 800b94a:	f7f5 f97f 	bl	8000c4c <__addsf3>
 800b94e:	e7f0      	b.n	800b932 <__ieee754_logf+0x16>
 800b950:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800b954:	da35      	bge.n	800b9c2 <__ieee754_logf+0xa6>
 800b956:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800b95a:	f7f5 fa7f 	bl	8000e5c <__aeabi_fmul>
 800b95e:	f06f 0318 	mvn.w	r3, #24
 800b962:	4604      	mov	r4, r0
 800b964:	15e7      	asrs	r7, r4, #23
 800b966:	3f7f      	subs	r7, #127	@ 0x7f
 800b968:	441f      	add	r7, r3
 800b96a:	4b76      	ldr	r3, [pc, #472]	@ (800bb44 <__ieee754_logf+0x228>)
 800b96c:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800b970:	4423      	add	r3, r4
 800b972:	f403 0000 	and.w	r0, r3, #8388608	@ 0x800000
 800b976:	f080 507e 	eor.w	r0, r0, #1065353216	@ 0x3f800000
 800b97a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b97e:	4320      	orrs	r0, r4
 800b980:	eb07 57d3 	add.w	r7, r7, r3, lsr #23
 800b984:	f7f5 f960 	bl	8000c48 <__aeabi_fsub>
 800b988:	4b6f      	ldr	r3, [pc, #444]	@ (800bb48 <__ieee754_logf+0x22c>)
 800b98a:	f104 020f 	add.w	r2, r4, #15
 800b98e:	4013      	ands	r3, r2
 800b990:	4606      	mov	r6, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d143      	bne.n	800ba1e <__ieee754_logf+0x102>
 800b996:	2100      	movs	r1, #0
 800b998:	f7f5 fbf4 	bl	8001184 <__aeabi_fcmpeq>
 800b99c:	b198      	cbz	r0, 800b9c6 <__ieee754_logf+0xaa>
 800b99e:	2f00      	cmp	r7, #0
 800b9a0:	f000 80cd 	beq.w	800bb3e <__ieee754_logf+0x222>
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	f7f5 fa05 	bl	8000db4 <__aeabi_i2f>
 800b9aa:	4968      	ldr	r1, [pc, #416]	@ (800bb4c <__ieee754_logf+0x230>)
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	f7f5 fa55 	bl	8000e5c <__aeabi_fmul>
 800b9b2:	4967      	ldr	r1, [pc, #412]	@ (800bb50 <__ieee754_logf+0x234>)
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f7f5 fa50 	bl	8000e5c <__aeabi_fmul>
 800b9bc:	4601      	mov	r1, r0
 800b9be:	4620      	mov	r0, r4
 800b9c0:	e7c3      	b.n	800b94a <__ieee754_logf+0x2e>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	e7ce      	b.n	800b964 <__ieee754_logf+0x48>
 800b9c6:	4963      	ldr	r1, [pc, #396]	@ (800bb54 <__ieee754_logf+0x238>)
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f7f5 fa47 	bl	8000e5c <__aeabi_fmul>
 800b9ce:	4601      	mov	r1, r0
 800b9d0:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800b9d4:	f7f5 f938 	bl	8000c48 <__aeabi_fsub>
 800b9d8:	4631      	mov	r1, r6
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f7f5 fa3d 	bl	8000e5c <__aeabi_fmul>
 800b9e2:	4601      	mov	r1, r0
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f7f5 fa39 	bl	8000e5c <__aeabi_fmul>
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	b90f      	cbnz	r7, 800b9f2 <__ieee754_logf+0xd6>
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	e078      	b.n	800bae4 <__ieee754_logf+0x1c8>
 800b9f2:	4638      	mov	r0, r7
 800b9f4:	f7f5 f9de 	bl	8000db4 <__aeabi_i2f>
 800b9f8:	4954      	ldr	r1, [pc, #336]	@ (800bb4c <__ieee754_logf+0x230>)
 800b9fa:	4607      	mov	r7, r0
 800b9fc:	f7f5 fa2e 	bl	8000e5c <__aeabi_fmul>
 800ba00:	4605      	mov	r5, r0
 800ba02:	4638      	mov	r0, r7
 800ba04:	4952      	ldr	r1, [pc, #328]	@ (800bb50 <__ieee754_logf+0x234>)
 800ba06:	f7f5 fa29 	bl	8000e5c <__aeabi_fmul>
 800ba0a:	4601      	mov	r1, r0
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f7f5 f91b 	bl	8000c48 <__aeabi_fsub>
 800ba12:	4631      	mov	r1, r6
 800ba14:	f7f5 f918 	bl	8000c48 <__aeabi_fsub>
 800ba18:	4601      	mov	r1, r0
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	e079      	b.n	800bb12 <__ieee754_logf+0x1f6>
 800ba1e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ba22:	f7f5 f913 	bl	8000c4c <__addsf3>
 800ba26:	4601      	mov	r1, r0
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f7f5 facb 	bl	8000fc4 <__aeabi_fdiv>
 800ba2e:	4681      	mov	r9, r0
 800ba30:	4638      	mov	r0, r7
 800ba32:	f7f5 f9bf 	bl	8000db4 <__aeabi_i2f>
 800ba36:	4649      	mov	r1, r9
 800ba38:	4680      	mov	r8, r0
 800ba3a:	4648      	mov	r0, r9
 800ba3c:	f7f5 fa0e 	bl	8000e5c <__aeabi_fmul>
 800ba40:	4601      	mov	r1, r0
 800ba42:	4682      	mov	sl, r0
 800ba44:	f7f5 fa0a 	bl	8000e5c <__aeabi_fmul>
 800ba48:	4605      	mov	r5, r0
 800ba4a:	4943      	ldr	r1, [pc, #268]	@ (800bb58 <__ieee754_logf+0x23c>)
 800ba4c:	f7f5 fa06 	bl	8000e5c <__aeabi_fmul>
 800ba50:	4942      	ldr	r1, [pc, #264]	@ (800bb5c <__ieee754_logf+0x240>)
 800ba52:	f7f5 f8fb 	bl	8000c4c <__addsf3>
 800ba56:	4629      	mov	r1, r5
 800ba58:	f7f5 fa00 	bl	8000e5c <__aeabi_fmul>
 800ba5c:	4940      	ldr	r1, [pc, #256]	@ (800bb60 <__ieee754_logf+0x244>)
 800ba5e:	f7f5 f8f5 	bl	8000c4c <__addsf3>
 800ba62:	4629      	mov	r1, r5
 800ba64:	f7f5 f9fa 	bl	8000e5c <__aeabi_fmul>
 800ba68:	493e      	ldr	r1, [pc, #248]	@ (800bb64 <__ieee754_logf+0x248>)
 800ba6a:	f7f5 f8ef 	bl	8000c4c <__addsf3>
 800ba6e:	4651      	mov	r1, sl
 800ba70:	f7f5 f9f4 	bl	8000e5c <__aeabi_fmul>
 800ba74:	493c      	ldr	r1, [pc, #240]	@ (800bb68 <__ieee754_logf+0x24c>)
 800ba76:	4682      	mov	sl, r0
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f7f5 f9ef 	bl	8000e5c <__aeabi_fmul>
 800ba7e:	493b      	ldr	r1, [pc, #236]	@ (800bb6c <__ieee754_logf+0x250>)
 800ba80:	f7f5 f8e4 	bl	8000c4c <__addsf3>
 800ba84:	4629      	mov	r1, r5
 800ba86:	f7f5 f9e9 	bl	8000e5c <__aeabi_fmul>
 800ba8a:	4939      	ldr	r1, [pc, #228]	@ (800bb70 <__ieee754_logf+0x254>)
 800ba8c:	f7f5 f8de 	bl	8000c4c <__addsf3>
 800ba90:	4629      	mov	r1, r5
 800ba92:	f7f5 f9e3 	bl	8000e5c <__aeabi_fmul>
 800ba96:	4601      	mov	r1, r0
 800ba98:	4650      	mov	r0, sl
 800ba9a:	f7f5 f8d7 	bl	8000c4c <__addsf3>
 800ba9e:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 800bb74 <__ieee754_logf+0x258>
 800baa2:	4605      	mov	r5, r0
 800baa4:	44a3      	add	fp, r4
 800baa6:	f5c4 1457 	rsb	r4, r4, #3522560	@ 0x35c000
 800baaa:	f504 7422 	add.w	r4, r4, #648	@ 0x288
 800baae:	ea44 040b 	orr.w	r4, r4, fp
 800bab2:	2c00      	cmp	r4, #0
 800bab4:	dd30      	ble.n	800bb18 <__ieee754_logf+0x1fc>
 800bab6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800baba:	4630      	mov	r0, r6
 800babc:	f7f5 f9ce 	bl	8000e5c <__aeabi_fmul>
 800bac0:	4631      	mov	r1, r6
 800bac2:	f7f5 f9cb 	bl	8000e5c <__aeabi_fmul>
 800bac6:	4601      	mov	r1, r0
 800bac8:	4604      	mov	r4, r0
 800baca:	4628      	mov	r0, r5
 800bacc:	f7f5 f8be 	bl	8000c4c <__addsf3>
 800bad0:	4649      	mov	r1, r9
 800bad2:	f7f5 f9c3 	bl	8000e5c <__aeabi_fmul>
 800bad6:	4605      	mov	r5, r0
 800bad8:	b937      	cbnz	r7, 800bae8 <__ieee754_logf+0x1cc>
 800bada:	4601      	mov	r1, r0
 800badc:	4620      	mov	r0, r4
 800bade:	f7f5 f8b3 	bl	8000c48 <__aeabi_fsub>
 800bae2:	4601      	mov	r1, r0
 800bae4:	4630      	mov	r0, r6
 800bae6:	e014      	b.n	800bb12 <__ieee754_logf+0x1f6>
 800bae8:	4918      	ldr	r1, [pc, #96]	@ (800bb4c <__ieee754_logf+0x230>)
 800baea:	4640      	mov	r0, r8
 800baec:	f7f5 f9b6 	bl	8000e5c <__aeabi_fmul>
 800baf0:	4917      	ldr	r1, [pc, #92]	@ (800bb50 <__ieee754_logf+0x234>)
 800baf2:	4607      	mov	r7, r0
 800baf4:	4640      	mov	r0, r8
 800baf6:	f7f5 f9b1 	bl	8000e5c <__aeabi_fmul>
 800bafa:	4629      	mov	r1, r5
 800bafc:	f7f5 f8a6 	bl	8000c4c <__addsf3>
 800bb00:	4601      	mov	r1, r0
 800bb02:	4620      	mov	r0, r4
 800bb04:	f7f5 f8a0 	bl	8000c48 <__aeabi_fsub>
 800bb08:	4631      	mov	r1, r6
 800bb0a:	f7f5 f89d 	bl	8000c48 <__aeabi_fsub>
 800bb0e:	4601      	mov	r1, r0
 800bb10:	4638      	mov	r0, r7
 800bb12:	f7f5 f899 	bl	8000c48 <__aeabi_fsub>
 800bb16:	e70c      	b.n	800b932 <__ieee754_logf+0x16>
 800bb18:	4601      	mov	r1, r0
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f7f5 f894 	bl	8000c48 <__aeabi_fsub>
 800bb20:	4649      	mov	r1, r9
 800bb22:	f7f5 f99b 	bl	8000e5c <__aeabi_fmul>
 800bb26:	4604      	mov	r4, r0
 800bb28:	2f00      	cmp	r7, #0
 800bb2a:	f43f af60 	beq.w	800b9ee <__ieee754_logf+0xd2>
 800bb2e:	4907      	ldr	r1, [pc, #28]	@ (800bb4c <__ieee754_logf+0x230>)
 800bb30:	4640      	mov	r0, r8
 800bb32:	f7f5 f993 	bl	8000e5c <__aeabi_fmul>
 800bb36:	4906      	ldr	r1, [pc, #24]	@ (800bb50 <__ieee754_logf+0x234>)
 800bb38:	4605      	mov	r5, r0
 800bb3a:	4640      	mov	r0, r8
 800bb3c:	e763      	b.n	800ba06 <__ieee754_logf+0xea>
 800bb3e:	2000      	movs	r0, #0
 800bb40:	e6f7      	b.n	800b932 <__ieee754_logf+0x16>
 800bb42:	bf00      	nop
 800bb44:	004afb20 	.word	0x004afb20
 800bb48:	007ffff0 	.word	0x007ffff0
 800bb4c:	3f317180 	.word	0x3f317180
 800bb50:	3717f7d1 	.word	0x3717f7d1
 800bb54:	3eaaaaab 	.word	0x3eaaaaab
 800bb58:	3e178897 	.word	0x3e178897
 800bb5c:	3e3a3325 	.word	0x3e3a3325
 800bb60:	3e924925 	.word	0x3e924925
 800bb64:	3f2aaaab 	.word	0x3f2aaaab
 800bb68:	3e1cd04f 	.word	0x3e1cd04f
 800bb6c:	3e638e29 	.word	0x3e638e29
 800bb70:	3ecccccd 	.word	0x3ecccccd
 800bb74:	ffcf5c30 	.word	0xffcf5c30

0800bb78 <_init>:
 800bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7a:	bf00      	nop
 800bb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb7e:	bc08      	pop	{r3}
 800bb80:	469e      	mov	lr, r3
 800bb82:	4770      	bx	lr

0800bb84 <_fini>:
 800bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb86:	bf00      	nop
 800bb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb8a:	bc08      	pop	{r3}
 800bb8c:	469e      	mov	lr, r3
 800bb8e:	4770      	bx	lr
